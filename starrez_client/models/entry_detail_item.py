# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntryDetailItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_detail_id': 'int',
        'entry_id': 'int',
        'photo_path': 'str',
        'photo_image': 'str',
        'staff_id': 'int',
        'classification_id': 'int',
        'attendee_status_enum': 'str',
        'event_registration_fee_id': 'int',
        'country_of_birth_country_id': 'int',
        'country_of_residence_country_id': 'int',
        'region_of_birth_id': 'int',
        'nationality_id': 'int',
        'citizenship_country_id': 'int',
        'international': 'bool',
        'international_details': 'str',
        'visa': 'bool',
        'visa_details': 'str',
        'religion': 'str',
        'ethnicity': 'str',
        'medical': 'str',
        'disability': 'str',
        'dietary': 'str',
        'special_needs': 'str',
        'married': 'bool',
        'deceased': 'bool',
        'living_with_dependents': 'bool',
        'date_entry': 'str',
        'date_exit': 'str',
        'resident_year': 'str',
        'resident_status': 'str',
        'occupation': 'str',
        'hear_about_us': 'str',
        'vehicle_registration': 'str',
        'vehicle_details': 'str',
        'vehicle_permit': 'str',
        'previous_membership': 'str',
        'previous_membership_years': 'str',
        'previous_member_name': 'str',
        'previous_member_years': 'str',
        'previous_member_relationship': 'str',
        'account_hold': 'bool',
        'account_code': 'str',
        'account_comments': 'str',
        'account_due_date': 'str',
        'account_payment_type_id': 'int',
        'account_bank_name': 'str',
        'account_bank_number': 'str',
        'account_detail1': 'str',
        'account_detail2': 'str',
        'account_detail3': 'str',
        'account_detail4': 'str',
        'financial_support_id': 'int',
        'financial_comments': 'str',
        'enrollment_class': 'str',
        'enrollment_term': 'str',
        'enrollment_level': 'str',
        'enrollment_status': 'str',
        'enrollment_year': 'str',
        'profile_interests': 'str',
        'career': 'str',
        'career_comments': 'str',
        'employment_details': 'str',
        'incident_hold': 'bool',
        'incident_hold_comments': 'str',
        'comments': 'str',
        'deceased_date': 'str',
        'visitor_hold': 'bool',
        'uses_screen_reader': 'bool',
        'date_modified': 'str'
    }

    attribute_map = {
        'entry_detail_id': 'EntryDetailID',
        'entry_id': 'EntryID',
        'photo_path': 'PhotoPath',
        'photo_image': 'PhotoImage',
        'staff_id': 'StaffID',
        'classification_id': 'ClassificationID',
        'attendee_status_enum': 'AttendeeStatusEnum',
        'event_registration_fee_id': 'EventRegistrationFeeID',
        'country_of_birth_country_id': 'CountryOfBirth_CountryID',
        'country_of_residence_country_id': 'CountryOfResidence_CountryID',
        'region_of_birth_id': 'RegionOfBirthID',
        'nationality_id': 'NationalityID',
        'citizenship_country_id': 'Citizenship_CountryID',
        'international': 'International',
        'international_details': 'InternationalDetails',
        'visa': 'Visa',
        'visa_details': 'VisaDetails',
        'religion': 'Religion',
        'ethnicity': 'Ethnicity',
        'medical': 'Medical',
        'disability': 'Disability',
        'dietary': 'Dietary',
        'special_needs': 'SpecialNeeds',
        'married': 'Married',
        'deceased': 'Deceased',
        'living_with_dependents': 'LivingWithDependents',
        'date_entry': 'DateEntry',
        'date_exit': 'DateExit',
        'resident_year': 'ResidentYear',
        'resident_status': 'ResidentStatus',
        'occupation': 'Occupation',
        'hear_about_us': 'HearAboutUs',
        'vehicle_registration': 'VehicleRegistration',
        'vehicle_details': 'VehicleDetails',
        'vehicle_permit': 'VehiclePermit',
        'previous_membership': 'PreviousMembership',
        'previous_membership_years': 'PreviousMembershipYears',
        'previous_member_name': 'PreviousMemberName',
        'previous_member_years': 'PreviousMemberYears',
        'previous_member_relationship': 'PreviousMemberRelationship',
        'account_hold': 'AccountHold',
        'account_code': 'AccountCode',
        'account_comments': 'AccountComments',
        'account_due_date': 'AccountDueDate',
        'account_payment_type_id': 'Account_PaymentTypeID',
        'account_bank_name': 'AccountBankName',
        'account_bank_number': 'AccountBankNumber',
        'account_detail1': 'AccountDetail1',
        'account_detail2': 'AccountDetail2',
        'account_detail3': 'AccountDetail3',
        'account_detail4': 'AccountDetail4',
        'financial_support_id': 'FinancialSupportID',
        'financial_comments': 'FinancialComments',
        'enrollment_class': 'EnrollmentClass',
        'enrollment_term': 'EnrollmentTerm',
        'enrollment_level': 'EnrollmentLevel',
        'enrollment_status': 'EnrollmentStatus',
        'enrollment_year': 'EnrollmentYear',
        'profile_interests': 'ProfileInterests',
        'career': 'Career',
        'career_comments': 'CareerComments',
        'employment_details': 'EmploymentDetails',
        'incident_hold': 'IncidentHold',
        'incident_hold_comments': 'IncidentHoldComments',
        'comments': 'Comments',
        'deceased_date': 'DeceasedDate',
        'visitor_hold': 'VisitorHold',
        'uses_screen_reader': 'UsesScreenReader',
        'date_modified': 'DateModified'
    }

    def __init__(self, entry_detail_id=None, entry_id=None, photo_path=None, photo_image=None, staff_id=None, classification_id=None, attendee_status_enum=None, event_registration_fee_id=None, country_of_birth_country_id=None, country_of_residence_country_id=None, region_of_birth_id=None, nationality_id=None, citizenship_country_id=None, international=None, international_details=None, visa=None, visa_details=None, religion=None, ethnicity=None, medical=None, disability=None, dietary=None, special_needs=None, married=None, deceased=None, living_with_dependents=None, date_entry=None, date_exit=None, resident_year=None, resident_status=None, occupation=None, hear_about_us=None, vehicle_registration=None, vehicle_details=None, vehicle_permit=None, previous_membership=None, previous_membership_years=None, previous_member_name=None, previous_member_years=None, previous_member_relationship=None, account_hold=None, account_code=None, account_comments=None, account_due_date=None, account_payment_type_id=None, account_bank_name=None, account_bank_number=None, account_detail1=None, account_detail2=None, account_detail3=None, account_detail4=None, financial_support_id=None, financial_comments=None, enrollment_class=None, enrollment_term=None, enrollment_level=None, enrollment_status=None, enrollment_year=None, profile_interests=None, career=None, career_comments=None, employment_details=None, incident_hold=None, incident_hold_comments=None, comments=None, deceased_date=None, visitor_hold=None, uses_screen_reader=None, date_modified=None):  # noqa: E501
        """EntryDetailItem - a model defined in Swagger"""  # noqa: E501

        self._entry_detail_id = None
        self._entry_id = None
        self._photo_path = None
        self._photo_image = None
        self._staff_id = None
        self._classification_id = None
        self._attendee_status_enum = None
        self._event_registration_fee_id = None
        self._country_of_birth_country_id = None
        self._country_of_residence_country_id = None
        self._region_of_birth_id = None
        self._nationality_id = None
        self._citizenship_country_id = None
        self._international = None
        self._international_details = None
        self._visa = None
        self._visa_details = None
        self._religion = None
        self._ethnicity = None
        self._medical = None
        self._disability = None
        self._dietary = None
        self._special_needs = None
        self._married = None
        self._deceased = None
        self._living_with_dependents = None
        self._date_entry = None
        self._date_exit = None
        self._resident_year = None
        self._resident_status = None
        self._occupation = None
        self._hear_about_us = None
        self._vehicle_registration = None
        self._vehicle_details = None
        self._vehicle_permit = None
        self._previous_membership = None
        self._previous_membership_years = None
        self._previous_member_name = None
        self._previous_member_years = None
        self._previous_member_relationship = None
        self._account_hold = None
        self._account_code = None
        self._account_comments = None
        self._account_due_date = None
        self._account_payment_type_id = None
        self._account_bank_name = None
        self._account_bank_number = None
        self._account_detail1 = None
        self._account_detail2 = None
        self._account_detail3 = None
        self._account_detail4 = None
        self._financial_support_id = None
        self._financial_comments = None
        self._enrollment_class = None
        self._enrollment_term = None
        self._enrollment_level = None
        self._enrollment_status = None
        self._enrollment_year = None
        self._profile_interests = None
        self._career = None
        self._career_comments = None
        self._employment_details = None
        self._incident_hold = None
        self._incident_hold_comments = None
        self._comments = None
        self._deceased_date = None
        self._visitor_hold = None
        self._uses_screen_reader = None
        self._date_modified = None
        self.discriminator = None

        if entry_detail_id is not None:
            self.entry_detail_id = entry_detail_id
        if entry_id is not None:
            self.entry_id = entry_id
        if photo_path is not None:
            self.photo_path = photo_path
        if photo_image is not None:
            self.photo_image = photo_image
        if staff_id is not None:
            self.staff_id = staff_id
        if classification_id is not None:
            self.classification_id = classification_id
        if attendee_status_enum is not None:
            self.attendee_status_enum = attendee_status_enum
        if event_registration_fee_id is not None:
            self.event_registration_fee_id = event_registration_fee_id
        if country_of_birth_country_id is not None:
            self.country_of_birth_country_id = country_of_birth_country_id
        if country_of_residence_country_id is not None:
            self.country_of_residence_country_id = country_of_residence_country_id
        if region_of_birth_id is not None:
            self.region_of_birth_id = region_of_birth_id
        if nationality_id is not None:
            self.nationality_id = nationality_id
        if citizenship_country_id is not None:
            self.citizenship_country_id = citizenship_country_id
        if international is not None:
            self.international = international
        if international_details is not None:
            self.international_details = international_details
        if visa is not None:
            self.visa = visa
        if visa_details is not None:
            self.visa_details = visa_details
        if religion is not None:
            self.religion = religion
        if ethnicity is not None:
            self.ethnicity = ethnicity
        if medical is not None:
            self.medical = medical
        if disability is not None:
            self.disability = disability
        if dietary is not None:
            self.dietary = dietary
        if special_needs is not None:
            self.special_needs = special_needs
        if married is not None:
            self.married = married
        if deceased is not None:
            self.deceased = deceased
        if living_with_dependents is not None:
            self.living_with_dependents = living_with_dependents
        if date_entry is not None:
            self.date_entry = date_entry
        if date_exit is not None:
            self.date_exit = date_exit
        if resident_year is not None:
            self.resident_year = resident_year
        if resident_status is not None:
            self.resident_status = resident_status
        if occupation is not None:
            self.occupation = occupation
        if hear_about_us is not None:
            self.hear_about_us = hear_about_us
        if vehicle_registration is not None:
            self.vehicle_registration = vehicle_registration
        if vehicle_details is not None:
            self.vehicle_details = vehicle_details
        if vehicle_permit is not None:
            self.vehicle_permit = vehicle_permit
        if previous_membership is not None:
            self.previous_membership = previous_membership
        if previous_membership_years is not None:
            self.previous_membership_years = previous_membership_years
        if previous_member_name is not None:
            self.previous_member_name = previous_member_name
        if previous_member_years is not None:
            self.previous_member_years = previous_member_years
        if previous_member_relationship is not None:
            self.previous_member_relationship = previous_member_relationship
        if account_hold is not None:
            self.account_hold = account_hold
        if account_code is not None:
            self.account_code = account_code
        if account_comments is not None:
            self.account_comments = account_comments
        if account_due_date is not None:
            self.account_due_date = account_due_date
        if account_payment_type_id is not None:
            self.account_payment_type_id = account_payment_type_id
        if account_bank_name is not None:
            self.account_bank_name = account_bank_name
        if account_bank_number is not None:
            self.account_bank_number = account_bank_number
        if account_detail1 is not None:
            self.account_detail1 = account_detail1
        if account_detail2 is not None:
            self.account_detail2 = account_detail2
        if account_detail3 is not None:
            self.account_detail3 = account_detail3
        if account_detail4 is not None:
            self.account_detail4 = account_detail4
        if financial_support_id is not None:
            self.financial_support_id = financial_support_id
        if financial_comments is not None:
            self.financial_comments = financial_comments
        if enrollment_class is not None:
            self.enrollment_class = enrollment_class
        if enrollment_term is not None:
            self.enrollment_term = enrollment_term
        if enrollment_level is not None:
            self.enrollment_level = enrollment_level
        if enrollment_status is not None:
            self.enrollment_status = enrollment_status
        if enrollment_year is not None:
            self.enrollment_year = enrollment_year
        if profile_interests is not None:
            self.profile_interests = profile_interests
        if career is not None:
            self.career = career
        if career_comments is not None:
            self.career_comments = career_comments
        if employment_details is not None:
            self.employment_details = employment_details
        if incident_hold is not None:
            self.incident_hold = incident_hold
        if incident_hold_comments is not None:
            self.incident_hold_comments = incident_hold_comments
        if comments is not None:
            self.comments = comments
        if deceased_date is not None:
            self.deceased_date = deceased_date
        if visitor_hold is not None:
            self.visitor_hold = visitor_hold
        if uses_screen_reader is not None:
            self.uses_screen_reader = uses_screen_reader
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def entry_detail_id(self):
        """Gets the entry_detail_id of this EntryDetailItem.  # noqa: E501

        Entry Detail  # noqa: E501

        :return: The entry_detail_id of this EntryDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_detail_id

    @entry_detail_id.setter
    def entry_detail_id(self, entry_detail_id):
        """Sets the entry_detail_id of this EntryDetailItem.

        Entry Detail  # noqa: E501

        :param entry_detail_id: The entry_detail_id of this EntryDetailItem.  # noqa: E501
        :type: int
        """

        self._entry_detail_id = entry_detail_id

    @property
    def entry_id(self):
        """Gets the entry_id of this EntryDetailItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this EntryDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this EntryDetailItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this EntryDetailItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def photo_path(self):
        """Gets the photo_path of this EntryDetailItem.  # noqa: E501

        Photo Path  # noqa: E501

        :return: The photo_path of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._photo_path

    @photo_path.setter
    def photo_path(self, photo_path):
        """Sets the photo_path of this EntryDetailItem.

        Photo Path  # noqa: E501

        :param photo_path: The photo_path of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if photo_path is not None and len(photo_path) > 200:
            raise ValueError("Invalid value for `photo_path`, length must be less than or equal to `200`")  # noqa: E501

        self._photo_path = photo_path

    @property
    def photo_image(self):
        """Gets the photo_image of this EntryDetailItem.  # noqa: E501

        Photo Image  # noqa: E501

        :return: The photo_image of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._photo_image

    @photo_image.setter
    def photo_image(self, photo_image):
        """Sets the photo_image of this EntryDetailItem.

        Photo Image  # noqa: E501

        :param photo_image: The photo_image of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._photo_image = photo_image

    @property
    def staff_id(self):
        """Gets the staff_id of this EntryDetailItem.  # noqa: E501

        Staff  # noqa: E501

        :return: The staff_id of this EntryDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._staff_id

    @staff_id.setter
    def staff_id(self, staff_id):
        """Sets the staff_id of this EntryDetailItem.

        Staff  # noqa: E501

        :param staff_id: The staff_id of this EntryDetailItem.  # noqa: E501
        :type: int
        """

        self._staff_id = staff_id

    @property
    def classification_id(self):
        """Gets the classification_id of this EntryDetailItem.  # noqa: E501

        Classification  # noqa: E501

        :return: The classification_id of this EntryDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._classification_id

    @classification_id.setter
    def classification_id(self, classification_id):
        """Sets the classification_id of this EntryDetailItem.

        Classification  # noqa: E501

        :param classification_id: The classification_id of this EntryDetailItem.  # noqa: E501
        :type: int
        """

        self._classification_id = classification_id

    @property
    def attendee_status_enum(self):
        """Gets the attendee_status_enum of this EntryDetailItem.  # noqa: E501

        Attendee Status  # noqa: E501

        :return: The attendee_status_enum of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._attendee_status_enum

    @attendee_status_enum.setter
    def attendee_status_enum(self, attendee_status_enum):
        """Sets the attendee_status_enum of this EntryDetailItem.

        Attendee Status  # noqa: E501

        :param attendee_status_enum: The attendee_status_enum of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._attendee_status_enum = attendee_status_enum

    @property
    def event_registration_fee_id(self):
        """Gets the event_registration_fee_id of this EntryDetailItem.  # noqa: E501

        Event Registration Fee  # noqa: E501

        :return: The event_registration_fee_id of this EntryDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._event_registration_fee_id

    @event_registration_fee_id.setter
    def event_registration_fee_id(self, event_registration_fee_id):
        """Sets the event_registration_fee_id of this EntryDetailItem.

        Event Registration Fee  # noqa: E501

        :param event_registration_fee_id: The event_registration_fee_id of this EntryDetailItem.  # noqa: E501
        :type: int
        """

        self._event_registration_fee_id = event_registration_fee_id

    @property
    def country_of_birth_country_id(self):
        """Gets the country_of_birth_country_id of this EntryDetailItem.  # noqa: E501

        Country Of Birth Country  # noqa: E501

        :return: The country_of_birth_country_id of this EntryDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._country_of_birth_country_id

    @country_of_birth_country_id.setter
    def country_of_birth_country_id(self, country_of_birth_country_id):
        """Sets the country_of_birth_country_id of this EntryDetailItem.

        Country Of Birth Country  # noqa: E501

        :param country_of_birth_country_id: The country_of_birth_country_id of this EntryDetailItem.  # noqa: E501
        :type: int
        """

        self._country_of_birth_country_id = country_of_birth_country_id

    @property
    def country_of_residence_country_id(self):
        """Gets the country_of_residence_country_id of this EntryDetailItem.  # noqa: E501

        Country Of Residence Country  # noqa: E501

        :return: The country_of_residence_country_id of this EntryDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._country_of_residence_country_id

    @country_of_residence_country_id.setter
    def country_of_residence_country_id(self, country_of_residence_country_id):
        """Sets the country_of_residence_country_id of this EntryDetailItem.

        Country Of Residence Country  # noqa: E501

        :param country_of_residence_country_id: The country_of_residence_country_id of this EntryDetailItem.  # noqa: E501
        :type: int
        """

        self._country_of_residence_country_id = country_of_residence_country_id

    @property
    def region_of_birth_id(self):
        """Gets the region_of_birth_id of this EntryDetailItem.  # noqa: E501

        Region Of Birth  # noqa: E501

        :return: The region_of_birth_id of this EntryDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._region_of_birth_id

    @region_of_birth_id.setter
    def region_of_birth_id(self, region_of_birth_id):
        """Sets the region_of_birth_id of this EntryDetailItem.

        Region Of Birth  # noqa: E501

        :param region_of_birth_id: The region_of_birth_id of this EntryDetailItem.  # noqa: E501
        :type: int
        """

        self._region_of_birth_id = region_of_birth_id

    @property
    def nationality_id(self):
        """Gets the nationality_id of this EntryDetailItem.  # noqa: E501

        Nationality  # noqa: E501

        :return: The nationality_id of this EntryDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._nationality_id

    @nationality_id.setter
    def nationality_id(self, nationality_id):
        """Sets the nationality_id of this EntryDetailItem.

        Nationality  # noqa: E501

        :param nationality_id: The nationality_id of this EntryDetailItem.  # noqa: E501
        :type: int
        """

        self._nationality_id = nationality_id

    @property
    def citizenship_country_id(self):
        """Gets the citizenship_country_id of this EntryDetailItem.  # noqa: E501

        Citizenship Country  # noqa: E501

        :return: The citizenship_country_id of this EntryDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._citizenship_country_id

    @citizenship_country_id.setter
    def citizenship_country_id(self, citizenship_country_id):
        """Sets the citizenship_country_id of this EntryDetailItem.

        Citizenship Country  # noqa: E501

        :param citizenship_country_id: The citizenship_country_id of this EntryDetailItem.  # noqa: E501
        :type: int
        """

        self._citizenship_country_id = citizenship_country_id

    @property
    def international(self):
        """Gets the international of this EntryDetailItem.  # noqa: E501

        International  # noqa: E501

        :return: The international of this EntryDetailItem.  # noqa: E501
        :rtype: bool
        """
        return self._international

    @international.setter
    def international(self, international):
        """Sets the international of this EntryDetailItem.

        International  # noqa: E501

        :param international: The international of this EntryDetailItem.  # noqa: E501
        :type: bool
        """

        self._international = international

    @property
    def international_details(self):
        """Gets the international_details of this EntryDetailItem.  # noqa: E501

        International Details  # noqa: E501

        :return: The international_details of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._international_details

    @international_details.setter
    def international_details(self, international_details):
        """Sets the international_details of this EntryDetailItem.

        International Details  # noqa: E501

        :param international_details: The international_details of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if international_details is not None and len(international_details) > 50:
            raise ValueError("Invalid value for `international_details`, length must be less than or equal to `50`")  # noqa: E501

        self._international_details = international_details

    @property
    def visa(self):
        """Gets the visa of this EntryDetailItem.  # noqa: E501

        Visa  # noqa: E501

        :return: The visa of this EntryDetailItem.  # noqa: E501
        :rtype: bool
        """
        return self._visa

    @visa.setter
    def visa(self, visa):
        """Sets the visa of this EntryDetailItem.

        Visa  # noqa: E501

        :param visa: The visa of this EntryDetailItem.  # noqa: E501
        :type: bool
        """

        self._visa = visa

    @property
    def visa_details(self):
        """Gets the visa_details of this EntryDetailItem.  # noqa: E501

        Visa Details  # noqa: E501

        :return: The visa_details of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._visa_details

    @visa_details.setter
    def visa_details(self, visa_details):
        """Sets the visa_details of this EntryDetailItem.

        Visa Details  # noqa: E501

        :param visa_details: The visa_details of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if visa_details is not None and len(visa_details) > 100:
            raise ValueError("Invalid value for `visa_details`, length must be less than or equal to `100`")  # noqa: E501

        self._visa_details = visa_details

    @property
    def religion(self):
        """Gets the religion of this EntryDetailItem.  # noqa: E501

        Religion  # noqa: E501

        :return: The religion of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._religion

    @religion.setter
    def religion(self, religion):
        """Sets the religion of this EntryDetailItem.

        Religion  # noqa: E501

        :param religion: The religion of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if religion is not None and len(religion) > 20:
            raise ValueError("Invalid value for `religion`, length must be less than or equal to `20`")  # noqa: E501

        self._religion = religion

    @property
    def ethnicity(self):
        """Gets the ethnicity of this EntryDetailItem.  # noqa: E501

        Ethnicity  # noqa: E501

        :return: The ethnicity of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._ethnicity

    @ethnicity.setter
    def ethnicity(self, ethnicity):
        """Sets the ethnicity of this EntryDetailItem.

        Ethnicity  # noqa: E501

        :param ethnicity: The ethnicity of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if ethnicity is not None and len(ethnicity) > 50:
            raise ValueError("Invalid value for `ethnicity`, length must be less than or equal to `50`")  # noqa: E501

        self._ethnicity = ethnicity

    @property
    def medical(self):
        """Gets the medical of this EntryDetailItem.  # noqa: E501

        Medical  # noqa: E501

        :return: The medical of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._medical

    @medical.setter
    def medical(self, medical):
        """Sets the medical of this EntryDetailItem.

        Medical  # noqa: E501

        :param medical: The medical of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if medical is not None and len(medical) > 5000:
            raise ValueError("Invalid value for `medical`, length must be less than or equal to `5000`")  # noqa: E501

        self._medical = medical

    @property
    def disability(self):
        """Gets the disability of this EntryDetailItem.  # noqa: E501

        Disability  # noqa: E501

        :return: The disability of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._disability

    @disability.setter
    def disability(self, disability):
        """Sets the disability of this EntryDetailItem.

        Disability  # noqa: E501

        :param disability: The disability of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if disability is not None and len(disability) > 500:
            raise ValueError("Invalid value for `disability`, length must be less than or equal to `500`")  # noqa: E501

        self._disability = disability

    @property
    def dietary(self):
        """Gets the dietary of this EntryDetailItem.  # noqa: E501

        Dietary  # noqa: E501

        :return: The dietary of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._dietary

    @dietary.setter
    def dietary(self, dietary):
        """Sets the dietary of this EntryDetailItem.

        Dietary  # noqa: E501

        :param dietary: The dietary of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if dietary is not None and len(dietary) > 500:
            raise ValueError("Invalid value for `dietary`, length must be less than or equal to `500`")  # noqa: E501

        self._dietary = dietary

    @property
    def special_needs(self):
        """Gets the special_needs of this EntryDetailItem.  # noqa: E501

        Special Needs  # noqa: E501

        :return: The special_needs of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._special_needs

    @special_needs.setter
    def special_needs(self, special_needs):
        """Sets the special_needs of this EntryDetailItem.

        Special Needs  # noqa: E501

        :param special_needs: The special_needs of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if special_needs is not None and len(special_needs) > 500:
            raise ValueError("Invalid value for `special_needs`, length must be less than or equal to `500`")  # noqa: E501

        self._special_needs = special_needs

    @property
    def married(self):
        """Gets the married of this EntryDetailItem.  # noqa: E501

        Married  # noqa: E501

        :return: The married of this EntryDetailItem.  # noqa: E501
        :rtype: bool
        """
        return self._married

    @married.setter
    def married(self, married):
        """Sets the married of this EntryDetailItem.

        Married  # noqa: E501

        :param married: The married of this EntryDetailItem.  # noqa: E501
        :type: bool
        """

        self._married = married

    @property
    def deceased(self):
        """Gets the deceased of this EntryDetailItem.  # noqa: E501

        Deceased  # noqa: E501

        :return: The deceased of this EntryDetailItem.  # noqa: E501
        :rtype: bool
        """
        return self._deceased

    @deceased.setter
    def deceased(self, deceased):
        """Sets the deceased of this EntryDetailItem.

        Deceased  # noqa: E501

        :param deceased: The deceased of this EntryDetailItem.  # noqa: E501
        :type: bool
        """

        self._deceased = deceased

    @property
    def living_with_dependents(self):
        """Gets the living_with_dependents of this EntryDetailItem.  # noqa: E501

        Living With Dependents  # noqa: E501

        :return: The living_with_dependents of this EntryDetailItem.  # noqa: E501
        :rtype: bool
        """
        return self._living_with_dependents

    @living_with_dependents.setter
    def living_with_dependents(self, living_with_dependents):
        """Sets the living_with_dependents of this EntryDetailItem.

        Living With Dependents  # noqa: E501

        :param living_with_dependents: The living_with_dependents of this EntryDetailItem.  # noqa: E501
        :type: bool
        """

        self._living_with_dependents = living_with_dependents

    @property
    def date_entry(self):
        """Gets the date_entry of this EntryDetailItem.  # noqa: E501

        Date Entry  # noqa: E501

        :return: The date_entry of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._date_entry

    @date_entry.setter
    def date_entry(self, date_entry):
        """Sets the date_entry of this EntryDetailItem.

        Date Entry  # noqa: E501

        :param date_entry: The date_entry of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._date_entry = date_entry

    @property
    def date_exit(self):
        """Gets the date_exit of this EntryDetailItem.  # noqa: E501

        Date Exit  # noqa: E501

        :return: The date_exit of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._date_exit

    @date_exit.setter
    def date_exit(self, date_exit):
        """Sets the date_exit of this EntryDetailItem.

        Date Exit  # noqa: E501

        :param date_exit: The date_exit of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._date_exit = date_exit

    @property
    def resident_year(self):
        """Gets the resident_year of this EntryDetailItem.  # noqa: E501

        Resident Year  # noqa: E501

        :return: The resident_year of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._resident_year

    @resident_year.setter
    def resident_year(self, resident_year):
        """Sets the resident_year of this EntryDetailItem.

        Resident Year  # noqa: E501

        :param resident_year: The resident_year of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._resident_year = resident_year

    @property
    def resident_status(self):
        """Gets the resident_status of this EntryDetailItem.  # noqa: E501

        Resident Status  # noqa: E501

        :return: The resident_status of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._resident_status

    @resident_status.setter
    def resident_status(self, resident_status):
        """Sets the resident_status of this EntryDetailItem.

        Resident Status  # noqa: E501

        :param resident_status: The resident_status of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if resident_status is not None and len(resident_status) > 50:
            raise ValueError("Invalid value for `resident_status`, length must be less than or equal to `50`")  # noqa: E501

        self._resident_status = resident_status

    @property
    def occupation(self):
        """Gets the occupation of this EntryDetailItem.  # noqa: E501

        Occupation  # noqa: E501

        :return: The occupation of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this EntryDetailItem.

        Occupation  # noqa: E501

        :param occupation: The occupation of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if occupation is not None and len(occupation) > 50:
            raise ValueError("Invalid value for `occupation`, length must be less than or equal to `50`")  # noqa: E501

        self._occupation = occupation

    @property
    def hear_about_us(self):
        """Gets the hear_about_us of this EntryDetailItem.  # noqa: E501

        Hear About Us  # noqa: E501

        :return: The hear_about_us of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._hear_about_us

    @hear_about_us.setter
    def hear_about_us(self, hear_about_us):
        """Sets the hear_about_us of this EntryDetailItem.

        Hear About Us  # noqa: E501

        :param hear_about_us: The hear_about_us of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if hear_about_us is not None and len(hear_about_us) > 50:
            raise ValueError("Invalid value for `hear_about_us`, length must be less than or equal to `50`")  # noqa: E501

        self._hear_about_us = hear_about_us

    @property
    def vehicle_registration(self):
        """Gets the vehicle_registration of this EntryDetailItem.  # noqa: E501

        Vehicle Registration  # noqa: E501

        :return: The vehicle_registration of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_registration

    @vehicle_registration.setter
    def vehicle_registration(self, vehicle_registration):
        """Sets the vehicle_registration of this EntryDetailItem.

        Vehicle Registration  # noqa: E501

        :param vehicle_registration: The vehicle_registration of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if vehicle_registration is not None and len(vehicle_registration) > 20:
            raise ValueError("Invalid value for `vehicle_registration`, length must be less than or equal to `20`")  # noqa: E501

        self._vehicle_registration = vehicle_registration

    @property
    def vehicle_details(self):
        """Gets the vehicle_details of this EntryDetailItem.  # noqa: E501

        Vehicle Details  # noqa: E501

        :return: The vehicle_details of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_details

    @vehicle_details.setter
    def vehicle_details(self, vehicle_details):
        """Sets the vehicle_details of this EntryDetailItem.

        Vehicle Details  # noqa: E501

        :param vehicle_details: The vehicle_details of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if vehicle_details is not None and len(vehicle_details) > 250:
            raise ValueError("Invalid value for `vehicle_details`, length must be less than or equal to `250`")  # noqa: E501

        self._vehicle_details = vehicle_details

    @property
    def vehicle_permit(self):
        """Gets the vehicle_permit of this EntryDetailItem.  # noqa: E501

        Vehicle Permit  # noqa: E501

        :return: The vehicle_permit of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_permit

    @vehicle_permit.setter
    def vehicle_permit(self, vehicle_permit):
        """Sets the vehicle_permit of this EntryDetailItem.

        Vehicle Permit  # noqa: E501

        :param vehicle_permit: The vehicle_permit of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if vehicle_permit is not None and len(vehicle_permit) > 30:
            raise ValueError("Invalid value for `vehicle_permit`, length must be less than or equal to `30`")  # noqa: E501

        self._vehicle_permit = vehicle_permit

    @property
    def previous_membership(self):
        """Gets the previous_membership of this EntryDetailItem.  # noqa: E501

        Previous Membership  # noqa: E501

        :return: The previous_membership of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._previous_membership

    @previous_membership.setter
    def previous_membership(self, previous_membership):
        """Sets the previous_membership of this EntryDetailItem.

        Previous Membership  # noqa: E501

        :param previous_membership: The previous_membership of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if previous_membership is not None and len(previous_membership) > 50:
            raise ValueError("Invalid value for `previous_membership`, length must be less than or equal to `50`")  # noqa: E501

        self._previous_membership = previous_membership

    @property
    def previous_membership_years(self):
        """Gets the previous_membership_years of this EntryDetailItem.  # noqa: E501

        Previous Membership Years  # noqa: E501

        :return: The previous_membership_years of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._previous_membership_years

    @previous_membership_years.setter
    def previous_membership_years(self, previous_membership_years):
        """Sets the previous_membership_years of this EntryDetailItem.

        Previous Membership Years  # noqa: E501

        :param previous_membership_years: The previous_membership_years of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if previous_membership_years is not None and len(previous_membership_years) > 9:
            raise ValueError("Invalid value for `previous_membership_years`, length must be less than or equal to `9`")  # noqa: E501

        self._previous_membership_years = previous_membership_years

    @property
    def previous_member_name(self):
        """Gets the previous_member_name of this EntryDetailItem.  # noqa: E501

        Previous Member Name  # noqa: E501

        :return: The previous_member_name of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._previous_member_name

    @previous_member_name.setter
    def previous_member_name(self, previous_member_name):
        """Sets the previous_member_name of this EntryDetailItem.

        Previous Member Name  # noqa: E501

        :param previous_member_name: The previous_member_name of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if previous_member_name is not None and len(previous_member_name) > 50:
            raise ValueError("Invalid value for `previous_member_name`, length must be less than or equal to `50`")  # noqa: E501

        self._previous_member_name = previous_member_name

    @property
    def previous_member_years(self):
        """Gets the previous_member_years of this EntryDetailItem.  # noqa: E501

        Previous Member Years  # noqa: E501

        :return: The previous_member_years of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._previous_member_years

    @previous_member_years.setter
    def previous_member_years(self, previous_member_years):
        """Sets the previous_member_years of this EntryDetailItem.

        Previous Member Years  # noqa: E501

        :param previous_member_years: The previous_member_years of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if previous_member_years is not None and len(previous_member_years) > 9:
            raise ValueError("Invalid value for `previous_member_years`, length must be less than or equal to `9`")  # noqa: E501

        self._previous_member_years = previous_member_years

    @property
    def previous_member_relationship(self):
        """Gets the previous_member_relationship of this EntryDetailItem.  # noqa: E501

        Previous Member Relationship  # noqa: E501

        :return: The previous_member_relationship of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._previous_member_relationship

    @previous_member_relationship.setter
    def previous_member_relationship(self, previous_member_relationship):
        """Sets the previous_member_relationship of this EntryDetailItem.

        Previous Member Relationship  # noqa: E501

        :param previous_member_relationship: The previous_member_relationship of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if previous_member_relationship is not None and len(previous_member_relationship) > 20:
            raise ValueError("Invalid value for `previous_member_relationship`, length must be less than or equal to `20`")  # noqa: E501

        self._previous_member_relationship = previous_member_relationship

    @property
    def account_hold(self):
        """Gets the account_hold of this EntryDetailItem.  # noqa: E501

        Account Hold  # noqa: E501

        :return: The account_hold of this EntryDetailItem.  # noqa: E501
        :rtype: bool
        """
        return self._account_hold

    @account_hold.setter
    def account_hold(self, account_hold):
        """Sets the account_hold of this EntryDetailItem.

        Account Hold  # noqa: E501

        :param account_hold: The account_hold of this EntryDetailItem.  # noqa: E501
        :type: bool
        """

        self._account_hold = account_hold

    @property
    def account_code(self):
        """Gets the account_code of this EntryDetailItem.  # noqa: E501

        Account Code  # noqa: E501

        :return: The account_code of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this EntryDetailItem.

        Account Code  # noqa: E501

        :param account_code: The account_code of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if account_code is not None and len(account_code) > 20:
            raise ValueError("Invalid value for `account_code`, length must be less than or equal to `20`")  # noqa: E501

        self._account_code = account_code

    @property
    def account_comments(self):
        """Gets the account_comments of this EntryDetailItem.  # noqa: E501

        Account Comments  # noqa: E501

        :return: The account_comments of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._account_comments

    @account_comments.setter
    def account_comments(self, account_comments):
        """Sets the account_comments of this EntryDetailItem.

        Account Comments  # noqa: E501

        :param account_comments: The account_comments of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if account_comments is not None and len(account_comments) > 1000:
            raise ValueError("Invalid value for `account_comments`, length must be less than or equal to `1000`")  # noqa: E501

        self._account_comments = account_comments

    @property
    def account_due_date(self):
        """Gets the account_due_date of this EntryDetailItem.  # noqa: E501

        Account Due Date  # noqa: E501

        :return: The account_due_date of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._account_due_date

    @account_due_date.setter
    def account_due_date(self, account_due_date):
        """Sets the account_due_date of this EntryDetailItem.

        Account Due Date  # noqa: E501

        :param account_due_date: The account_due_date of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._account_due_date = account_due_date

    @property
    def account_payment_type_id(self):
        """Gets the account_payment_type_id of this EntryDetailItem.  # noqa: E501

        Account Payment Type  # noqa: E501

        :return: The account_payment_type_id of this EntryDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._account_payment_type_id

    @account_payment_type_id.setter
    def account_payment_type_id(self, account_payment_type_id):
        """Sets the account_payment_type_id of this EntryDetailItem.

        Account Payment Type  # noqa: E501

        :param account_payment_type_id: The account_payment_type_id of this EntryDetailItem.  # noqa: E501
        :type: int
        """

        self._account_payment_type_id = account_payment_type_id

    @property
    def account_bank_name(self):
        """Gets the account_bank_name of this EntryDetailItem.  # noqa: E501

        Account Bank Name  # noqa: E501

        :return: The account_bank_name of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._account_bank_name

    @account_bank_name.setter
    def account_bank_name(self, account_bank_name):
        """Sets the account_bank_name of this EntryDetailItem.

        Account Bank Name  # noqa: E501

        :param account_bank_name: The account_bank_name of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._account_bank_name = account_bank_name

    @property
    def account_bank_number(self):
        """Gets the account_bank_number of this EntryDetailItem.  # noqa: E501

        Account Bank Number  # noqa: E501

        :return: The account_bank_number of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._account_bank_number

    @account_bank_number.setter
    def account_bank_number(self, account_bank_number):
        """Sets the account_bank_number of this EntryDetailItem.

        Account Bank Number  # noqa: E501

        :param account_bank_number: The account_bank_number of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._account_bank_number = account_bank_number

    @property
    def account_detail1(self):
        """Gets the account_detail1 of this EntryDetailItem.  # noqa: E501

        Account 1  # noqa: E501

        :return: The account_detail1 of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._account_detail1

    @account_detail1.setter
    def account_detail1(self, account_detail1):
        """Sets the account_detail1 of this EntryDetailItem.

        Account 1  # noqa: E501

        :param account_detail1: The account_detail1 of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._account_detail1 = account_detail1

    @property
    def account_detail2(self):
        """Gets the account_detail2 of this EntryDetailItem.  # noqa: E501

        Account 2  # noqa: E501

        :return: The account_detail2 of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._account_detail2

    @account_detail2.setter
    def account_detail2(self, account_detail2):
        """Sets the account_detail2 of this EntryDetailItem.

        Account 2  # noqa: E501

        :param account_detail2: The account_detail2 of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._account_detail2 = account_detail2

    @property
    def account_detail3(self):
        """Gets the account_detail3 of this EntryDetailItem.  # noqa: E501

        Account 3  # noqa: E501

        :return: The account_detail3 of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._account_detail3

    @account_detail3.setter
    def account_detail3(self, account_detail3):
        """Sets the account_detail3 of this EntryDetailItem.

        Account 3  # noqa: E501

        :param account_detail3: The account_detail3 of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._account_detail3 = account_detail3

    @property
    def account_detail4(self):
        """Gets the account_detail4 of this EntryDetailItem.  # noqa: E501

        Account 4  # noqa: E501

        :return: The account_detail4 of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._account_detail4

    @account_detail4.setter
    def account_detail4(self, account_detail4):
        """Sets the account_detail4 of this EntryDetailItem.

        Account 4  # noqa: E501

        :param account_detail4: The account_detail4 of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._account_detail4 = account_detail4

    @property
    def financial_support_id(self):
        """Gets the financial_support_id of this EntryDetailItem.  # noqa: E501

        Financial Support  # noqa: E501

        :return: The financial_support_id of this EntryDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._financial_support_id

    @financial_support_id.setter
    def financial_support_id(self, financial_support_id):
        """Sets the financial_support_id of this EntryDetailItem.

        Financial Support  # noqa: E501

        :param financial_support_id: The financial_support_id of this EntryDetailItem.  # noqa: E501
        :type: int
        """

        self._financial_support_id = financial_support_id

    @property
    def financial_comments(self):
        """Gets the financial_comments of this EntryDetailItem.  # noqa: E501

        Financial Comments  # noqa: E501

        :return: The financial_comments of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._financial_comments

    @financial_comments.setter
    def financial_comments(self, financial_comments):
        """Sets the financial_comments of this EntryDetailItem.

        Financial Comments  # noqa: E501

        :param financial_comments: The financial_comments of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if financial_comments is not None and len(financial_comments) > 200:
            raise ValueError("Invalid value for `financial_comments`, length must be less than or equal to `200`")  # noqa: E501

        self._financial_comments = financial_comments

    @property
    def enrollment_class(self):
        """Gets the enrollment_class of this EntryDetailItem.  # noqa: E501

        Enrollment Class  # noqa: E501

        :return: The enrollment_class of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_class

    @enrollment_class.setter
    def enrollment_class(self, enrollment_class):
        """Sets the enrollment_class of this EntryDetailItem.

        Enrollment Class  # noqa: E501

        :param enrollment_class: The enrollment_class of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if enrollment_class is not None and len(enrollment_class) > 50:
            raise ValueError("Invalid value for `enrollment_class`, length must be less than or equal to `50`")  # noqa: E501

        self._enrollment_class = enrollment_class

    @property
    def enrollment_term(self):
        """Gets the enrollment_term of this EntryDetailItem.  # noqa: E501

        Enrollment Term  # noqa: E501

        :return: The enrollment_term of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_term

    @enrollment_term.setter
    def enrollment_term(self, enrollment_term):
        """Sets the enrollment_term of this EntryDetailItem.

        Enrollment Term  # noqa: E501

        :param enrollment_term: The enrollment_term of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if enrollment_term is not None and len(enrollment_term) > 50:
            raise ValueError("Invalid value for `enrollment_term`, length must be less than or equal to `50`")  # noqa: E501

        self._enrollment_term = enrollment_term

    @property
    def enrollment_level(self):
        """Gets the enrollment_level of this EntryDetailItem.  # noqa: E501

        Enrollment Level  # noqa: E501

        :return: The enrollment_level of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_level

    @enrollment_level.setter
    def enrollment_level(self, enrollment_level):
        """Sets the enrollment_level of this EntryDetailItem.

        Enrollment Level  # noqa: E501

        :param enrollment_level: The enrollment_level of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if enrollment_level is not None and len(enrollment_level) > 50:
            raise ValueError("Invalid value for `enrollment_level`, length must be less than or equal to `50`")  # noqa: E501

        self._enrollment_level = enrollment_level

    @property
    def enrollment_status(self):
        """Gets the enrollment_status of this EntryDetailItem.  # noqa: E501

        Enrollment Status  # noqa: E501

        :return: The enrollment_status of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_status

    @enrollment_status.setter
    def enrollment_status(self, enrollment_status):
        """Sets the enrollment_status of this EntryDetailItem.

        Enrollment Status  # noqa: E501

        :param enrollment_status: The enrollment_status of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if enrollment_status is not None and len(enrollment_status) > 50:
            raise ValueError("Invalid value for `enrollment_status`, length must be less than or equal to `50`")  # noqa: E501

        self._enrollment_status = enrollment_status

    @property
    def enrollment_year(self):
        """Gets the enrollment_year of this EntryDetailItem.  # noqa: E501

        Enrollment Year  # noqa: E501

        :return: The enrollment_year of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_year

    @enrollment_year.setter
    def enrollment_year(self, enrollment_year):
        """Sets the enrollment_year of this EntryDetailItem.

        Enrollment Year  # noqa: E501

        :param enrollment_year: The enrollment_year of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._enrollment_year = enrollment_year

    @property
    def profile_interests(self):
        """Gets the profile_interests of this EntryDetailItem.  # noqa: E501

        Profile Interests  # noqa: E501

        :return: The profile_interests of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._profile_interests

    @profile_interests.setter
    def profile_interests(self, profile_interests):
        """Sets the profile_interests of this EntryDetailItem.

        Profile Interests  # noqa: E501

        :param profile_interests: The profile_interests of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if profile_interests is not None and len(profile_interests) > 500:
            raise ValueError("Invalid value for `profile_interests`, length must be less than or equal to `500`")  # noqa: E501

        self._profile_interests = profile_interests

    @property
    def career(self):
        """Gets the career of this EntryDetailItem.  # noqa: E501

        Career  # noqa: E501

        :return: The career of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._career

    @career.setter
    def career(self, career):
        """Sets the career of this EntryDetailItem.

        Career  # noqa: E501

        :param career: The career of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if career is not None and len(career) > 50:
            raise ValueError("Invalid value for `career`, length must be less than or equal to `50`")  # noqa: E501

        self._career = career

    @property
    def career_comments(self):
        """Gets the career_comments of this EntryDetailItem.  # noqa: E501

        Career Comments  # noqa: E501

        :return: The career_comments of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._career_comments

    @career_comments.setter
    def career_comments(self, career_comments):
        """Sets the career_comments of this EntryDetailItem.

        Career Comments  # noqa: E501

        :param career_comments: The career_comments of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if career_comments is not None and len(career_comments) > 100:
            raise ValueError("Invalid value for `career_comments`, length must be less than or equal to `100`")  # noqa: E501

        self._career_comments = career_comments

    @property
    def employment_details(self):
        """Gets the employment_details of this EntryDetailItem.  # noqa: E501

        Employment Details  # noqa: E501

        :return: The employment_details of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._employment_details

    @employment_details.setter
    def employment_details(self, employment_details):
        """Sets the employment_details of this EntryDetailItem.

        Employment Details  # noqa: E501

        :param employment_details: The employment_details of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if employment_details is not None and len(employment_details) > 100:
            raise ValueError("Invalid value for `employment_details`, length must be less than or equal to `100`")  # noqa: E501

        self._employment_details = employment_details

    @property
    def incident_hold(self):
        """Gets the incident_hold of this EntryDetailItem.  # noqa: E501

        Incident Hold  # noqa: E501

        :return: The incident_hold of this EntryDetailItem.  # noqa: E501
        :rtype: bool
        """
        return self._incident_hold

    @incident_hold.setter
    def incident_hold(self, incident_hold):
        """Sets the incident_hold of this EntryDetailItem.

        Incident Hold  # noqa: E501

        :param incident_hold: The incident_hold of this EntryDetailItem.  # noqa: E501
        :type: bool
        """

        self._incident_hold = incident_hold

    @property
    def incident_hold_comments(self):
        """Gets the incident_hold_comments of this EntryDetailItem.  # noqa: E501

        Incident Hold Comments  # noqa: E501

        :return: The incident_hold_comments of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._incident_hold_comments

    @incident_hold_comments.setter
    def incident_hold_comments(self, incident_hold_comments):
        """Sets the incident_hold_comments of this EntryDetailItem.

        Incident Hold Comments  # noqa: E501

        :param incident_hold_comments: The incident_hold_comments of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if incident_hold_comments is not None and len(incident_hold_comments) > 100:
            raise ValueError("Invalid value for `incident_hold_comments`, length must be less than or equal to `100`")  # noqa: E501

        self._incident_hold_comments = incident_hold_comments

    @property
    def comments(self):
        """Gets the comments of this EntryDetailItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EntryDetailItem.

        Comments  # noqa: E501

        :param comments: The comments of this EntryDetailItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 1000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `1000`")  # noqa: E501

        self._comments = comments

    @property
    def deceased_date(self):
        """Gets the deceased_date of this EntryDetailItem.  # noqa: E501

        Deceased Date  # noqa: E501

        :return: The deceased_date of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._deceased_date

    @deceased_date.setter
    def deceased_date(self, deceased_date):
        """Sets the deceased_date of this EntryDetailItem.

        Deceased Date  # noqa: E501

        :param deceased_date: The deceased_date of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._deceased_date = deceased_date

    @property
    def visitor_hold(self):
        """Gets the visitor_hold of this EntryDetailItem.  # noqa: E501

        Visitor Hold  # noqa: E501

        :return: The visitor_hold of this EntryDetailItem.  # noqa: E501
        :rtype: bool
        """
        return self._visitor_hold

    @visitor_hold.setter
    def visitor_hold(self, visitor_hold):
        """Sets the visitor_hold of this EntryDetailItem.

        Visitor Hold  # noqa: E501

        :param visitor_hold: The visitor_hold of this EntryDetailItem.  # noqa: E501
        :type: bool
        """

        self._visitor_hold = visitor_hold

    @property
    def uses_screen_reader(self):
        """Gets the uses_screen_reader of this EntryDetailItem.  # noqa: E501

        Uses Screen Reader  # noqa: E501

        :return: The uses_screen_reader of this EntryDetailItem.  # noqa: E501
        :rtype: bool
        """
        return self._uses_screen_reader

    @uses_screen_reader.setter
    def uses_screen_reader(self, uses_screen_reader):
        """Sets the uses_screen_reader of this EntryDetailItem.

        Uses Screen Reader  # noqa: E501

        :param uses_screen_reader: The uses_screen_reader of this EntryDetailItem.  # noqa: E501
        :type: bool
        """

        self._uses_screen_reader = uses_screen_reader

    @property
    def date_modified(self):
        """Gets the date_modified of this EntryDetailItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EntryDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntryDetailItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EntryDetailItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryDetailItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
