# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RecordAttachmentItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'record_attachment_id': 'int',
        'attachment_object': 'str',
        'provider': 'str',
        'provider_key': 'str',
        'description': 'str',
        'table_id': 'int',
        'table_name': 'str',
        'created_by_security_user_id': 'int',
        'date_created': 'str',
        'date_expiry': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'record_attachment_id': 'RecordAttachmentID',
        'attachment_object': 'AttachmentObject',
        'provider': 'Provider',
        'provider_key': 'ProviderKey',
        'description': 'Description',
        'table_id': 'TableID',
        'table_name': 'TableName',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'date_created': 'DateCreated',
        'date_expiry': 'DateExpiry',
        'date_modified': 'DateModified'
    }

    def __init__(self, record_attachment_id=None, attachment_object=None, provider=None, provider_key=None, description=None, table_id=None, table_name=None, created_by_security_user_id=None, date_created=None, date_expiry=None, date_modified=None):  # noqa: E501
        """RecordAttachmentItem - a model defined in Swagger"""  # noqa: E501

        self._record_attachment_id = None
        self._attachment_object = None
        self._provider = None
        self._provider_key = None
        self._description = None
        self._table_id = None
        self._table_name = None
        self._created_by_security_user_id = None
        self._date_created = None
        self._date_expiry = None
        self._date_modified = None
        self.discriminator = None

        if record_attachment_id is not None:
            self.record_attachment_id = record_attachment_id
        if attachment_object is not None:
            self.attachment_object = attachment_object
        if provider is not None:
            self.provider = provider
        if provider_key is not None:
            self.provider_key = provider_key
        if description is not None:
            self.description = description
        if table_id is not None:
            self.table_id = table_id
        if table_name is not None:
            self.table_name = table_name
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_expiry is not None:
            self.date_expiry = date_expiry
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def record_attachment_id(self):
        """Gets the record_attachment_id of this RecordAttachmentItem.  # noqa: E501

        Record Attachment  # noqa: E501

        :return: The record_attachment_id of this RecordAttachmentItem.  # noqa: E501
        :rtype: int
        """
        return self._record_attachment_id

    @record_attachment_id.setter
    def record_attachment_id(self, record_attachment_id):
        """Sets the record_attachment_id of this RecordAttachmentItem.

        Record Attachment  # noqa: E501

        :param record_attachment_id: The record_attachment_id of this RecordAttachmentItem.  # noqa: E501
        :type: int
        """

        self._record_attachment_id = record_attachment_id

    @property
    def attachment_object(self):
        """Gets the attachment_object of this RecordAttachmentItem.  # noqa: E501

        Attachment Object  # noqa: E501

        :return: The attachment_object of this RecordAttachmentItem.  # noqa: E501
        :rtype: str
        """
        return self._attachment_object

    @attachment_object.setter
    def attachment_object(self, attachment_object):
        """Sets the attachment_object of this RecordAttachmentItem.

        Attachment Object  # noqa: E501

        :param attachment_object: The attachment_object of this RecordAttachmentItem.  # noqa: E501
        :type: str
        """

        self._attachment_object = attachment_object

    @property
    def provider(self):
        """Gets the provider of this RecordAttachmentItem.  # noqa: E501

        Provider  # noqa: E501

        :return: The provider of this RecordAttachmentItem.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this RecordAttachmentItem.

        Provider  # noqa: E501

        :param provider: The provider of this RecordAttachmentItem.  # noqa: E501
        :type: str
        """
        if provider is not None and len(provider) > 255:
            raise ValueError("Invalid value for `provider`, length must be less than or equal to `255`")  # noqa: E501

        self._provider = provider

    @property
    def provider_key(self):
        """Gets the provider_key of this RecordAttachmentItem.  # noqa: E501

        Provider Key  # noqa: E501

        :return: The provider_key of this RecordAttachmentItem.  # noqa: E501
        :rtype: str
        """
        return self._provider_key

    @provider_key.setter
    def provider_key(self, provider_key):
        """Sets the provider_key of this RecordAttachmentItem.

        Provider Key  # noqa: E501

        :param provider_key: The provider_key of this RecordAttachmentItem.  # noqa: E501
        :type: str
        """
        if provider_key is not None and len(provider_key) > 1000:
            raise ValueError("Invalid value for `provider_key`, length must be less than or equal to `1000`")  # noqa: E501

        self._provider_key = provider_key

    @property
    def description(self):
        """Gets the description of this RecordAttachmentItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this RecordAttachmentItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RecordAttachmentItem.

        Description  # noqa: E501

        :param description: The description of this RecordAttachmentItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501

        self._description = description

    @property
    def table_id(self):
        """Gets the table_id of this RecordAttachmentItem.  # noqa: E501

        Table  # noqa: E501

        :return: The table_id of this RecordAttachmentItem.  # noqa: E501
        :rtype: int
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this RecordAttachmentItem.

        Table  # noqa: E501

        :param table_id: The table_id of this RecordAttachmentItem.  # noqa: E501
        :type: int
        """

        self._table_id = table_id

    @property
    def table_name(self):
        """Gets the table_name of this RecordAttachmentItem.  # noqa: E501

        Table Name  # noqa: E501

        :return: The table_name of this RecordAttachmentItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this RecordAttachmentItem.

        Table Name  # noqa: E501

        :param table_name: The table_name of this RecordAttachmentItem.  # noqa: E501
        :type: str
        """
        if table_name is not None and len(table_name) > 50:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `50`")  # noqa: E501

        self._table_name = table_name

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this RecordAttachmentItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this RecordAttachmentItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this RecordAttachmentItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this RecordAttachmentItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this RecordAttachmentItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this RecordAttachmentItem.  # noqa: E501
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this RecordAttachmentItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this RecordAttachmentItem.  # noqa: E501
        :type: str
        """

        self._date_created = date_created

    @property
    def date_expiry(self):
        """Gets the date_expiry of this RecordAttachmentItem.  # noqa: E501

        Date Expiry  # noqa: E501

        :return: The date_expiry of this RecordAttachmentItem.  # noqa: E501
        :rtype: str
        """
        return self._date_expiry

    @date_expiry.setter
    def date_expiry(self, date_expiry):
        """Sets the date_expiry of this RecordAttachmentItem.

        Date Expiry  # noqa: E501

        :param date_expiry: The date_expiry of this RecordAttachmentItem.  # noqa: E501
        :type: str
        """
        if date_expiry is not None and len(date_expiry) > 50:
            raise ValueError("Invalid value for `date_expiry`, length must be less than or equal to `50`")  # noqa: E501

        self._date_expiry = date_expiry

    @property
    def date_modified(self):
        """Gets the date_modified of this RecordAttachmentItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this RecordAttachmentItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this RecordAttachmentItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this RecordAttachmentItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecordAttachmentItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
