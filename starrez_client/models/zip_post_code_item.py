# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ZipPostCodeItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'zip_post_code_id': 'int',
        'zip_post_code': 'str',
        'post_code_sort': 'int',
        'locality': 'str',
        'state_province': 'str',
        'country_id': 'int',
        'date_modified': 'str'
    }

    attribute_map = {
        'zip_post_code_id': 'ZipPostCodeID',
        'zip_post_code': 'ZipPostCode',
        'post_code_sort': 'PostCodeSort',
        'locality': 'Locality',
        'state_province': 'StateProvince',
        'country_id': 'CountryID',
        'date_modified': 'DateModified'
    }

    def __init__(self, zip_post_code_id=None, zip_post_code=None, post_code_sort=None, locality=None, state_province=None, country_id=None, date_modified=None):  # noqa: E501
        """ZipPostCodeItem - a model defined in Swagger"""  # noqa: E501

        self._zip_post_code_id = None
        self._zip_post_code = None
        self._post_code_sort = None
        self._locality = None
        self._state_province = None
        self._country_id = None
        self._date_modified = None
        self.discriminator = None

        if zip_post_code_id is not None:
            self.zip_post_code_id = zip_post_code_id
        if zip_post_code is not None:
            self.zip_post_code = zip_post_code
        if post_code_sort is not None:
            self.post_code_sort = post_code_sort
        if locality is not None:
            self.locality = locality
        if state_province is not None:
            self.state_province = state_province
        if country_id is not None:
            self.country_id = country_id
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def zip_post_code_id(self):
        """Gets the zip_post_code_id of this ZipPostCodeItem.  # noqa: E501

        Zip Post Code  # noqa: E501

        :return: The zip_post_code_id of this ZipPostCodeItem.  # noqa: E501
        :rtype: int
        """
        return self._zip_post_code_id

    @zip_post_code_id.setter
    def zip_post_code_id(self, zip_post_code_id):
        """Sets the zip_post_code_id of this ZipPostCodeItem.

        Zip Post Code  # noqa: E501

        :param zip_post_code_id: The zip_post_code_id of this ZipPostCodeItem.  # noqa: E501
        :type: int
        """

        self._zip_post_code_id = zip_post_code_id

    @property
    def zip_post_code(self):
        """Gets the zip_post_code of this ZipPostCodeItem.  # noqa: E501

        Zip Post Code  # noqa: E501

        :return: The zip_post_code of this ZipPostCodeItem.  # noqa: E501
        :rtype: str
        """
        return self._zip_post_code

    @zip_post_code.setter
    def zip_post_code(self, zip_post_code):
        """Sets the zip_post_code of this ZipPostCodeItem.

        Zip Post Code  # noqa: E501

        :param zip_post_code: The zip_post_code of this ZipPostCodeItem.  # noqa: E501
        :type: str
        """
        if zip_post_code is not None and len(zip_post_code) > 15:
            raise ValueError("Invalid value for `zip_post_code`, length must be less than or equal to `15`")  # noqa: E501

        self._zip_post_code = zip_post_code

    @property
    def post_code_sort(self):
        """Gets the post_code_sort of this ZipPostCodeItem.  # noqa: E501

        Post Code Sort  # noqa: E501

        :return: The post_code_sort of this ZipPostCodeItem.  # noqa: E501
        :rtype: int
        """
        return self._post_code_sort

    @post_code_sort.setter
    def post_code_sort(self, post_code_sort):
        """Sets the post_code_sort of this ZipPostCodeItem.

        Post Code Sort  # noqa: E501

        :param post_code_sort: The post_code_sort of this ZipPostCodeItem.  # noqa: E501
        :type: int
        """

        self._post_code_sort = post_code_sort

    @property
    def locality(self):
        """Gets the locality of this ZipPostCodeItem.  # noqa: E501

        Locality  # noqa: E501

        :return: The locality of this ZipPostCodeItem.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this ZipPostCodeItem.

        Locality  # noqa: E501

        :param locality: The locality of this ZipPostCodeItem.  # noqa: E501
        :type: str
        """
        if locality is not None and len(locality) > 50:
            raise ValueError("Invalid value for `locality`, length must be less than or equal to `50`")  # noqa: E501

        self._locality = locality

    @property
    def state_province(self):
        """Gets the state_province of this ZipPostCodeItem.  # noqa: E501

        State Province  # noqa: E501

        :return: The state_province of this ZipPostCodeItem.  # noqa: E501
        :rtype: str
        """
        return self._state_province

    @state_province.setter
    def state_province(self, state_province):
        """Sets the state_province of this ZipPostCodeItem.

        State Province  # noqa: E501

        :param state_province: The state_province of this ZipPostCodeItem.  # noqa: E501
        :type: str
        """
        if state_province is not None and len(state_province) > 10:
            raise ValueError("Invalid value for `state_province`, length must be less than or equal to `10`")  # noqa: E501

        self._state_province = state_province

    @property
    def country_id(self):
        """Gets the country_id of this ZipPostCodeItem.  # noqa: E501

        Country  # noqa: E501

        :return: The country_id of this ZipPostCodeItem.  # noqa: E501
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this ZipPostCodeItem.

        Country  # noqa: E501

        :param country_id: The country_id of this ZipPostCodeItem.  # noqa: E501
        :type: int
        """

        self._country_id = country_id

    @property
    def date_modified(self):
        """Gets the date_modified of this ZipPostCodeItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this ZipPostCodeItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ZipPostCodeItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this ZipPostCodeItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZipPostCodeItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
