# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IncidentEntryViolationItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'incident_entry_violation_id': 'int',
        'incident_entry_id': 'int',
        'incident_violation_id': 'int',
        'incident_entry_appeal_id': 'int',
        'incident_type_id': 'int',
        'incident_sub_type_id': 'int',
        'incident_severity_id': 'int',
        'incident_plea_id': 'int',
        'incident_finding_id': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'incident_entry_violation_id': 'IncidentEntryViolationID',
        'incident_entry_id': 'IncidentEntryID',
        'incident_violation_id': 'IncidentViolationID',
        'incident_entry_appeal_id': 'IncidentEntryAppealID',
        'incident_type_id': 'IncidentTypeID',
        'incident_sub_type_id': 'IncidentSubTypeID',
        'incident_severity_id': 'IncidentSeverityID',
        'incident_plea_id': 'IncidentPleaID',
        'incident_finding_id': 'IncidentFindingID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, incident_entry_violation_id=None, incident_entry_id=None, incident_violation_id=None, incident_entry_appeal_id=None, incident_type_id=None, incident_sub_type_id=None, incident_severity_id=None, incident_plea_id=None, incident_finding_id=None, date_created=None, date_modified=None):  # noqa: E501
        """IncidentEntryViolationItem - a model defined in Swagger"""  # noqa: E501

        self._incident_entry_violation_id = None
        self._incident_entry_id = None
        self._incident_violation_id = None
        self._incident_entry_appeal_id = None
        self._incident_type_id = None
        self._incident_sub_type_id = None
        self._incident_severity_id = None
        self._incident_plea_id = None
        self._incident_finding_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if incident_entry_violation_id is not None:
            self.incident_entry_violation_id = incident_entry_violation_id
        if incident_entry_id is not None:
            self.incident_entry_id = incident_entry_id
        if incident_violation_id is not None:
            self.incident_violation_id = incident_violation_id
        if incident_entry_appeal_id is not None:
            self.incident_entry_appeal_id = incident_entry_appeal_id
        if incident_type_id is not None:
            self.incident_type_id = incident_type_id
        if incident_sub_type_id is not None:
            self.incident_sub_type_id = incident_sub_type_id
        if incident_severity_id is not None:
            self.incident_severity_id = incident_severity_id
        if incident_plea_id is not None:
            self.incident_plea_id = incident_plea_id
        if incident_finding_id is not None:
            self.incident_finding_id = incident_finding_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def incident_entry_violation_id(self):
        """Gets the incident_entry_violation_id of this IncidentEntryViolationItem.  # noqa: E501

        Incident Entry Violation  # noqa: E501

        :return: The incident_entry_violation_id of this IncidentEntryViolationItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_entry_violation_id

    @incident_entry_violation_id.setter
    def incident_entry_violation_id(self, incident_entry_violation_id):
        """Sets the incident_entry_violation_id of this IncidentEntryViolationItem.

        Incident Entry Violation  # noqa: E501

        :param incident_entry_violation_id: The incident_entry_violation_id of this IncidentEntryViolationItem.  # noqa: E501
        :type: int
        """

        self._incident_entry_violation_id = incident_entry_violation_id

    @property
    def incident_entry_id(self):
        """Gets the incident_entry_id of this IncidentEntryViolationItem.  # noqa: E501

        Incident Entry  # noqa: E501

        :return: The incident_entry_id of this IncidentEntryViolationItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_entry_id

    @incident_entry_id.setter
    def incident_entry_id(self, incident_entry_id):
        """Sets the incident_entry_id of this IncidentEntryViolationItem.

        Incident Entry  # noqa: E501

        :param incident_entry_id: The incident_entry_id of this IncidentEntryViolationItem.  # noqa: E501
        :type: int
        """

        self._incident_entry_id = incident_entry_id

    @property
    def incident_violation_id(self):
        """Gets the incident_violation_id of this IncidentEntryViolationItem.  # noqa: E501

        Incident Violation  # noqa: E501

        :return: The incident_violation_id of this IncidentEntryViolationItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_violation_id

    @incident_violation_id.setter
    def incident_violation_id(self, incident_violation_id):
        """Sets the incident_violation_id of this IncidentEntryViolationItem.

        Incident Violation  # noqa: E501

        :param incident_violation_id: The incident_violation_id of this IncidentEntryViolationItem.  # noqa: E501
        :type: int
        """

        self._incident_violation_id = incident_violation_id

    @property
    def incident_entry_appeal_id(self):
        """Gets the incident_entry_appeal_id of this IncidentEntryViolationItem.  # noqa: E501

        Incident Entry Appeal  # noqa: E501

        :return: The incident_entry_appeal_id of this IncidentEntryViolationItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_entry_appeal_id

    @incident_entry_appeal_id.setter
    def incident_entry_appeal_id(self, incident_entry_appeal_id):
        """Sets the incident_entry_appeal_id of this IncidentEntryViolationItem.

        Incident Entry Appeal  # noqa: E501

        :param incident_entry_appeal_id: The incident_entry_appeal_id of this IncidentEntryViolationItem.  # noqa: E501
        :type: int
        """

        self._incident_entry_appeal_id = incident_entry_appeal_id

    @property
    def incident_type_id(self):
        """Gets the incident_type_id of this IncidentEntryViolationItem.  # noqa: E501

        Incident Type  # noqa: E501

        :return: The incident_type_id of this IncidentEntryViolationItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_type_id

    @incident_type_id.setter
    def incident_type_id(self, incident_type_id):
        """Sets the incident_type_id of this IncidentEntryViolationItem.

        Incident Type  # noqa: E501

        :param incident_type_id: The incident_type_id of this IncidentEntryViolationItem.  # noqa: E501
        :type: int
        """

        self._incident_type_id = incident_type_id

    @property
    def incident_sub_type_id(self):
        """Gets the incident_sub_type_id of this IncidentEntryViolationItem.  # noqa: E501

        Incident Sub Type  # noqa: E501

        :return: The incident_sub_type_id of this IncidentEntryViolationItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_sub_type_id

    @incident_sub_type_id.setter
    def incident_sub_type_id(self, incident_sub_type_id):
        """Sets the incident_sub_type_id of this IncidentEntryViolationItem.

        Incident Sub Type  # noqa: E501

        :param incident_sub_type_id: The incident_sub_type_id of this IncidentEntryViolationItem.  # noqa: E501
        :type: int
        """

        self._incident_sub_type_id = incident_sub_type_id

    @property
    def incident_severity_id(self):
        """Gets the incident_severity_id of this IncidentEntryViolationItem.  # noqa: E501

        Incident Severity  # noqa: E501

        :return: The incident_severity_id of this IncidentEntryViolationItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_severity_id

    @incident_severity_id.setter
    def incident_severity_id(self, incident_severity_id):
        """Sets the incident_severity_id of this IncidentEntryViolationItem.

        Incident Severity  # noqa: E501

        :param incident_severity_id: The incident_severity_id of this IncidentEntryViolationItem.  # noqa: E501
        :type: int
        """

        self._incident_severity_id = incident_severity_id

    @property
    def incident_plea_id(self):
        """Gets the incident_plea_id of this IncidentEntryViolationItem.  # noqa: E501

        Plea  # noqa: E501

        :return: The incident_plea_id of this IncidentEntryViolationItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_plea_id

    @incident_plea_id.setter
    def incident_plea_id(self, incident_plea_id):
        """Sets the incident_plea_id of this IncidentEntryViolationItem.

        Plea  # noqa: E501

        :param incident_plea_id: The incident_plea_id of this IncidentEntryViolationItem.  # noqa: E501
        :type: int
        """

        self._incident_plea_id = incident_plea_id

    @property
    def incident_finding_id(self):
        """Gets the incident_finding_id of this IncidentEntryViolationItem.  # noqa: E501

        Finding  # noqa: E501

        :return: The incident_finding_id of this IncidentEntryViolationItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_finding_id

    @incident_finding_id.setter
    def incident_finding_id(self, incident_finding_id):
        """Sets the incident_finding_id of this IncidentEntryViolationItem.

        Finding  # noqa: E501

        :param incident_finding_id: The incident_finding_id of this IncidentEntryViolationItem.  # noqa: E501
        :type: int
        """

        self._incident_finding_id = incident_finding_id

    @property
    def date_created(self):
        """Gets the date_created of this IncidentEntryViolationItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this IncidentEntryViolationItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this IncidentEntryViolationItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this IncidentEntryViolationItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this IncidentEntryViolationItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this IncidentEntryViolationItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this IncidentEntryViolationItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this IncidentEntryViolationItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncidentEntryViolationItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
