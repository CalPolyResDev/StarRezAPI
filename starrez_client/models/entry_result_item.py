# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntryResultItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_result_id': 'int',
        'entry_id': 'int',
        'result_type': 'str',
        'year': 'str',
        'term_id': 'int',
        'term_number': 'str',
        'subject_level': 'str',
        'subject': 'str',
        'result': 'str',
        'rating': 'str',
        'hours_enrolled': 'str',
        'hours_completed': 'str',
        'hours_graded': 'str',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'entry_result_id': 'EntryResultID',
        'entry_id': 'EntryID',
        'result_type': 'ResultType',
        'year': 'Year',
        'term_id': 'TermID',
        'term_number': 'TermNumber',
        'subject_level': 'SubjectLevel',
        'subject': 'Subject',
        'result': 'Result',
        'rating': 'Rating',
        'hours_enrolled': 'HoursEnrolled',
        'hours_completed': 'HoursCompleted',
        'hours_graded': 'HoursGraded',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, entry_result_id=None, entry_id=None, result_type=None, year=None, term_id=None, term_number=None, subject_level=None, subject=None, result=None, rating=None, hours_enrolled=None, hours_completed=None, hours_graded=None, comments=None, date_modified=None):  # noqa: E501
        """EntryResultItem - a model defined in Swagger"""  # noqa: E501

        self._entry_result_id = None
        self._entry_id = None
        self._result_type = None
        self._year = None
        self._term_id = None
        self._term_number = None
        self._subject_level = None
        self._subject = None
        self._result = None
        self._rating = None
        self._hours_enrolled = None
        self._hours_completed = None
        self._hours_graded = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if entry_result_id is not None:
            self.entry_result_id = entry_result_id
        if entry_id is not None:
            self.entry_id = entry_id
        if result_type is not None:
            self.result_type = result_type
        if year is not None:
            self.year = year
        if term_id is not None:
            self.term_id = term_id
        if term_number is not None:
            self.term_number = term_number
        if subject_level is not None:
            self.subject_level = subject_level
        if subject is not None:
            self.subject = subject
        if result is not None:
            self.result = result
        if rating is not None:
            self.rating = rating
        if hours_enrolled is not None:
            self.hours_enrolled = hours_enrolled
        if hours_completed is not None:
            self.hours_completed = hours_completed
        if hours_graded is not None:
            self.hours_graded = hours_graded
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def entry_result_id(self):
        """Gets the entry_result_id of this EntryResultItem.  # noqa: E501

        Entry Result  # noqa: E501

        :return: The entry_result_id of this EntryResultItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_result_id

    @entry_result_id.setter
    def entry_result_id(self, entry_result_id):
        """Sets the entry_result_id of this EntryResultItem.

        Entry Result  # noqa: E501

        :param entry_result_id: The entry_result_id of this EntryResultItem.  # noqa: E501
        :type: int
        """

        self._entry_result_id = entry_result_id

    @property
    def entry_id(self):
        """Gets the entry_id of this EntryResultItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this EntryResultItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this EntryResultItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this EntryResultItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def result_type(self):
        """Gets the result_type of this EntryResultItem.  # noqa: E501

        Result Type  # noqa: E501

        :return: The result_type of this EntryResultItem.  # noqa: E501
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this EntryResultItem.

        Result Type  # noqa: E501

        :param result_type: The result_type of this EntryResultItem.  # noqa: E501
        :type: str
        """
        if result_type is not None and len(result_type) > 50:
            raise ValueError("Invalid value for `result_type`, length must be less than or equal to `50`")  # noqa: E501

        self._result_type = result_type

    @property
    def year(self):
        """Gets the year of this EntryResultItem.  # noqa: E501

        Year  # noqa: E501

        :return: The year of this EntryResultItem.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this EntryResultItem.

        Year  # noqa: E501

        :param year: The year of this EntryResultItem.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def term_id(self):
        """Gets the term_id of this EntryResultItem.  # noqa: E501

        Term  # noqa: E501

        :return: The term_id of this EntryResultItem.  # noqa: E501
        :rtype: int
        """
        return self._term_id

    @term_id.setter
    def term_id(self, term_id):
        """Sets the term_id of this EntryResultItem.

        Term  # noqa: E501

        :param term_id: The term_id of this EntryResultItem.  # noqa: E501
        :type: int
        """

        self._term_id = term_id

    @property
    def term_number(self):
        """Gets the term_number of this EntryResultItem.  # noqa: E501

        Term Number  # noqa: E501

        :return: The term_number of this EntryResultItem.  # noqa: E501
        :rtype: str
        """
        return self._term_number

    @term_number.setter
    def term_number(self, term_number):
        """Sets the term_number of this EntryResultItem.

        Term Number  # noqa: E501

        :param term_number: The term_number of this EntryResultItem.  # noqa: E501
        :type: str
        """
        if term_number is not None and not re.search('^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', term_number):  # noqa: E501
            raise ValueError("Invalid value for `term_number`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._term_number = term_number

    @property
    def subject_level(self):
        """Gets the subject_level of this EntryResultItem.  # noqa: E501

        Subject Level  # noqa: E501

        :return: The subject_level of this EntryResultItem.  # noqa: E501
        :rtype: str
        """
        return self._subject_level

    @subject_level.setter
    def subject_level(self, subject_level):
        """Sets the subject_level of this EntryResultItem.

        Subject Level  # noqa: E501

        :param subject_level: The subject_level of this EntryResultItem.  # noqa: E501
        :type: str
        """
        if subject_level is not None and len(subject_level) > 10:
            raise ValueError("Invalid value for `subject_level`, length must be less than or equal to `10`")  # noqa: E501

        self._subject_level = subject_level

    @property
    def subject(self):
        """Gets the subject of this EntryResultItem.  # noqa: E501

        Subject  # noqa: E501

        :return: The subject of this EntryResultItem.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EntryResultItem.

        Subject  # noqa: E501

        :param subject: The subject of this EntryResultItem.  # noqa: E501
        :type: str
        """
        if subject is not None and len(subject) > 30:
            raise ValueError("Invalid value for `subject`, length must be less than or equal to `30`")  # noqa: E501

        self._subject = subject

    @property
    def result(self):
        """Gets the result of this EntryResultItem.  # noqa: E501

        Result  # noqa: E501

        :return: The result of this EntryResultItem.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this EntryResultItem.

        Result  # noqa: E501

        :param result: The result of this EntryResultItem.  # noqa: E501
        :type: str
        """
        if result is not None and len(result) > 20:
            raise ValueError("Invalid value for `result`, length must be less than or equal to `20`")  # noqa: E501

        self._result = result

    @property
    def rating(self):
        """Gets the rating of this EntryResultItem.  # noqa: E501

        Rating  # noqa: E501

        :return: The rating of this EntryResultItem.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this EntryResultItem.

        Rating  # noqa: E501

        :param rating: The rating of this EntryResultItem.  # noqa: E501
        :type: str
        """

        self._rating = rating

    @property
    def hours_enrolled(self):
        """Gets the hours_enrolled of this EntryResultItem.  # noqa: E501

        Hours Enrolled  # noqa: E501

        :return: The hours_enrolled of this EntryResultItem.  # noqa: E501
        :rtype: str
        """
        return self._hours_enrolled

    @hours_enrolled.setter
    def hours_enrolled(self, hours_enrolled):
        """Sets the hours_enrolled of this EntryResultItem.

        Hours Enrolled  # noqa: E501

        :param hours_enrolled: The hours_enrolled of this EntryResultItem.  # noqa: E501
        :type: str
        """

        self._hours_enrolled = hours_enrolled

    @property
    def hours_completed(self):
        """Gets the hours_completed of this EntryResultItem.  # noqa: E501

        Hours Completed  # noqa: E501

        :return: The hours_completed of this EntryResultItem.  # noqa: E501
        :rtype: str
        """
        return self._hours_completed

    @hours_completed.setter
    def hours_completed(self, hours_completed):
        """Sets the hours_completed of this EntryResultItem.

        Hours Completed  # noqa: E501

        :param hours_completed: The hours_completed of this EntryResultItem.  # noqa: E501
        :type: str
        """

        self._hours_completed = hours_completed

    @property
    def hours_graded(self):
        """Gets the hours_graded of this EntryResultItem.  # noqa: E501

        Hours Graded  # noqa: E501

        :return: The hours_graded of this EntryResultItem.  # noqa: E501
        :rtype: str
        """
        return self._hours_graded

    @hours_graded.setter
    def hours_graded(self, hours_graded):
        """Sets the hours_graded of this EntryResultItem.

        Hours Graded  # noqa: E501

        :param hours_graded: The hours_graded of this EntryResultItem.  # noqa: E501
        :type: str
        """

        self._hours_graded = hours_graded

    @property
    def comments(self):
        """Gets the comments of this EntryResultItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this EntryResultItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EntryResultItem.

        Comments  # noqa: E501

        :param comments: The comments of this EntryResultItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 100:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `100`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this EntryResultItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EntryResultItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntryResultItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EntryResultItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryResultItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
