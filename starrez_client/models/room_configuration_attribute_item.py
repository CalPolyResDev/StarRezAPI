# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RoomConfigurationAttributeItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'room_configuration_attribute_id': 'int',
        'room_configuration_id': 'int',
        'record_type_enum': 'str',
        'field_name': 'str',
        'field_value': 'str',
        'weighting': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'room_configuration_attribute_id': 'RoomConfigurationAttributeID',
        'room_configuration_id': 'RoomConfigurationID',
        'record_type_enum': 'RecordTypeEnum',
        'field_name': 'FieldName',
        'field_value': 'FieldValue',
        'weighting': 'Weighting',
        'date_modified': 'DateModified'
    }

    def __init__(self, room_configuration_attribute_id=None, room_configuration_id=None, record_type_enum=None, field_name=None, field_value=None, weighting=None, date_modified=None):  # noqa: E501
        """RoomConfigurationAttributeItem - a model defined in Swagger"""  # noqa: E501

        self._room_configuration_attribute_id = None
        self._room_configuration_id = None
        self._record_type_enum = None
        self._field_name = None
        self._field_value = None
        self._weighting = None
        self._date_modified = None
        self.discriminator = None

        if room_configuration_attribute_id is not None:
            self.room_configuration_attribute_id = room_configuration_attribute_id
        if room_configuration_id is not None:
            self.room_configuration_id = room_configuration_id
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if field_name is not None:
            self.field_name = field_name
        if field_value is not None:
            self.field_value = field_value
        if weighting is not None:
            self.weighting = weighting
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def room_configuration_attribute_id(self):
        """Gets the room_configuration_attribute_id of this RoomConfigurationAttributeItem.  # noqa: E501

        Room Configuration Attribute  # noqa: E501

        :return: The room_configuration_attribute_id of this RoomConfigurationAttributeItem.  # noqa: E501
        :rtype: int
        """
        return self._room_configuration_attribute_id

    @room_configuration_attribute_id.setter
    def room_configuration_attribute_id(self, room_configuration_attribute_id):
        """Sets the room_configuration_attribute_id of this RoomConfigurationAttributeItem.

        Room Configuration Attribute  # noqa: E501

        :param room_configuration_attribute_id: The room_configuration_attribute_id of this RoomConfigurationAttributeItem.  # noqa: E501
        :type: int
        """

        self._room_configuration_attribute_id = room_configuration_attribute_id

    @property
    def room_configuration_id(self):
        """Gets the room_configuration_id of this RoomConfigurationAttributeItem.  # noqa: E501

        Room Configuration  # noqa: E501

        :return: The room_configuration_id of this RoomConfigurationAttributeItem.  # noqa: E501
        :rtype: int
        """
        return self._room_configuration_id

    @room_configuration_id.setter
    def room_configuration_id(self, room_configuration_id):
        """Sets the room_configuration_id of this RoomConfigurationAttributeItem.

        Room Configuration  # noqa: E501

        :param room_configuration_id: The room_configuration_id of this RoomConfigurationAttributeItem.  # noqa: E501
        :type: int
        """

        self._room_configuration_id = room_configuration_id

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this RoomConfigurationAttributeItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this RoomConfigurationAttributeItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this RoomConfigurationAttributeItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this RoomConfigurationAttributeItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def field_name(self):
        """Gets the field_name of this RoomConfigurationAttributeItem.  # noqa: E501

        Field Name  # noqa: E501

        :return: The field_name of this RoomConfigurationAttributeItem.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this RoomConfigurationAttributeItem.

        Field Name  # noqa: E501

        :param field_name: The field_name of this RoomConfigurationAttributeItem.  # noqa: E501
        :type: str
        """
        if field_name is not None and len(field_name) > 50:
            raise ValueError("Invalid value for `field_name`, length must be less than or equal to `50`")  # noqa: E501

        self._field_name = field_name

    @property
    def field_value(self):
        """Gets the field_value of this RoomConfigurationAttributeItem.  # noqa: E501

        Field Value  # noqa: E501

        :return: The field_value of this RoomConfigurationAttributeItem.  # noqa: E501
        :rtype: str
        """
        return self._field_value

    @field_value.setter
    def field_value(self, field_value):
        """Sets the field_value of this RoomConfigurationAttributeItem.

        Field Value  # noqa: E501

        :param field_value: The field_value of this RoomConfigurationAttributeItem.  # noqa: E501
        :type: str
        """
        if field_value is not None and len(field_value) > 50:
            raise ValueError("Invalid value for `field_value`, length must be less than or equal to `50`")  # noqa: E501

        self._field_value = field_value

    @property
    def weighting(self):
        """Gets the weighting of this RoomConfigurationAttributeItem.  # noqa: E501

        Weighting  # noqa: E501

        :return: The weighting of this RoomConfigurationAttributeItem.  # noqa: E501
        :rtype: str
        """
        return self._weighting

    @weighting.setter
    def weighting(self, weighting):
        """Sets the weighting of this RoomConfigurationAttributeItem.

        Weighting  # noqa: E501

        :param weighting: The weighting of this RoomConfigurationAttributeItem.  # noqa: E501
        :type: str
        """

        self._weighting = weighting

    @property
    def date_modified(self):
        """Gets the date_modified of this RoomConfigurationAttributeItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this RoomConfigurationAttributeItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this RoomConfigurationAttributeItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this RoomConfigurationAttributeItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomConfigurationAttributeItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
