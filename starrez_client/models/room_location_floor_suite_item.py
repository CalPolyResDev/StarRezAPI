# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RoomLocationFloorSuiteItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'room_location_floor_suite_id': 'int',
        'room_location_section_id': 'int',
        'record_type_enum': 'str',
        'description': 'str',
        'is_suite': 'bool',
        'override_gender': 'bool',
        'gender_type_enum': 'str',
        'comments': 'str',
        'view_on_web': 'bool',
        'web_image_location': 'str',
        'web_description': 'str',
        'web_comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'room_location_floor_suite_id': 'RoomLocationFloorSuiteID',
        'room_location_section_id': 'RoomLocationSectionID',
        'record_type_enum': 'RecordTypeEnum',
        'description': 'Description',
        'is_suite': 'IsSuite',
        'override_gender': 'OverrideGender',
        'gender_type_enum': 'GenderTypeEnum',
        'comments': 'Comments',
        'view_on_web': 'ViewOnWeb',
        'web_image_location': 'WebImageLocation',
        'web_description': 'WebDescription',
        'web_comments': 'WebComments',
        'date_modified': 'DateModified'
    }

    def __init__(self, room_location_floor_suite_id=None, room_location_section_id=None, record_type_enum=None, description=None, is_suite=None, override_gender=None, gender_type_enum=None, comments=None, view_on_web=None, web_image_location=None, web_description=None, web_comments=None, date_modified=None):  # noqa: E501
        """RoomLocationFloorSuiteItem - a model defined in Swagger"""  # noqa: E501

        self._room_location_floor_suite_id = None
        self._room_location_section_id = None
        self._record_type_enum = None
        self._description = None
        self._is_suite = None
        self._override_gender = None
        self._gender_type_enum = None
        self._comments = None
        self._view_on_web = None
        self._web_image_location = None
        self._web_description = None
        self._web_comments = None
        self._date_modified = None
        self.discriminator = None

        if room_location_floor_suite_id is not None:
            self.room_location_floor_suite_id = room_location_floor_suite_id
        if room_location_section_id is not None:
            self.room_location_section_id = room_location_section_id
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if description is not None:
            self.description = description
        if is_suite is not None:
            self.is_suite = is_suite
        if override_gender is not None:
            self.override_gender = override_gender
        if gender_type_enum is not None:
            self.gender_type_enum = gender_type_enum
        if comments is not None:
            self.comments = comments
        if view_on_web is not None:
            self.view_on_web = view_on_web
        if web_image_location is not None:
            self.web_image_location = web_image_location
        if web_description is not None:
            self.web_description = web_description
        if web_comments is not None:
            self.web_comments = web_comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def room_location_floor_suite_id(self):
        """Gets the room_location_floor_suite_id of this RoomLocationFloorSuiteItem.  # noqa: E501

        Room Location Floor Suite  # noqa: E501

        :return: The room_location_floor_suite_id of this RoomLocationFloorSuiteItem.  # noqa: E501
        :rtype: int
        """
        return self._room_location_floor_suite_id

    @room_location_floor_suite_id.setter
    def room_location_floor_suite_id(self, room_location_floor_suite_id):
        """Sets the room_location_floor_suite_id of this RoomLocationFloorSuiteItem.

        Room Location Floor Suite  # noqa: E501

        :param room_location_floor_suite_id: The room_location_floor_suite_id of this RoomLocationFloorSuiteItem.  # noqa: E501
        :type: int
        """

        self._room_location_floor_suite_id = room_location_floor_suite_id

    @property
    def room_location_section_id(self):
        """Gets the room_location_section_id of this RoomLocationFloorSuiteItem.  # noqa: E501

        Room Location Section  # noqa: E501

        :return: The room_location_section_id of this RoomLocationFloorSuiteItem.  # noqa: E501
        :rtype: int
        """
        return self._room_location_section_id

    @room_location_section_id.setter
    def room_location_section_id(self, room_location_section_id):
        """Sets the room_location_section_id of this RoomLocationFloorSuiteItem.

        Room Location Section  # noqa: E501

        :param room_location_section_id: The room_location_section_id of this RoomLocationFloorSuiteItem.  # noqa: E501
        :type: int
        """

        self._room_location_section_id = room_location_section_id

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this RoomLocationFloorSuiteItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this RoomLocationFloorSuiteItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this RoomLocationFloorSuiteItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this RoomLocationFloorSuiteItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def description(self):
        """Gets the description of this RoomLocationFloorSuiteItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this RoomLocationFloorSuiteItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoomLocationFloorSuiteItem.

        Description  # noqa: E501

        :param description: The description of this RoomLocationFloorSuiteItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 25:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `25`")  # noqa: E501

        self._description = description

    @property
    def is_suite(self):
        """Gets the is_suite of this RoomLocationFloorSuiteItem.  # noqa: E501

        Is Suite  # noqa: E501

        :return: The is_suite of this RoomLocationFloorSuiteItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_suite

    @is_suite.setter
    def is_suite(self, is_suite):
        """Sets the is_suite of this RoomLocationFloorSuiteItem.

        Is Suite  # noqa: E501

        :param is_suite: The is_suite of this RoomLocationFloorSuiteItem.  # noqa: E501
        :type: bool
        """

        self._is_suite = is_suite

    @property
    def override_gender(self):
        """Gets the override_gender of this RoomLocationFloorSuiteItem.  # noqa: E501

        Override Gender  # noqa: E501

        :return: The override_gender of this RoomLocationFloorSuiteItem.  # noqa: E501
        :rtype: bool
        """
        return self._override_gender

    @override_gender.setter
    def override_gender(self, override_gender):
        """Sets the override_gender of this RoomLocationFloorSuiteItem.

        Override Gender  # noqa: E501

        :param override_gender: The override_gender of this RoomLocationFloorSuiteItem.  # noqa: E501
        :type: bool
        """

        self._override_gender = override_gender

    @property
    def gender_type_enum(self):
        """Gets the gender_type_enum of this RoomLocationFloorSuiteItem.  # noqa: E501

        Gender Type  # noqa: E501

        :return: The gender_type_enum of this RoomLocationFloorSuiteItem.  # noqa: E501
        :rtype: str
        """
        return self._gender_type_enum

    @gender_type_enum.setter
    def gender_type_enum(self, gender_type_enum):
        """Sets the gender_type_enum of this RoomLocationFloorSuiteItem.

        Gender Type  # noqa: E501

        :param gender_type_enum: The gender_type_enum of this RoomLocationFloorSuiteItem.  # noqa: E501
        :type: str
        """

        self._gender_type_enum = gender_type_enum

    @property
    def comments(self):
        """Gets the comments of this RoomLocationFloorSuiteItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this RoomLocationFloorSuiteItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this RoomLocationFloorSuiteItem.

        Comments  # noqa: E501

        :param comments: The comments of this RoomLocationFloorSuiteItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 200:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `200`")  # noqa: E501

        self._comments = comments

    @property
    def view_on_web(self):
        """Gets the view_on_web of this RoomLocationFloorSuiteItem.  # noqa: E501

        View On Web  # noqa: E501

        :return: The view_on_web of this RoomLocationFloorSuiteItem.  # noqa: E501
        :rtype: bool
        """
        return self._view_on_web

    @view_on_web.setter
    def view_on_web(self, view_on_web):
        """Sets the view_on_web of this RoomLocationFloorSuiteItem.

        View On Web  # noqa: E501

        :param view_on_web: The view_on_web of this RoomLocationFloorSuiteItem.  # noqa: E501
        :type: bool
        """

        self._view_on_web = view_on_web

    @property
    def web_image_location(self):
        """Gets the web_image_location of this RoomLocationFloorSuiteItem.  # noqa: E501

        Web Image Location  # noqa: E501

        :return: The web_image_location of this RoomLocationFloorSuiteItem.  # noqa: E501
        :rtype: str
        """
        return self._web_image_location

    @web_image_location.setter
    def web_image_location(self, web_image_location):
        """Sets the web_image_location of this RoomLocationFloorSuiteItem.

        Web Image Location  # noqa: E501

        :param web_image_location: The web_image_location of this RoomLocationFloorSuiteItem.  # noqa: E501
        :type: str
        """
        if web_image_location is not None and len(web_image_location) > 200:
            raise ValueError("Invalid value for `web_image_location`, length must be less than or equal to `200`")  # noqa: E501

        self._web_image_location = web_image_location

    @property
    def web_description(self):
        """Gets the web_description of this RoomLocationFloorSuiteItem.  # noqa: E501

        Web Description  # noqa: E501

        :return: The web_description of this RoomLocationFloorSuiteItem.  # noqa: E501
        :rtype: str
        """
        return self._web_description

    @web_description.setter
    def web_description(self, web_description):
        """Sets the web_description of this RoomLocationFloorSuiteItem.

        Web Description  # noqa: E501

        :param web_description: The web_description of this RoomLocationFloorSuiteItem.  # noqa: E501
        :type: str
        """
        if web_description is not None and len(web_description) > 1000:
            raise ValueError("Invalid value for `web_description`, length must be less than or equal to `1000`")  # noqa: E501

        self._web_description = web_description

    @property
    def web_comments(self):
        """Gets the web_comments of this RoomLocationFloorSuiteItem.  # noqa: E501

        Web Comments  # noqa: E501

        :return: The web_comments of this RoomLocationFloorSuiteItem.  # noqa: E501
        :rtype: str
        """
        return self._web_comments

    @web_comments.setter
    def web_comments(self, web_comments):
        """Sets the web_comments of this RoomLocationFloorSuiteItem.

        Web Comments  # noqa: E501

        :param web_comments: The web_comments of this RoomLocationFloorSuiteItem.  # noqa: E501
        :type: str
        """

        self._web_comments = web_comments

    @property
    def date_modified(self):
        """Gets the date_modified of this RoomLocationFloorSuiteItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this RoomLocationFloorSuiteItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this RoomLocationFloorSuiteItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this RoomLocationFloorSuiteItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomLocationFloorSuiteItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
