# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProgramItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'program_id': 'int',
        'title': 'str',
        'description': 'str',
        'goal': 'str',
        'purpose': 'str',
        'benefit': 'str',
        'community': 'str',
        'program_cost': 'str',
        'amount_charge_to_entry': 'str',
        'charge_item_id': 'int',
        'term_session_id': 'int',
        'category_id': 'int',
        'program_type_id': 'int',
        'program_sub_type_id': 'int',
        'date_start': 'datetime',
        'date_end': 'datetime',
        'date_approved': 'str',
        'attendee_estimate': 'int',
        'attendee_maximum': 'int',
        'max_items_per_entry': 'int',
        'program_evaluation_type_id': 'int',
        'attendee_actual': 'int',
        'evaluation_highlight': 'str',
        'evaluation_improvements': 'str',
        'view_on_web': 'bool',
        'web_image_location': 'str',
        'web_description': 'str',
        'web_comments': 'str',
        'active_date_start': 'str',
        'active_date_end': 'str',
        'room_location_id': 'int',
        'room_location_floor_suite_id': 'int',
        'room_base_id': 'int',
        'location_comments': 'str',
        'print_report_on_check_in': 'bool',
        'check_in_report_id': 'int',
        'comments': 'str',
        'security_user_id': 'int',
        'created_by_security_user_id': 'int',
        'date_created': 'datetime',
        'timestamp': 'str',
        'workflow_step_id': 'int',
        'assigned_to_security_user_id': 'int',
        'current_workflow_history_id': 'int',
        'previous_workflow_history_id': 'int',
        'only_attendees_can_check_in': 'bool',
        'date_modified': 'str'
    }

    attribute_map = {
        'program_id': 'ProgramID',
        'title': 'Title',
        'description': 'Description',
        'goal': 'Goal',
        'purpose': 'Purpose',
        'benefit': 'Benefit',
        'community': 'Community',
        'program_cost': 'ProgramCost',
        'amount_charge_to_entry': 'AmountChargeToEntry',
        'charge_item_id': 'ChargeItemID',
        'term_session_id': 'TermSessionID',
        'category_id': 'CategoryID',
        'program_type_id': 'ProgramTypeID',
        'program_sub_type_id': 'ProgramSubTypeID',
        'date_start': 'DateStart',
        'date_end': 'DateEnd',
        'date_approved': 'DateApproved',
        'attendee_estimate': 'AttendeeEstimate',
        'attendee_maximum': 'AttendeeMaximum',
        'max_items_per_entry': 'MaxItemsPerEntry',
        'program_evaluation_type_id': 'ProgramEvaluationTypeID',
        'attendee_actual': 'AttendeeActual',
        'evaluation_highlight': 'EvaluationHighlight',
        'evaluation_improvements': 'EvaluationImprovements',
        'view_on_web': 'ViewOnWeb',
        'web_image_location': 'WebImageLocation',
        'web_description': 'WebDescription',
        'web_comments': 'WebComments',
        'active_date_start': 'ActiveDateStart',
        'active_date_end': 'ActiveDateEnd',
        'room_location_id': 'RoomLocationID',
        'room_location_floor_suite_id': 'RoomLocationFloorSuiteID',
        'room_base_id': 'RoomBaseID',
        'location_comments': 'LocationComments',
        'print_report_on_check_in': 'PrintReportOnCheckIn',
        'check_in_report_id': 'CheckIn_ReportID',
        'comments': 'Comments',
        'security_user_id': 'SecurityUserID',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'date_created': 'DateCreated',
        'timestamp': 'timestamp',
        'workflow_step_id': 'WorkflowStepID',
        'assigned_to_security_user_id': 'AssignedTo_SecurityUserID',
        'current_workflow_history_id': 'Current_WorkflowHistoryID',
        'previous_workflow_history_id': 'Previous_WorkflowHistoryID',
        'only_attendees_can_check_in': 'OnlyAttendeesCanCheckIn',
        'date_modified': 'DateModified'
    }

    def __init__(self, program_id=None, title=None, description=None, goal=None, purpose=None, benefit=None, community=None, program_cost=None, amount_charge_to_entry=None, charge_item_id=None, term_session_id=None, category_id=None, program_type_id=None, program_sub_type_id=None, date_start=None, date_end=None, date_approved=None, attendee_estimate=None, attendee_maximum=None, max_items_per_entry=None, program_evaluation_type_id=None, attendee_actual=None, evaluation_highlight=None, evaluation_improvements=None, view_on_web=None, web_image_location=None, web_description=None, web_comments=None, active_date_start=None, active_date_end=None, room_location_id=None, room_location_floor_suite_id=None, room_base_id=None, location_comments=None, print_report_on_check_in=None, check_in_report_id=None, comments=None, security_user_id=None, created_by_security_user_id=None, date_created=None, timestamp=None, workflow_step_id=None, assigned_to_security_user_id=None, current_workflow_history_id=None, previous_workflow_history_id=None, only_attendees_can_check_in=None, date_modified=None):  # noqa: E501
        """ProgramItem - a model defined in Swagger"""  # noqa: E501

        self._program_id = None
        self._title = None
        self._description = None
        self._goal = None
        self._purpose = None
        self._benefit = None
        self._community = None
        self._program_cost = None
        self._amount_charge_to_entry = None
        self._charge_item_id = None
        self._term_session_id = None
        self._category_id = None
        self._program_type_id = None
        self._program_sub_type_id = None
        self._date_start = None
        self._date_end = None
        self._date_approved = None
        self._attendee_estimate = None
        self._attendee_maximum = None
        self._max_items_per_entry = None
        self._program_evaluation_type_id = None
        self._attendee_actual = None
        self._evaluation_highlight = None
        self._evaluation_improvements = None
        self._view_on_web = None
        self._web_image_location = None
        self._web_description = None
        self._web_comments = None
        self._active_date_start = None
        self._active_date_end = None
        self._room_location_id = None
        self._room_location_floor_suite_id = None
        self._room_base_id = None
        self._location_comments = None
        self._print_report_on_check_in = None
        self._check_in_report_id = None
        self._comments = None
        self._security_user_id = None
        self._created_by_security_user_id = None
        self._date_created = None
        self._timestamp = None
        self._workflow_step_id = None
        self._assigned_to_security_user_id = None
        self._current_workflow_history_id = None
        self._previous_workflow_history_id = None
        self._only_attendees_can_check_in = None
        self._date_modified = None
        self.discriminator = None

        if program_id is not None:
            self.program_id = program_id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if goal is not None:
            self.goal = goal
        if purpose is not None:
            self.purpose = purpose
        if benefit is not None:
            self.benefit = benefit
        if community is not None:
            self.community = community
        if program_cost is not None:
            self.program_cost = program_cost
        if amount_charge_to_entry is not None:
            self.amount_charge_to_entry = amount_charge_to_entry
        if charge_item_id is not None:
            self.charge_item_id = charge_item_id
        if term_session_id is not None:
            self.term_session_id = term_session_id
        if category_id is not None:
            self.category_id = category_id
        if program_type_id is not None:
            self.program_type_id = program_type_id
        if program_sub_type_id is not None:
            self.program_sub_type_id = program_sub_type_id
        if date_start is not None:
            self.date_start = date_start
        if date_end is not None:
            self.date_end = date_end
        if date_approved is not None:
            self.date_approved = date_approved
        if attendee_estimate is not None:
            self.attendee_estimate = attendee_estimate
        if attendee_maximum is not None:
            self.attendee_maximum = attendee_maximum
        if max_items_per_entry is not None:
            self.max_items_per_entry = max_items_per_entry
        if program_evaluation_type_id is not None:
            self.program_evaluation_type_id = program_evaluation_type_id
        if attendee_actual is not None:
            self.attendee_actual = attendee_actual
        if evaluation_highlight is not None:
            self.evaluation_highlight = evaluation_highlight
        if evaluation_improvements is not None:
            self.evaluation_improvements = evaluation_improvements
        if view_on_web is not None:
            self.view_on_web = view_on_web
        if web_image_location is not None:
            self.web_image_location = web_image_location
        if web_description is not None:
            self.web_description = web_description
        if web_comments is not None:
            self.web_comments = web_comments
        if active_date_start is not None:
            self.active_date_start = active_date_start
        if active_date_end is not None:
            self.active_date_end = active_date_end
        if room_location_id is not None:
            self.room_location_id = room_location_id
        if room_location_floor_suite_id is not None:
            self.room_location_floor_suite_id = room_location_floor_suite_id
        if room_base_id is not None:
            self.room_base_id = room_base_id
        if location_comments is not None:
            self.location_comments = location_comments
        if print_report_on_check_in is not None:
            self.print_report_on_check_in = print_report_on_check_in
        if check_in_report_id is not None:
            self.check_in_report_id = check_in_report_id
        if comments is not None:
            self.comments = comments
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if date_created is not None:
            self.date_created = date_created
        if timestamp is not None:
            self.timestamp = timestamp
        if workflow_step_id is not None:
            self.workflow_step_id = workflow_step_id
        if assigned_to_security_user_id is not None:
            self.assigned_to_security_user_id = assigned_to_security_user_id
        if current_workflow_history_id is not None:
            self.current_workflow_history_id = current_workflow_history_id
        if previous_workflow_history_id is not None:
            self.previous_workflow_history_id = previous_workflow_history_id
        if only_attendees_can_check_in is not None:
            self.only_attendees_can_check_in = only_attendees_can_check_in
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def program_id(self):
        """Gets the program_id of this ProgramItem.  # noqa: E501

        Program  # noqa: E501

        :return: The program_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this ProgramItem.

        Program  # noqa: E501

        :param program_id: The program_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._program_id = program_id

    @property
    def title(self):
        """Gets the title of this ProgramItem.  # noqa: E501

        Title  # noqa: E501

        :return: The title of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProgramItem.

        Title  # noqa: E501

        :param title: The title of this ProgramItem.  # noqa: E501
        :type: str
        """
        if title is not None and len(title) > 100:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `100`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this ProgramItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProgramItem.

        Description  # noqa: E501

        :param description: The description of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def goal(self):
        """Gets the goal of this ProgramItem.  # noqa: E501

        Goal  # noqa: E501

        :return: The goal of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this ProgramItem.

        Goal  # noqa: E501

        :param goal: The goal of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._goal = goal

    @property
    def purpose(self):
        """Gets the purpose of this ProgramItem.  # noqa: E501

        Purpose  # noqa: E501

        :return: The purpose of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this ProgramItem.

        Purpose  # noqa: E501

        :param purpose: The purpose of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def benefit(self):
        """Gets the benefit of this ProgramItem.  # noqa: E501

        Benefit  # noqa: E501

        :return: The benefit of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._benefit

    @benefit.setter
    def benefit(self, benefit):
        """Sets the benefit of this ProgramItem.

        Benefit  # noqa: E501

        :param benefit: The benefit of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._benefit = benefit

    @property
    def community(self):
        """Gets the community of this ProgramItem.  # noqa: E501

        Community  # noqa: E501

        :return: The community of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._community

    @community.setter
    def community(self, community):
        """Sets the community of this ProgramItem.

        Community  # noqa: E501

        :param community: The community of this ProgramItem.  # noqa: E501
        :type: str
        """
        if community is not None and len(community) > 100:
            raise ValueError("Invalid value for `community`, length must be less than or equal to `100`")  # noqa: E501

        self._community = community

    @property
    def program_cost(self):
        """Gets the program_cost of this ProgramItem.  # noqa: E501

        Program Cost  # noqa: E501

        :return: The program_cost of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._program_cost

    @program_cost.setter
    def program_cost(self, program_cost):
        """Sets the program_cost of this ProgramItem.

        Program Cost  # noqa: E501

        :param program_cost: The program_cost of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._program_cost = program_cost

    @property
    def amount_charge_to_entry(self):
        """Gets the amount_charge_to_entry of this ProgramItem.  # noqa: E501

        Amount Charge To Entry  # noqa: E501

        :return: The amount_charge_to_entry of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._amount_charge_to_entry

    @amount_charge_to_entry.setter
    def amount_charge_to_entry(self, amount_charge_to_entry):
        """Sets the amount_charge_to_entry of this ProgramItem.

        Amount Charge To Entry  # noqa: E501

        :param amount_charge_to_entry: The amount_charge_to_entry of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._amount_charge_to_entry = amount_charge_to_entry

    @property
    def charge_item_id(self):
        """Gets the charge_item_id of this ProgramItem.  # noqa: E501

        Charge Item  # noqa: E501

        :return: The charge_item_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._charge_item_id

    @charge_item_id.setter
    def charge_item_id(self, charge_item_id):
        """Sets the charge_item_id of this ProgramItem.

        Charge Item  # noqa: E501

        :param charge_item_id: The charge_item_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._charge_item_id = charge_item_id

    @property
    def term_session_id(self):
        """Gets the term_session_id of this ProgramItem.  # noqa: E501

        Term Session  # noqa: E501

        :return: The term_session_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._term_session_id

    @term_session_id.setter
    def term_session_id(self, term_session_id):
        """Sets the term_session_id of this ProgramItem.

        Term Session  # noqa: E501

        :param term_session_id: The term_session_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._term_session_id = term_session_id

    @property
    def category_id(self):
        """Gets the category_id of this ProgramItem.  # noqa: E501

        Category  # noqa: E501

        :return: The category_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ProgramItem.

        Category  # noqa: E501

        :param category_id: The category_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def program_type_id(self):
        """Gets the program_type_id of this ProgramItem.  # noqa: E501

        Program Type  # noqa: E501

        :return: The program_type_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._program_type_id

    @program_type_id.setter
    def program_type_id(self, program_type_id):
        """Sets the program_type_id of this ProgramItem.

        Program Type  # noqa: E501

        :param program_type_id: The program_type_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._program_type_id = program_type_id

    @property
    def program_sub_type_id(self):
        """Gets the program_sub_type_id of this ProgramItem.  # noqa: E501

        Program Sub Type  # noqa: E501

        :return: The program_sub_type_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._program_sub_type_id

    @program_sub_type_id.setter
    def program_sub_type_id(self, program_sub_type_id):
        """Sets the program_sub_type_id of this ProgramItem.

        Program Sub Type  # noqa: E501

        :param program_sub_type_id: The program_sub_type_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._program_sub_type_id = program_sub_type_id

    @property
    def date_start(self):
        """Gets the date_start of this ProgramItem.  # noqa: E501

        Date Start  # noqa: E501

        :return: The date_start of this ProgramItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this ProgramItem.

        Date Start  # noqa: E501

        :param date_start: The date_start of this ProgramItem.  # noqa: E501
        :type: datetime
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this ProgramItem.  # noqa: E501

        Date End  # noqa: E501

        :return: The date_end of this ProgramItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this ProgramItem.

        Date End  # noqa: E501

        :param date_end: The date_end of this ProgramItem.  # noqa: E501
        :type: datetime
        """

        self._date_end = date_end

    @property
    def date_approved(self):
        """Gets the date_approved of this ProgramItem.  # noqa: E501

        Date Approved  # noqa: E501

        :return: The date_approved of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._date_approved

    @date_approved.setter
    def date_approved(self, date_approved):
        """Sets the date_approved of this ProgramItem.

        Date Approved  # noqa: E501

        :param date_approved: The date_approved of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._date_approved = date_approved

    @property
    def attendee_estimate(self):
        """Gets the attendee_estimate of this ProgramItem.  # noqa: E501

        Attendee Estimate  # noqa: E501

        :return: The attendee_estimate of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._attendee_estimate

    @attendee_estimate.setter
    def attendee_estimate(self, attendee_estimate):
        """Sets the attendee_estimate of this ProgramItem.

        Attendee Estimate  # noqa: E501

        :param attendee_estimate: The attendee_estimate of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._attendee_estimate = attendee_estimate

    @property
    def attendee_maximum(self):
        """Gets the attendee_maximum of this ProgramItem.  # noqa: E501

        Attendee Maximum  # noqa: E501

        :return: The attendee_maximum of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._attendee_maximum

    @attendee_maximum.setter
    def attendee_maximum(self, attendee_maximum):
        """Sets the attendee_maximum of this ProgramItem.

        Attendee Maximum  # noqa: E501

        :param attendee_maximum: The attendee_maximum of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._attendee_maximum = attendee_maximum

    @property
    def max_items_per_entry(self):
        """Gets the max_items_per_entry of this ProgramItem.  # noqa: E501

        Max Items Per Entry  # noqa: E501

        :return: The max_items_per_entry of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._max_items_per_entry

    @max_items_per_entry.setter
    def max_items_per_entry(self, max_items_per_entry):
        """Sets the max_items_per_entry of this ProgramItem.

        Max Items Per Entry  # noqa: E501

        :param max_items_per_entry: The max_items_per_entry of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._max_items_per_entry = max_items_per_entry

    @property
    def program_evaluation_type_id(self):
        """Gets the program_evaluation_type_id of this ProgramItem.  # noqa: E501

        Program Evaluation Type  # noqa: E501

        :return: The program_evaluation_type_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._program_evaluation_type_id

    @program_evaluation_type_id.setter
    def program_evaluation_type_id(self, program_evaluation_type_id):
        """Sets the program_evaluation_type_id of this ProgramItem.

        Program Evaluation Type  # noqa: E501

        :param program_evaluation_type_id: The program_evaluation_type_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._program_evaluation_type_id = program_evaluation_type_id

    @property
    def attendee_actual(self):
        """Gets the attendee_actual of this ProgramItem.  # noqa: E501

        Attendee Actual  # noqa: E501

        :return: The attendee_actual of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._attendee_actual

    @attendee_actual.setter
    def attendee_actual(self, attendee_actual):
        """Sets the attendee_actual of this ProgramItem.

        Attendee Actual  # noqa: E501

        :param attendee_actual: The attendee_actual of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._attendee_actual = attendee_actual

    @property
    def evaluation_highlight(self):
        """Gets the evaluation_highlight of this ProgramItem.  # noqa: E501

        Evaluation Highlight  # noqa: E501

        :return: The evaluation_highlight of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_highlight

    @evaluation_highlight.setter
    def evaluation_highlight(self, evaluation_highlight):
        """Sets the evaluation_highlight of this ProgramItem.

        Evaluation Highlight  # noqa: E501

        :param evaluation_highlight: The evaluation_highlight of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._evaluation_highlight = evaluation_highlight

    @property
    def evaluation_improvements(self):
        """Gets the evaluation_improvements of this ProgramItem.  # noqa: E501

        Evaluation Improvements  # noqa: E501

        :return: The evaluation_improvements of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_improvements

    @evaluation_improvements.setter
    def evaluation_improvements(self, evaluation_improvements):
        """Sets the evaluation_improvements of this ProgramItem.

        Evaluation Improvements  # noqa: E501

        :param evaluation_improvements: The evaluation_improvements of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._evaluation_improvements = evaluation_improvements

    @property
    def view_on_web(self):
        """Gets the view_on_web of this ProgramItem.  # noqa: E501

        View On Web  # noqa: E501

        :return: The view_on_web of this ProgramItem.  # noqa: E501
        :rtype: bool
        """
        return self._view_on_web

    @view_on_web.setter
    def view_on_web(self, view_on_web):
        """Sets the view_on_web of this ProgramItem.

        View On Web  # noqa: E501

        :param view_on_web: The view_on_web of this ProgramItem.  # noqa: E501
        :type: bool
        """

        self._view_on_web = view_on_web

    @property
    def web_image_location(self):
        """Gets the web_image_location of this ProgramItem.  # noqa: E501

        Web Image Location  # noqa: E501

        :return: The web_image_location of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._web_image_location

    @web_image_location.setter
    def web_image_location(self, web_image_location):
        """Sets the web_image_location of this ProgramItem.

        Web Image Location  # noqa: E501

        :param web_image_location: The web_image_location of this ProgramItem.  # noqa: E501
        :type: str
        """
        if web_image_location is not None and len(web_image_location) > 200:
            raise ValueError("Invalid value for `web_image_location`, length must be less than or equal to `200`")  # noqa: E501

        self._web_image_location = web_image_location

    @property
    def web_description(self):
        """Gets the web_description of this ProgramItem.  # noqa: E501

        Web Description  # noqa: E501

        :return: The web_description of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._web_description

    @web_description.setter
    def web_description(self, web_description):
        """Sets the web_description of this ProgramItem.

        Web Description  # noqa: E501

        :param web_description: The web_description of this ProgramItem.  # noqa: E501
        :type: str
        """
        if web_description is not None and len(web_description) > 1000:
            raise ValueError("Invalid value for `web_description`, length must be less than or equal to `1000`")  # noqa: E501

        self._web_description = web_description

    @property
    def web_comments(self):
        """Gets the web_comments of this ProgramItem.  # noqa: E501

        Web Comments  # noqa: E501

        :return: The web_comments of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._web_comments

    @web_comments.setter
    def web_comments(self, web_comments):
        """Sets the web_comments of this ProgramItem.

        Web Comments  # noqa: E501

        :param web_comments: The web_comments of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._web_comments = web_comments

    @property
    def active_date_start(self):
        """Gets the active_date_start of this ProgramItem.  # noqa: E501

        Active Date Start  # noqa: E501

        :return: The active_date_start of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._active_date_start

    @active_date_start.setter
    def active_date_start(self, active_date_start):
        """Sets the active_date_start of this ProgramItem.

        Active Date Start  # noqa: E501

        :param active_date_start: The active_date_start of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._active_date_start = active_date_start

    @property
    def active_date_end(self):
        """Gets the active_date_end of this ProgramItem.  # noqa: E501

        Active Date End  # noqa: E501

        :return: The active_date_end of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._active_date_end

    @active_date_end.setter
    def active_date_end(self, active_date_end):
        """Sets the active_date_end of this ProgramItem.

        Active Date End  # noqa: E501

        :param active_date_end: The active_date_end of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._active_date_end = active_date_end

    @property
    def room_location_id(self):
        """Gets the room_location_id of this ProgramItem.  # noqa: E501

        Room Location  # noqa: E501

        :return: The room_location_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._room_location_id

    @room_location_id.setter
    def room_location_id(self, room_location_id):
        """Sets the room_location_id of this ProgramItem.

        Room Location  # noqa: E501

        :param room_location_id: The room_location_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._room_location_id = room_location_id

    @property
    def room_location_floor_suite_id(self):
        """Gets the room_location_floor_suite_id of this ProgramItem.  # noqa: E501

        Room Location Floor Suite  # noqa: E501

        :return: The room_location_floor_suite_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._room_location_floor_suite_id

    @room_location_floor_suite_id.setter
    def room_location_floor_suite_id(self, room_location_floor_suite_id):
        """Sets the room_location_floor_suite_id of this ProgramItem.

        Room Location Floor Suite  # noqa: E501

        :param room_location_floor_suite_id: The room_location_floor_suite_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._room_location_floor_suite_id = room_location_floor_suite_id

    @property
    def room_base_id(self):
        """Gets the room_base_id of this ProgramItem.  # noqa: E501

        Room Base  # noqa: E501

        :return: The room_base_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._room_base_id

    @room_base_id.setter
    def room_base_id(self, room_base_id):
        """Sets the room_base_id of this ProgramItem.

        Room Base  # noqa: E501

        :param room_base_id: The room_base_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._room_base_id = room_base_id

    @property
    def location_comments(self):
        """Gets the location_comments of this ProgramItem.  # noqa: E501

        Location Comments  # noqa: E501

        :return: The location_comments of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._location_comments

    @location_comments.setter
    def location_comments(self, location_comments):
        """Sets the location_comments of this ProgramItem.

        Location Comments  # noqa: E501

        :param location_comments: The location_comments of this ProgramItem.  # noqa: E501
        :type: str
        """
        if location_comments is not None and len(location_comments) > 100:
            raise ValueError("Invalid value for `location_comments`, length must be less than or equal to `100`")  # noqa: E501

        self._location_comments = location_comments

    @property
    def print_report_on_check_in(self):
        """Gets the print_report_on_check_in of this ProgramItem.  # noqa: E501

        Print Report On Check In  # noqa: E501

        :return: The print_report_on_check_in of this ProgramItem.  # noqa: E501
        :rtype: bool
        """
        return self._print_report_on_check_in

    @print_report_on_check_in.setter
    def print_report_on_check_in(self, print_report_on_check_in):
        """Sets the print_report_on_check_in of this ProgramItem.

        Print Report On Check In  # noqa: E501

        :param print_report_on_check_in: The print_report_on_check_in of this ProgramItem.  # noqa: E501
        :type: bool
        """

        self._print_report_on_check_in = print_report_on_check_in

    @property
    def check_in_report_id(self):
        """Gets the check_in_report_id of this ProgramItem.  # noqa: E501

        Check In Report  # noqa: E501

        :return: The check_in_report_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._check_in_report_id

    @check_in_report_id.setter
    def check_in_report_id(self, check_in_report_id):
        """Sets the check_in_report_id of this ProgramItem.

        Check In Report  # noqa: E501

        :param check_in_report_id: The check_in_report_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._check_in_report_id = check_in_report_id

    @property
    def comments(self):
        """Gets the comments of this ProgramItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ProgramItem.

        Comments  # noqa: E501

        :param comments: The comments of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def security_user_id(self):
        """Gets the security_user_id of this ProgramItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this ProgramItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this ProgramItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this ProgramItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this ProgramItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this ProgramItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ProgramItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this ProgramItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def timestamp(self):
        """Gets the timestamp of this ProgramItem.  # noqa: E501

        Timestamp  # noqa: E501

        :return: The timestamp of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ProgramItem.

        Timestamp  # noqa: E501

        :param timestamp: The timestamp of this ProgramItem.  # noqa: E501
        :type: str
        """
        if timestamp is not None and len(timestamp) > 8:
            raise ValueError("Invalid value for `timestamp`, length must be less than or equal to `8`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def workflow_step_id(self):
        """Gets the workflow_step_id of this ProgramItem.  # noqa: E501

        Workflow Step  # noqa: E501

        :return: The workflow_step_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._workflow_step_id

    @workflow_step_id.setter
    def workflow_step_id(self, workflow_step_id):
        """Sets the workflow_step_id of this ProgramItem.

        Workflow Step  # noqa: E501

        :param workflow_step_id: The workflow_step_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._workflow_step_id = workflow_step_id

    @property
    def assigned_to_security_user_id(self):
        """Gets the assigned_to_security_user_id of this ProgramItem.  # noqa: E501

        Assigned To Security User  # noqa: E501

        :return: The assigned_to_security_user_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._assigned_to_security_user_id

    @assigned_to_security_user_id.setter
    def assigned_to_security_user_id(self, assigned_to_security_user_id):
        """Sets the assigned_to_security_user_id of this ProgramItem.

        Assigned To Security User  # noqa: E501

        :param assigned_to_security_user_id: The assigned_to_security_user_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._assigned_to_security_user_id = assigned_to_security_user_id

    @property
    def current_workflow_history_id(self):
        """Gets the current_workflow_history_id of this ProgramItem.  # noqa: E501

        Current Workflow History  # noqa: E501

        :return: The current_workflow_history_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._current_workflow_history_id

    @current_workflow_history_id.setter
    def current_workflow_history_id(self, current_workflow_history_id):
        """Sets the current_workflow_history_id of this ProgramItem.

        Current Workflow History  # noqa: E501

        :param current_workflow_history_id: The current_workflow_history_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._current_workflow_history_id = current_workflow_history_id

    @property
    def previous_workflow_history_id(self):
        """Gets the previous_workflow_history_id of this ProgramItem.  # noqa: E501

        Previous Workflow History  # noqa: E501

        :return: The previous_workflow_history_id of this ProgramItem.  # noqa: E501
        :rtype: int
        """
        return self._previous_workflow_history_id

    @previous_workflow_history_id.setter
    def previous_workflow_history_id(self, previous_workflow_history_id):
        """Sets the previous_workflow_history_id of this ProgramItem.

        Previous Workflow History  # noqa: E501

        :param previous_workflow_history_id: The previous_workflow_history_id of this ProgramItem.  # noqa: E501
        :type: int
        """

        self._previous_workflow_history_id = previous_workflow_history_id

    @property
    def only_attendees_can_check_in(self):
        """Gets the only_attendees_can_check_in of this ProgramItem.  # noqa: E501

        Only Attendees Can Check In  # noqa: E501

        :return: The only_attendees_can_check_in of this ProgramItem.  # noqa: E501
        :rtype: bool
        """
        return self._only_attendees_can_check_in

    @only_attendees_can_check_in.setter
    def only_attendees_can_check_in(self, only_attendees_can_check_in):
        """Sets the only_attendees_can_check_in of this ProgramItem.

        Only Attendees Can Check In  # noqa: E501

        :param only_attendees_can_check_in: The only_attendees_can_check_in of this ProgramItem.  # noqa: E501
        :type: bool
        """

        self._only_attendees_can_check_in = only_attendees_can_check_in

    @property
    def date_modified(self):
        """Gets the date_modified of this ProgramItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this ProgramItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ProgramItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this ProgramItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProgramItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
