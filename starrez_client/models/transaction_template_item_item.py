# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TransactionTemplateItemItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_template_item_id': 'int',
        'transaction_template_id': 'int',
        'charge_group_id': 'int',
        'charge_item_id': 'int',
        'transaction_type_enum': 'str',
        'description': 'str',
        'auto_pay_override': 'bool',
        'amount': 'str',
        'due_date': 'str',
        'tag': 'str',
        'tag_finance': 'str',
        'term_session_id': 'int',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'transaction_template_item_id': 'TransactionTemplateItemID',
        'transaction_template_id': 'TransactionTemplateID',
        'charge_group_id': 'ChargeGroupID',
        'charge_item_id': 'ChargeItemID',
        'transaction_type_enum': 'TransactionTypeEnum',
        'description': 'Description',
        'auto_pay_override': 'AutoPayOverride',
        'amount': 'Amount',
        'due_date': 'DueDate',
        'tag': 'Tag',
        'tag_finance': 'TagFinance',
        'term_session_id': 'TermSessionID',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, transaction_template_item_id=None, transaction_template_id=None, charge_group_id=None, charge_item_id=None, transaction_type_enum=None, description=None, auto_pay_override=None, amount=None, due_date=None, tag=None, tag_finance=None, term_session_id=None, comments=None, date_modified=None):  # noqa: E501
        """TransactionTemplateItemItem - a model defined in Swagger"""  # noqa: E501

        self._transaction_template_item_id = None
        self._transaction_template_id = None
        self._charge_group_id = None
        self._charge_item_id = None
        self._transaction_type_enum = None
        self._description = None
        self._auto_pay_override = None
        self._amount = None
        self._due_date = None
        self._tag = None
        self._tag_finance = None
        self._term_session_id = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if transaction_template_item_id is not None:
            self.transaction_template_item_id = transaction_template_item_id
        if transaction_template_id is not None:
            self.transaction_template_id = transaction_template_id
        if charge_group_id is not None:
            self.charge_group_id = charge_group_id
        if charge_item_id is not None:
            self.charge_item_id = charge_item_id
        if transaction_type_enum is not None:
            self.transaction_type_enum = transaction_type_enum
        if description is not None:
            self.description = description
        if auto_pay_override is not None:
            self.auto_pay_override = auto_pay_override
        if amount is not None:
            self.amount = amount
        if due_date is not None:
            self.due_date = due_date
        if tag is not None:
            self.tag = tag
        if tag_finance is not None:
            self.tag_finance = tag_finance
        if term_session_id is not None:
            self.term_session_id = term_session_id
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def transaction_template_item_id(self):
        """Gets the transaction_template_item_id of this TransactionTemplateItemItem.  # noqa: E501

        Transaction Template Item  # noqa: E501

        :return: The transaction_template_item_id of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: int
        """
        return self._transaction_template_item_id

    @transaction_template_item_id.setter
    def transaction_template_item_id(self, transaction_template_item_id):
        """Sets the transaction_template_item_id of this TransactionTemplateItemItem.

        Transaction Template Item  # noqa: E501

        :param transaction_template_item_id: The transaction_template_item_id of this TransactionTemplateItemItem.  # noqa: E501
        :type: int
        """

        self._transaction_template_item_id = transaction_template_item_id

    @property
    def transaction_template_id(self):
        """Gets the transaction_template_id of this TransactionTemplateItemItem.  # noqa: E501

        Transaction Template  # noqa: E501

        :return: The transaction_template_id of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: int
        """
        return self._transaction_template_id

    @transaction_template_id.setter
    def transaction_template_id(self, transaction_template_id):
        """Sets the transaction_template_id of this TransactionTemplateItemItem.

        Transaction Template  # noqa: E501

        :param transaction_template_id: The transaction_template_id of this TransactionTemplateItemItem.  # noqa: E501
        :type: int
        """

        self._transaction_template_id = transaction_template_id

    @property
    def charge_group_id(self):
        """Gets the charge_group_id of this TransactionTemplateItemItem.  # noqa: E501

        Charge Group  # noqa: E501

        :return: The charge_group_id of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: int
        """
        return self._charge_group_id

    @charge_group_id.setter
    def charge_group_id(self, charge_group_id):
        """Sets the charge_group_id of this TransactionTemplateItemItem.

        Charge Group  # noqa: E501

        :param charge_group_id: The charge_group_id of this TransactionTemplateItemItem.  # noqa: E501
        :type: int
        """

        self._charge_group_id = charge_group_id

    @property
    def charge_item_id(self):
        """Gets the charge_item_id of this TransactionTemplateItemItem.  # noqa: E501

        Charge Item  # noqa: E501

        :return: The charge_item_id of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: int
        """
        return self._charge_item_id

    @charge_item_id.setter
    def charge_item_id(self, charge_item_id):
        """Sets the charge_item_id of this TransactionTemplateItemItem.

        Charge Item  # noqa: E501

        :param charge_item_id: The charge_item_id of this TransactionTemplateItemItem.  # noqa: E501
        :type: int
        """

        self._charge_item_id = charge_item_id

    @property
    def transaction_type_enum(self):
        """Gets the transaction_type_enum of this TransactionTemplateItemItem.  # noqa: E501

        Transaction Type  # noqa: E501

        :return: The transaction_type_enum of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type_enum

    @transaction_type_enum.setter
    def transaction_type_enum(self, transaction_type_enum):
        """Sets the transaction_type_enum of this TransactionTemplateItemItem.

        Transaction Type  # noqa: E501

        :param transaction_type_enum: The transaction_type_enum of this TransactionTemplateItemItem.  # noqa: E501
        :type: str
        """

        self._transaction_type_enum = transaction_type_enum

    @property
    def description(self):
        """Gets the description of this TransactionTemplateItemItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransactionTemplateItemItem.

        Description  # noqa: E501

        :param description: The description of this TransactionTemplateItemItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def auto_pay_override(self):
        """Gets the auto_pay_override of this TransactionTemplateItemItem.  # noqa: E501

        Auto Pay Override  # noqa: E501

        :return: The auto_pay_override of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: bool
        """
        return self._auto_pay_override

    @auto_pay_override.setter
    def auto_pay_override(self, auto_pay_override):
        """Sets the auto_pay_override of this TransactionTemplateItemItem.

        Auto Pay Override  # noqa: E501

        :param auto_pay_override: The auto_pay_override of this TransactionTemplateItemItem.  # noqa: E501
        :type: bool
        """

        self._auto_pay_override = auto_pay_override

    @property
    def amount(self):
        """Gets the amount of this TransactionTemplateItemItem.  # noqa: E501

        Amount  # noqa: E501

        :return: The amount of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransactionTemplateItemItem.

        Amount  # noqa: E501

        :param amount: The amount of this TransactionTemplateItemItem.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def due_date(self):
        """Gets the due_date of this TransactionTemplateItemItem.  # noqa: E501

        Due Date  # noqa: E501

        :return: The due_date of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this TransactionTemplateItemItem.

        Due Date  # noqa: E501

        :param due_date: The due_date of this TransactionTemplateItemItem.  # noqa: E501
        :type: str
        """

        self._due_date = due_date

    @property
    def tag(self):
        """Gets the tag of this TransactionTemplateItemItem.  # noqa: E501

        Tag  # noqa: E501

        :return: The tag of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this TransactionTemplateItemItem.

        Tag  # noqa: E501

        :param tag: The tag of this TransactionTemplateItemItem.  # noqa: E501
        :type: str
        """
        if tag is not None and len(tag) > 10:
            raise ValueError("Invalid value for `tag`, length must be less than or equal to `10`")  # noqa: E501

        self._tag = tag

    @property
    def tag_finance(self):
        """Gets the tag_finance of this TransactionTemplateItemItem.  # noqa: E501

        Tag Finance  # noqa: E501

        :return: The tag_finance of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: str
        """
        return self._tag_finance

    @tag_finance.setter
    def tag_finance(self, tag_finance):
        """Sets the tag_finance of this TransactionTemplateItemItem.

        Tag Finance  # noqa: E501

        :param tag_finance: The tag_finance of this TransactionTemplateItemItem.  # noqa: E501
        :type: str
        """
        if tag_finance is not None and len(tag_finance) > 10:
            raise ValueError("Invalid value for `tag_finance`, length must be less than or equal to `10`")  # noqa: E501

        self._tag_finance = tag_finance

    @property
    def term_session_id(self):
        """Gets the term_session_id of this TransactionTemplateItemItem.  # noqa: E501

        Term Session  # noqa: E501

        :return: The term_session_id of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: int
        """
        return self._term_session_id

    @term_session_id.setter
    def term_session_id(self, term_session_id):
        """Sets the term_session_id of this TransactionTemplateItemItem.

        Term Session  # noqa: E501

        :param term_session_id: The term_session_id of this TransactionTemplateItemItem.  # noqa: E501
        :type: int
        """

        self._term_session_id = term_session_id

    @property
    def comments(self):
        """Gets the comments of this TransactionTemplateItemItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TransactionTemplateItemItem.

        Comments  # noqa: E501

        :param comments: The comments of this TransactionTemplateItemItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 100:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `100`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this TransactionTemplateItemItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this TransactionTemplateItemItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this TransactionTemplateItemItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this TransactionTemplateItemItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionTemplateItemItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
