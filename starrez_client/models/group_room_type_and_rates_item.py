# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GroupRoomTypeAndRatesItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_room_type_and_rates_id': 'int',
        'group_id': 'int',
        'description': 'str',
        'room_type_id': 'int',
        'room_location_id': 'int',
        'room_rate_id': 'int',
        'guest_estimate': 'str',
        'guest_guarantee': 'str',
        'guest_maximum': 'str',
        'amount': 'str',
        'amount_double': 'str',
        'amount_extra': 'str',
        'amount_children': 'str',
        'comments': 'str',
        'view_on_web': 'bool',
        'web_description': 'str',
        'web_order': 'int',
        'web_comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'group_room_type_and_rates_id': 'GroupRoomTypeAndRatesID',
        'group_id': 'GroupID',
        'description': 'Description',
        'room_type_id': 'RoomTypeID',
        'room_location_id': 'RoomLocationID',
        'room_rate_id': 'RoomRateID',
        'guest_estimate': 'GuestEstimate',
        'guest_guarantee': 'GuestGuarantee',
        'guest_maximum': 'GuestMaximum',
        'amount': 'Amount',
        'amount_double': 'AmountDouble',
        'amount_extra': 'AmountExtra',
        'amount_children': 'AmountChildren',
        'comments': 'Comments',
        'view_on_web': 'ViewOnWeb',
        'web_description': 'WebDescription',
        'web_order': 'WebOrder',
        'web_comments': 'WebComments',
        'date_modified': 'DateModified'
    }

    def __init__(self, group_room_type_and_rates_id=None, group_id=None, description=None, room_type_id=None, room_location_id=None, room_rate_id=None, guest_estimate=None, guest_guarantee=None, guest_maximum=None, amount=None, amount_double=None, amount_extra=None, amount_children=None, comments=None, view_on_web=None, web_description=None, web_order=None, web_comments=None, date_modified=None):  # noqa: E501
        """GroupRoomTypeAndRatesItem - a model defined in Swagger"""  # noqa: E501

        self._group_room_type_and_rates_id = None
        self._group_id = None
        self._description = None
        self._room_type_id = None
        self._room_location_id = None
        self._room_rate_id = None
        self._guest_estimate = None
        self._guest_guarantee = None
        self._guest_maximum = None
        self._amount = None
        self._amount_double = None
        self._amount_extra = None
        self._amount_children = None
        self._comments = None
        self._view_on_web = None
        self._web_description = None
        self._web_order = None
        self._web_comments = None
        self._date_modified = None
        self.discriminator = None

        if group_room_type_and_rates_id is not None:
            self.group_room_type_and_rates_id = group_room_type_and_rates_id
        if group_id is not None:
            self.group_id = group_id
        if description is not None:
            self.description = description
        if room_type_id is not None:
            self.room_type_id = room_type_id
        if room_location_id is not None:
            self.room_location_id = room_location_id
        if room_rate_id is not None:
            self.room_rate_id = room_rate_id
        if guest_estimate is not None:
            self.guest_estimate = guest_estimate
        if guest_guarantee is not None:
            self.guest_guarantee = guest_guarantee
        if guest_maximum is not None:
            self.guest_maximum = guest_maximum
        if amount is not None:
            self.amount = amount
        if amount_double is not None:
            self.amount_double = amount_double
        if amount_extra is not None:
            self.amount_extra = amount_extra
        if amount_children is not None:
            self.amount_children = amount_children
        if comments is not None:
            self.comments = comments
        if view_on_web is not None:
            self.view_on_web = view_on_web
        if web_description is not None:
            self.web_description = web_description
        if web_order is not None:
            self.web_order = web_order
        if web_comments is not None:
            self.web_comments = web_comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def group_room_type_and_rates_id(self):
        """Gets the group_room_type_and_rates_id of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Group Room Type And Rates  # noqa: E501

        :return: The group_room_type_and_rates_id of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: int
        """
        return self._group_room_type_and_rates_id

    @group_room_type_and_rates_id.setter
    def group_room_type_and_rates_id(self, group_room_type_and_rates_id):
        """Sets the group_room_type_and_rates_id of this GroupRoomTypeAndRatesItem.

        Group Room Type And Rates  # noqa: E501

        :param group_room_type_and_rates_id: The group_room_type_and_rates_id of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: int
        """

        self._group_room_type_and_rates_id = group_room_type_and_rates_id

    @property
    def group_id(self):
        """Gets the group_id of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Group  # noqa: E501

        :return: The group_id of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GroupRoomTypeAndRatesItem.

        Group  # noqa: E501

        :param group_id: The group_id of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def description(self):
        """Gets the description of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GroupRoomTypeAndRatesItem.

        Description  # noqa: E501

        :param description: The description of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def room_type_id(self):
        """Gets the room_type_id of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Room Type  # noqa: E501

        :return: The room_type_id of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: int
        """
        return self._room_type_id

    @room_type_id.setter
    def room_type_id(self, room_type_id):
        """Sets the room_type_id of this GroupRoomTypeAndRatesItem.

        Room Type  # noqa: E501

        :param room_type_id: The room_type_id of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: int
        """

        self._room_type_id = room_type_id

    @property
    def room_location_id(self):
        """Gets the room_location_id of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Room Location  # noqa: E501

        :return: The room_location_id of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: int
        """
        return self._room_location_id

    @room_location_id.setter
    def room_location_id(self, room_location_id):
        """Sets the room_location_id of this GroupRoomTypeAndRatesItem.

        Room Location  # noqa: E501

        :param room_location_id: The room_location_id of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: int
        """

        self._room_location_id = room_location_id

    @property
    def room_rate_id(self):
        """Gets the room_rate_id of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Room Rate  # noqa: E501

        :return: The room_rate_id of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: int
        """
        return self._room_rate_id

    @room_rate_id.setter
    def room_rate_id(self, room_rate_id):
        """Sets the room_rate_id of this GroupRoomTypeAndRatesItem.

        Room Rate  # noqa: E501

        :param room_rate_id: The room_rate_id of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: int
        """

        self._room_rate_id = room_rate_id

    @property
    def guest_estimate(self):
        """Gets the guest_estimate of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Guest Estimate  # noqa: E501

        :return: The guest_estimate of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: str
        """
        return self._guest_estimate

    @guest_estimate.setter
    def guest_estimate(self, guest_estimate):
        """Sets the guest_estimate of this GroupRoomTypeAndRatesItem.

        Guest Estimate  # noqa: E501

        :param guest_estimate: The guest_estimate of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: str
        """

        self._guest_estimate = guest_estimate

    @property
    def guest_guarantee(self):
        """Gets the guest_guarantee of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Guest Guarantee  # noqa: E501

        :return: The guest_guarantee of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: str
        """
        return self._guest_guarantee

    @guest_guarantee.setter
    def guest_guarantee(self, guest_guarantee):
        """Sets the guest_guarantee of this GroupRoomTypeAndRatesItem.

        Guest Guarantee  # noqa: E501

        :param guest_guarantee: The guest_guarantee of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: str
        """

        self._guest_guarantee = guest_guarantee

    @property
    def guest_maximum(self):
        """Gets the guest_maximum of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Guest Maximum  # noqa: E501

        :return: The guest_maximum of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: str
        """
        return self._guest_maximum

    @guest_maximum.setter
    def guest_maximum(self, guest_maximum):
        """Sets the guest_maximum of this GroupRoomTypeAndRatesItem.

        Guest Maximum  # noqa: E501

        :param guest_maximum: The guest_maximum of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: str
        """

        self._guest_maximum = guest_maximum

    @property
    def amount(self):
        """Gets the amount of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Amount  # noqa: E501

        :return: The amount of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GroupRoomTypeAndRatesItem.

        Amount  # noqa: E501

        :param amount: The amount of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def amount_double(self):
        """Gets the amount_double of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Amount Double  # noqa: E501

        :return: The amount_double of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: str
        """
        return self._amount_double

    @amount_double.setter
    def amount_double(self, amount_double):
        """Sets the amount_double of this GroupRoomTypeAndRatesItem.

        Amount Double  # noqa: E501

        :param amount_double: The amount_double of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: str
        """

        self._amount_double = amount_double

    @property
    def amount_extra(self):
        """Gets the amount_extra of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Amount Extra  # noqa: E501

        :return: The amount_extra of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: str
        """
        return self._amount_extra

    @amount_extra.setter
    def amount_extra(self, amount_extra):
        """Sets the amount_extra of this GroupRoomTypeAndRatesItem.

        Amount Extra  # noqa: E501

        :param amount_extra: The amount_extra of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: str
        """

        self._amount_extra = amount_extra

    @property
    def amount_children(self):
        """Gets the amount_children of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Amount Children  # noqa: E501

        :return: The amount_children of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: str
        """
        return self._amount_children

    @amount_children.setter
    def amount_children(self, amount_children):
        """Sets the amount_children of this GroupRoomTypeAndRatesItem.

        Amount Children  # noqa: E501

        :param amount_children: The amount_children of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: str
        """

        self._amount_children = amount_children

    @property
    def comments(self):
        """Gets the comments of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this GroupRoomTypeAndRatesItem.

        Comments  # noqa: E501

        :param comments: The comments of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 500:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `500`")  # noqa: E501

        self._comments = comments

    @property
    def view_on_web(self):
        """Gets the view_on_web of this GroupRoomTypeAndRatesItem.  # noqa: E501

        View On Web  # noqa: E501

        :return: The view_on_web of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: bool
        """
        return self._view_on_web

    @view_on_web.setter
    def view_on_web(self, view_on_web):
        """Sets the view_on_web of this GroupRoomTypeAndRatesItem.

        View On Web  # noqa: E501

        :param view_on_web: The view_on_web of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: bool
        """

        self._view_on_web = view_on_web

    @property
    def web_description(self):
        """Gets the web_description of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Web Description  # noqa: E501

        :return: The web_description of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: str
        """
        return self._web_description

    @web_description.setter
    def web_description(self, web_description):
        """Sets the web_description of this GroupRoomTypeAndRatesItem.

        Web Description  # noqa: E501

        :param web_description: The web_description of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: str
        """
        if web_description is not None and len(web_description) > 1000:
            raise ValueError("Invalid value for `web_description`, length must be less than or equal to `1000`")  # noqa: E501

        self._web_description = web_description

    @property
    def web_order(self):
        """Gets the web_order of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Web Order  # noqa: E501

        :return: The web_order of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: int
        """
        return self._web_order

    @web_order.setter
    def web_order(self, web_order):
        """Sets the web_order of this GroupRoomTypeAndRatesItem.

        Web Order  # noqa: E501

        :param web_order: The web_order of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: int
        """

        self._web_order = web_order

    @property
    def web_comments(self):
        """Gets the web_comments of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Web Comments  # noqa: E501

        :return: The web_comments of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: str
        """
        return self._web_comments

    @web_comments.setter
    def web_comments(self, web_comments):
        """Sets the web_comments of this GroupRoomTypeAndRatesItem.

        Web Comments  # noqa: E501

        :param web_comments: The web_comments of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: str
        """

        self._web_comments = web_comments

    @property
    def date_modified(self):
        """Gets the date_modified of this GroupRoomTypeAndRatesItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this GroupRoomTypeAndRatesItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this GroupRoomTypeAndRatesItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupRoomTypeAndRatesItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
