# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IncidentEntrySanctionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'incident_entry_sanction_id': 'int',
        'incident_entry_id': 'int',
        'incident_sanction_type_id': 'int',
        'incident_sanction_sub_type_id': 'int',
        'incident_entry_appeal_id': 'int',
        'sanction_date': 'datetime',
        'date_due': 'str',
        'date_complete': 'str',
        'description': 'str',
        'comments': 'str',
        'referral': 'str',
        'charge_amount': 'str',
        'transaction_id': 'int',
        'status': 'str',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'incident_entry_sanction_id': 'IncidentEntrySanctionID',
        'incident_entry_id': 'IncidentEntryID',
        'incident_sanction_type_id': 'IncidentSanctionTypeID',
        'incident_sanction_sub_type_id': 'IncidentSanctionSubTypeID',
        'incident_entry_appeal_id': 'IncidentEntryAppealID',
        'sanction_date': 'SanctionDate',
        'date_due': 'DateDue',
        'date_complete': 'DateComplete',
        'description': 'Description',
        'comments': 'Comments',
        'referral': 'Referral',
        'charge_amount': 'ChargeAmount',
        'transaction_id': 'TransactionID',
        'status': 'Status',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, incident_entry_sanction_id=None, incident_entry_id=None, incident_sanction_type_id=None, incident_sanction_sub_type_id=None, incident_entry_appeal_id=None, sanction_date=None, date_due=None, date_complete=None, description=None, comments=None, referral=None, charge_amount=None, transaction_id=None, status=None, date_created=None, date_modified=None):  # noqa: E501
        """IncidentEntrySanctionItem - a model defined in Swagger"""  # noqa: E501

        self._incident_entry_sanction_id = None
        self._incident_entry_id = None
        self._incident_sanction_type_id = None
        self._incident_sanction_sub_type_id = None
        self._incident_entry_appeal_id = None
        self._sanction_date = None
        self._date_due = None
        self._date_complete = None
        self._description = None
        self._comments = None
        self._referral = None
        self._charge_amount = None
        self._transaction_id = None
        self._status = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if incident_entry_sanction_id is not None:
            self.incident_entry_sanction_id = incident_entry_sanction_id
        if incident_entry_id is not None:
            self.incident_entry_id = incident_entry_id
        if incident_sanction_type_id is not None:
            self.incident_sanction_type_id = incident_sanction_type_id
        if incident_sanction_sub_type_id is not None:
            self.incident_sanction_sub_type_id = incident_sanction_sub_type_id
        if incident_entry_appeal_id is not None:
            self.incident_entry_appeal_id = incident_entry_appeal_id
        if sanction_date is not None:
            self.sanction_date = sanction_date
        if date_due is not None:
            self.date_due = date_due
        if date_complete is not None:
            self.date_complete = date_complete
        if description is not None:
            self.description = description
        if comments is not None:
            self.comments = comments
        if referral is not None:
            self.referral = referral
        if charge_amount is not None:
            self.charge_amount = charge_amount
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if status is not None:
            self.status = status
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def incident_entry_sanction_id(self):
        """Gets the incident_entry_sanction_id of this IncidentEntrySanctionItem.  # noqa: E501

        Incident Entry Sanction  # noqa: E501

        :return: The incident_entry_sanction_id of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_entry_sanction_id

    @incident_entry_sanction_id.setter
    def incident_entry_sanction_id(self, incident_entry_sanction_id):
        """Sets the incident_entry_sanction_id of this IncidentEntrySanctionItem.

        Incident Entry Sanction  # noqa: E501

        :param incident_entry_sanction_id: The incident_entry_sanction_id of this IncidentEntrySanctionItem.  # noqa: E501
        :type: int
        """

        self._incident_entry_sanction_id = incident_entry_sanction_id

    @property
    def incident_entry_id(self):
        """Gets the incident_entry_id of this IncidentEntrySanctionItem.  # noqa: E501

        Incident Entry  # noqa: E501

        :return: The incident_entry_id of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_entry_id

    @incident_entry_id.setter
    def incident_entry_id(self, incident_entry_id):
        """Sets the incident_entry_id of this IncidentEntrySanctionItem.

        Incident Entry  # noqa: E501

        :param incident_entry_id: The incident_entry_id of this IncidentEntrySanctionItem.  # noqa: E501
        :type: int
        """

        self._incident_entry_id = incident_entry_id

    @property
    def incident_sanction_type_id(self):
        """Gets the incident_sanction_type_id of this IncidentEntrySanctionItem.  # noqa: E501

        Incident Sanction Type  # noqa: E501

        :return: The incident_sanction_type_id of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_sanction_type_id

    @incident_sanction_type_id.setter
    def incident_sanction_type_id(self, incident_sanction_type_id):
        """Sets the incident_sanction_type_id of this IncidentEntrySanctionItem.

        Incident Sanction Type  # noqa: E501

        :param incident_sanction_type_id: The incident_sanction_type_id of this IncidentEntrySanctionItem.  # noqa: E501
        :type: int
        """

        self._incident_sanction_type_id = incident_sanction_type_id

    @property
    def incident_sanction_sub_type_id(self):
        """Gets the incident_sanction_sub_type_id of this IncidentEntrySanctionItem.  # noqa: E501

        Incident Sanction Sub Type  # noqa: E501

        :return: The incident_sanction_sub_type_id of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_sanction_sub_type_id

    @incident_sanction_sub_type_id.setter
    def incident_sanction_sub_type_id(self, incident_sanction_sub_type_id):
        """Sets the incident_sanction_sub_type_id of this IncidentEntrySanctionItem.

        Incident Sanction Sub Type  # noqa: E501

        :param incident_sanction_sub_type_id: The incident_sanction_sub_type_id of this IncidentEntrySanctionItem.  # noqa: E501
        :type: int
        """

        self._incident_sanction_sub_type_id = incident_sanction_sub_type_id

    @property
    def incident_entry_appeal_id(self):
        """Gets the incident_entry_appeal_id of this IncidentEntrySanctionItem.  # noqa: E501

        Incident Entry Appeal  # noqa: E501

        :return: The incident_entry_appeal_id of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_entry_appeal_id

    @incident_entry_appeal_id.setter
    def incident_entry_appeal_id(self, incident_entry_appeal_id):
        """Sets the incident_entry_appeal_id of this IncidentEntrySanctionItem.

        Incident Entry Appeal  # noqa: E501

        :param incident_entry_appeal_id: The incident_entry_appeal_id of this IncidentEntrySanctionItem.  # noqa: E501
        :type: int
        """

        self._incident_entry_appeal_id = incident_entry_appeal_id

    @property
    def sanction_date(self):
        """Gets the sanction_date of this IncidentEntrySanctionItem.  # noqa: E501

        Sanction Date  # noqa: E501

        :return: The sanction_date of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: datetime
        """
        return self._sanction_date

    @sanction_date.setter
    def sanction_date(self, sanction_date):
        """Sets the sanction_date of this IncidentEntrySanctionItem.

        Sanction Date  # noqa: E501

        :param sanction_date: The sanction_date of this IncidentEntrySanctionItem.  # noqa: E501
        :type: datetime
        """

        self._sanction_date = sanction_date

    @property
    def date_due(self):
        """Gets the date_due of this IncidentEntrySanctionItem.  # noqa: E501

        Date Due  # noqa: E501

        :return: The date_due of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: str
        """
        return self._date_due

    @date_due.setter
    def date_due(self, date_due):
        """Sets the date_due of this IncidentEntrySanctionItem.

        Date Due  # noqa: E501

        :param date_due: The date_due of this IncidentEntrySanctionItem.  # noqa: E501
        :type: str
        """

        self._date_due = date_due

    @property
    def date_complete(self):
        """Gets the date_complete of this IncidentEntrySanctionItem.  # noqa: E501

        Date Complete  # noqa: E501

        :return: The date_complete of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: str
        """
        return self._date_complete

    @date_complete.setter
    def date_complete(self, date_complete):
        """Sets the date_complete of this IncidentEntrySanctionItem.

        Date Complete  # noqa: E501

        :param date_complete: The date_complete of this IncidentEntrySanctionItem.  # noqa: E501
        :type: str
        """

        self._date_complete = date_complete

    @property
    def description(self):
        """Gets the description of this IncidentEntrySanctionItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IncidentEntrySanctionItem.

        Description  # noqa: E501

        :param description: The description of this IncidentEntrySanctionItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 5000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `5000`")  # noqa: E501

        self._description = description

    @property
    def comments(self):
        """Gets the comments of this IncidentEntrySanctionItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this IncidentEntrySanctionItem.

        Comments  # noqa: E501

        :param comments: The comments of this IncidentEntrySanctionItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 5000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `5000`")  # noqa: E501

        self._comments = comments

    @property
    def referral(self):
        """Gets the referral of this IncidentEntrySanctionItem.  # noqa: E501

        Referral  # noqa: E501

        :return: The referral of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: str
        """
        return self._referral

    @referral.setter
    def referral(self, referral):
        """Sets the referral of this IncidentEntrySanctionItem.

        Referral  # noqa: E501

        :param referral: The referral of this IncidentEntrySanctionItem.  # noqa: E501
        :type: str
        """
        if referral is not None and len(referral) > 100:
            raise ValueError("Invalid value for `referral`, length must be less than or equal to `100`")  # noqa: E501

        self._referral = referral

    @property
    def charge_amount(self):
        """Gets the charge_amount of this IncidentEntrySanctionItem.  # noqa: E501

        Charge Amount  # noqa: E501

        :return: The charge_amount of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_amount

    @charge_amount.setter
    def charge_amount(self, charge_amount):
        """Sets the charge_amount of this IncidentEntrySanctionItem.

        Charge Amount  # noqa: E501

        :param charge_amount: The charge_amount of this IncidentEntrySanctionItem.  # noqa: E501
        :type: str
        """

        self._charge_amount = charge_amount

    @property
    def transaction_id(self):
        """Gets the transaction_id of this IncidentEntrySanctionItem.  # noqa: E501

        Transaction  # noqa: E501

        :return: The transaction_id of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this IncidentEntrySanctionItem.

        Transaction  # noqa: E501

        :param transaction_id: The transaction_id of this IncidentEntrySanctionItem.  # noqa: E501
        :type: int
        """

        self._transaction_id = transaction_id

    @property
    def status(self):
        """Gets the status of this IncidentEntrySanctionItem.  # noqa: E501

        Status  # noqa: E501

        :return: The status of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IncidentEntrySanctionItem.

        Status  # noqa: E501

        :param status: The status of this IncidentEntrySanctionItem.  # noqa: E501
        :type: str
        """
        if status is not None and len(status) > 100:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `100`")  # noqa: E501

        self._status = status

    @property
    def date_created(self):
        """Gets the date_created of this IncidentEntrySanctionItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this IncidentEntrySanctionItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this IncidentEntrySanctionItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this IncidentEntrySanctionItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this IncidentEntrySanctionItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this IncidentEntrySanctionItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this IncidentEntrySanctionItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncidentEntrySanctionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
