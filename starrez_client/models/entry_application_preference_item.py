# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntryApplicationPreferenceItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_application_preference_id': 'int',
        'entry_application_id': 'int',
        'preference_id': 'int',
        'preference': 'str',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'entry_application_preference_id': 'EntryApplicationPreferenceID',
        'entry_application_id': 'EntryApplicationID',
        'preference_id': 'PreferenceID',
        'preference': 'Preference',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, entry_application_preference_id=None, entry_application_id=None, preference_id=None, preference=None, comments=None, date_modified=None):  # noqa: E501
        """EntryApplicationPreferenceItem - a model defined in Swagger"""  # noqa: E501

        self._entry_application_preference_id = None
        self._entry_application_id = None
        self._preference_id = None
        self._preference = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if entry_application_preference_id is not None:
            self.entry_application_preference_id = entry_application_preference_id
        if entry_application_id is not None:
            self.entry_application_id = entry_application_id
        if preference_id is not None:
            self.preference_id = preference_id
        if preference is not None:
            self.preference = preference
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def entry_application_preference_id(self):
        """Gets the entry_application_preference_id of this EntryApplicationPreferenceItem.  # noqa: E501

        Entry Application Preference  # noqa: E501

        :return: The entry_application_preference_id of this EntryApplicationPreferenceItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_application_preference_id

    @entry_application_preference_id.setter
    def entry_application_preference_id(self, entry_application_preference_id):
        """Sets the entry_application_preference_id of this EntryApplicationPreferenceItem.

        Entry Application Preference  # noqa: E501

        :param entry_application_preference_id: The entry_application_preference_id of this EntryApplicationPreferenceItem.  # noqa: E501
        :type: int
        """

        self._entry_application_preference_id = entry_application_preference_id

    @property
    def entry_application_id(self):
        """Gets the entry_application_id of this EntryApplicationPreferenceItem.  # noqa: E501

        Entry Application  # noqa: E501

        :return: The entry_application_id of this EntryApplicationPreferenceItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_application_id

    @entry_application_id.setter
    def entry_application_id(self, entry_application_id):
        """Sets the entry_application_id of this EntryApplicationPreferenceItem.

        Entry Application  # noqa: E501

        :param entry_application_id: The entry_application_id of this EntryApplicationPreferenceItem.  # noqa: E501
        :type: int
        """

        self._entry_application_id = entry_application_id

    @property
    def preference_id(self):
        """Gets the preference_id of this EntryApplicationPreferenceItem.  # noqa: E501

        Preference  # noqa: E501

        :return: The preference_id of this EntryApplicationPreferenceItem.  # noqa: E501
        :rtype: int
        """
        return self._preference_id

    @preference_id.setter
    def preference_id(self, preference_id):
        """Sets the preference_id of this EntryApplicationPreferenceItem.

        Preference  # noqa: E501

        :param preference_id: The preference_id of this EntryApplicationPreferenceItem.  # noqa: E501
        :type: int
        """

        self._preference_id = preference_id

    @property
    def preference(self):
        """Gets the preference of this EntryApplicationPreferenceItem.  # noqa: E501

        Preference  # noqa: E501

        :return: The preference of this EntryApplicationPreferenceItem.  # noqa: E501
        :rtype: str
        """
        return self._preference

    @preference.setter
    def preference(self, preference):
        """Sets the preference of this EntryApplicationPreferenceItem.

        Preference  # noqa: E501

        :param preference: The preference of this EntryApplicationPreferenceItem.  # noqa: E501
        :type: str
        """

        self._preference = preference

    @property
    def comments(self):
        """Gets the comments of this EntryApplicationPreferenceItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this EntryApplicationPreferenceItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EntryApplicationPreferenceItem.

        Comments  # noqa: E501

        :param comments: The comments of this EntryApplicationPreferenceItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 1000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `1000`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this EntryApplicationPreferenceItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EntryApplicationPreferenceItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntryApplicationPreferenceItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EntryApplicationPreferenceItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryApplicationPreferenceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
