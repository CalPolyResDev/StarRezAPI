# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FunctionRoomRateItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'function_room_rate_id': 'int',
        'record_type_enum': 'str',
        'function_charge_type_enum': 'str',
        'charge_to_entry': 'bool',
        'per_entry': 'bool',
        'charge_item_id': 'int',
        'function_room_type_id': 'int',
        'description': 'str',
        'amount': 'str',
        'amount_cost': 'str',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'function_room_rate_id': 'FunctionRoomRateID',
        'record_type_enum': 'RecordTypeEnum',
        'function_charge_type_enum': 'FunctionChargeTypeEnum',
        'charge_to_entry': 'ChargeToEntry',
        'per_entry': 'PerEntry',
        'charge_item_id': 'ChargeItemID',
        'function_room_type_id': 'FunctionRoomTypeID',
        'description': 'Description',
        'amount': 'Amount',
        'amount_cost': 'AmountCost',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, function_room_rate_id=None, record_type_enum=None, function_charge_type_enum=None, charge_to_entry=None, per_entry=None, charge_item_id=None, function_room_type_id=None, description=None, amount=None, amount_cost=None, comments=None, date_modified=None):  # noqa: E501
        """FunctionRoomRateItem - a model defined in Swagger"""  # noqa: E501

        self._function_room_rate_id = None
        self._record_type_enum = None
        self._function_charge_type_enum = None
        self._charge_to_entry = None
        self._per_entry = None
        self._charge_item_id = None
        self._function_room_type_id = None
        self._description = None
        self._amount = None
        self._amount_cost = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if function_room_rate_id is not None:
            self.function_room_rate_id = function_room_rate_id
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if function_charge_type_enum is not None:
            self.function_charge_type_enum = function_charge_type_enum
        if charge_to_entry is not None:
            self.charge_to_entry = charge_to_entry
        if per_entry is not None:
            self.per_entry = per_entry
        if charge_item_id is not None:
            self.charge_item_id = charge_item_id
        if function_room_type_id is not None:
            self.function_room_type_id = function_room_type_id
        if description is not None:
            self.description = description
        if amount is not None:
            self.amount = amount
        if amount_cost is not None:
            self.amount_cost = amount_cost
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def function_room_rate_id(self):
        """Gets the function_room_rate_id of this FunctionRoomRateItem.  # noqa: E501

        Function Room Rate  # noqa: E501

        :return: The function_room_rate_id of this FunctionRoomRateItem.  # noqa: E501
        :rtype: int
        """
        return self._function_room_rate_id

    @function_room_rate_id.setter
    def function_room_rate_id(self, function_room_rate_id):
        """Sets the function_room_rate_id of this FunctionRoomRateItem.

        Function Room Rate  # noqa: E501

        :param function_room_rate_id: The function_room_rate_id of this FunctionRoomRateItem.  # noqa: E501
        :type: int
        """

        self._function_room_rate_id = function_room_rate_id

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this FunctionRoomRateItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this FunctionRoomRateItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this FunctionRoomRateItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this FunctionRoomRateItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def function_charge_type_enum(self):
        """Gets the function_charge_type_enum of this FunctionRoomRateItem.  # noqa: E501

        Function Charge Type  # noqa: E501

        :return: The function_charge_type_enum of this FunctionRoomRateItem.  # noqa: E501
        :rtype: str
        """
        return self._function_charge_type_enum

    @function_charge_type_enum.setter
    def function_charge_type_enum(self, function_charge_type_enum):
        """Sets the function_charge_type_enum of this FunctionRoomRateItem.

        Function Charge Type  # noqa: E501

        :param function_charge_type_enum: The function_charge_type_enum of this FunctionRoomRateItem.  # noqa: E501
        :type: str
        """

        self._function_charge_type_enum = function_charge_type_enum

    @property
    def charge_to_entry(self):
        """Gets the charge_to_entry of this FunctionRoomRateItem.  # noqa: E501

        Charge To Entry  # noqa: E501

        :return: The charge_to_entry of this FunctionRoomRateItem.  # noqa: E501
        :rtype: bool
        """
        return self._charge_to_entry

    @charge_to_entry.setter
    def charge_to_entry(self, charge_to_entry):
        """Sets the charge_to_entry of this FunctionRoomRateItem.

        Charge To Entry  # noqa: E501

        :param charge_to_entry: The charge_to_entry of this FunctionRoomRateItem.  # noqa: E501
        :type: bool
        """

        self._charge_to_entry = charge_to_entry

    @property
    def per_entry(self):
        """Gets the per_entry of this FunctionRoomRateItem.  # noqa: E501

        Per Entry  # noqa: E501

        :return: The per_entry of this FunctionRoomRateItem.  # noqa: E501
        :rtype: bool
        """
        return self._per_entry

    @per_entry.setter
    def per_entry(self, per_entry):
        """Sets the per_entry of this FunctionRoomRateItem.

        Per Entry  # noqa: E501

        :param per_entry: The per_entry of this FunctionRoomRateItem.  # noqa: E501
        :type: bool
        """

        self._per_entry = per_entry

    @property
    def charge_item_id(self):
        """Gets the charge_item_id of this FunctionRoomRateItem.  # noqa: E501

        Charge Item  # noqa: E501

        :return: The charge_item_id of this FunctionRoomRateItem.  # noqa: E501
        :rtype: int
        """
        return self._charge_item_id

    @charge_item_id.setter
    def charge_item_id(self, charge_item_id):
        """Sets the charge_item_id of this FunctionRoomRateItem.

        Charge Item  # noqa: E501

        :param charge_item_id: The charge_item_id of this FunctionRoomRateItem.  # noqa: E501
        :type: int
        """

        self._charge_item_id = charge_item_id

    @property
    def function_room_type_id(self):
        """Gets the function_room_type_id of this FunctionRoomRateItem.  # noqa: E501

        Function Room Type  # noqa: E501

        :return: The function_room_type_id of this FunctionRoomRateItem.  # noqa: E501
        :rtype: int
        """
        return self._function_room_type_id

    @function_room_type_id.setter
    def function_room_type_id(self, function_room_type_id):
        """Sets the function_room_type_id of this FunctionRoomRateItem.

        Function Room Type  # noqa: E501

        :param function_room_type_id: The function_room_type_id of this FunctionRoomRateItem.  # noqa: E501
        :type: int
        """

        self._function_room_type_id = function_room_type_id

    @property
    def description(self):
        """Gets the description of this FunctionRoomRateItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this FunctionRoomRateItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FunctionRoomRateItem.

        Description  # noqa: E501

        :param description: The description of this FunctionRoomRateItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def amount(self):
        """Gets the amount of this FunctionRoomRateItem.  # noqa: E501

        Amount  # noqa: E501

        :return: The amount of this FunctionRoomRateItem.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this FunctionRoomRateItem.

        Amount  # noqa: E501

        :param amount: The amount of this FunctionRoomRateItem.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def amount_cost(self):
        """Gets the amount_cost of this FunctionRoomRateItem.  # noqa: E501

        Amount Cost  # noqa: E501

        :return: The amount_cost of this FunctionRoomRateItem.  # noqa: E501
        :rtype: str
        """
        return self._amount_cost

    @amount_cost.setter
    def amount_cost(self, amount_cost):
        """Sets the amount_cost of this FunctionRoomRateItem.

        Amount Cost  # noqa: E501

        :param amount_cost: The amount_cost of this FunctionRoomRateItem.  # noqa: E501
        :type: str
        """

        self._amount_cost = amount_cost

    @property
    def comments(self):
        """Gets the comments of this FunctionRoomRateItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this FunctionRoomRateItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this FunctionRoomRateItem.

        Comments  # noqa: E501

        :param comments: The comments of this FunctionRoomRateItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 500:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `500`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this FunctionRoomRateItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this FunctionRoomRateItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this FunctionRoomRateItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this FunctionRoomRateItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FunctionRoomRateItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
