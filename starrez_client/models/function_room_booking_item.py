# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FunctionRoomBookingItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'function_room_booking_id': 'int',
        'function_room_id': 'int',
        'function_booking_id': 'int',
        'function_room_setup_id': 'int',
        'function_room_rate_id': 'int',
        'function_room_booking_status_enum': 'str',
        'function_room_rate_amount': 'str',
        'function_room_rate_amount_cost': 'str',
        'setup_notes': 'str',
        'comments': 'str',
        'security_user_id': 'int',
        'created_by_security_user_id': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'function_room_booking_id': 'FunctionRoomBookingID',
        'function_room_id': 'FunctionRoomID',
        'function_booking_id': 'FunctionBookingID',
        'function_room_setup_id': 'FunctionRoomSetupID',
        'function_room_rate_id': 'FunctionRoomRateID',
        'function_room_booking_status_enum': 'FunctionRoomBookingStatusEnum',
        'function_room_rate_amount': 'FunctionRoomRateAmount',
        'function_room_rate_amount_cost': 'FunctionRoomRateAmountCost',
        'setup_notes': 'SetupNotes',
        'comments': 'Comments',
        'security_user_id': 'SecurityUserID',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, function_room_booking_id=None, function_room_id=None, function_booking_id=None, function_room_setup_id=None, function_room_rate_id=None, function_room_booking_status_enum=None, function_room_rate_amount=None, function_room_rate_amount_cost=None, setup_notes=None, comments=None, security_user_id=None, created_by_security_user_id=None, date_created=None, date_modified=None):  # noqa: E501
        """FunctionRoomBookingItem - a model defined in Swagger"""  # noqa: E501

        self._function_room_booking_id = None
        self._function_room_id = None
        self._function_booking_id = None
        self._function_room_setup_id = None
        self._function_room_rate_id = None
        self._function_room_booking_status_enum = None
        self._function_room_rate_amount = None
        self._function_room_rate_amount_cost = None
        self._setup_notes = None
        self._comments = None
        self._security_user_id = None
        self._created_by_security_user_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if function_room_booking_id is not None:
            self.function_room_booking_id = function_room_booking_id
        if function_room_id is not None:
            self.function_room_id = function_room_id
        if function_booking_id is not None:
            self.function_booking_id = function_booking_id
        if function_room_setup_id is not None:
            self.function_room_setup_id = function_room_setup_id
        if function_room_rate_id is not None:
            self.function_room_rate_id = function_room_rate_id
        if function_room_booking_status_enum is not None:
            self.function_room_booking_status_enum = function_room_booking_status_enum
        if function_room_rate_amount is not None:
            self.function_room_rate_amount = function_room_rate_amount
        if function_room_rate_amount_cost is not None:
            self.function_room_rate_amount_cost = function_room_rate_amount_cost
        if setup_notes is not None:
            self.setup_notes = setup_notes
        if comments is not None:
            self.comments = comments
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def function_room_booking_id(self):
        """Gets the function_room_booking_id of this FunctionRoomBookingItem.  # noqa: E501

        Function Room Booking  # noqa: E501

        :return: The function_room_booking_id of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: int
        """
        return self._function_room_booking_id

    @function_room_booking_id.setter
    def function_room_booking_id(self, function_room_booking_id):
        """Sets the function_room_booking_id of this FunctionRoomBookingItem.

        Function Room Booking  # noqa: E501

        :param function_room_booking_id: The function_room_booking_id of this FunctionRoomBookingItem.  # noqa: E501
        :type: int
        """

        self._function_room_booking_id = function_room_booking_id

    @property
    def function_room_id(self):
        """Gets the function_room_id of this FunctionRoomBookingItem.  # noqa: E501

        Function Room  # noqa: E501

        :return: The function_room_id of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: int
        """
        return self._function_room_id

    @function_room_id.setter
    def function_room_id(self, function_room_id):
        """Sets the function_room_id of this FunctionRoomBookingItem.

        Function Room  # noqa: E501

        :param function_room_id: The function_room_id of this FunctionRoomBookingItem.  # noqa: E501
        :type: int
        """

        self._function_room_id = function_room_id

    @property
    def function_booking_id(self):
        """Gets the function_booking_id of this FunctionRoomBookingItem.  # noqa: E501

        Function Booking  # noqa: E501

        :return: The function_booking_id of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: int
        """
        return self._function_booking_id

    @function_booking_id.setter
    def function_booking_id(self, function_booking_id):
        """Sets the function_booking_id of this FunctionRoomBookingItem.

        Function Booking  # noqa: E501

        :param function_booking_id: The function_booking_id of this FunctionRoomBookingItem.  # noqa: E501
        :type: int
        """

        self._function_booking_id = function_booking_id

    @property
    def function_room_setup_id(self):
        """Gets the function_room_setup_id of this FunctionRoomBookingItem.  # noqa: E501

        Function Room Setup  # noqa: E501

        :return: The function_room_setup_id of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: int
        """
        return self._function_room_setup_id

    @function_room_setup_id.setter
    def function_room_setup_id(self, function_room_setup_id):
        """Sets the function_room_setup_id of this FunctionRoomBookingItem.

        Function Room Setup  # noqa: E501

        :param function_room_setup_id: The function_room_setup_id of this FunctionRoomBookingItem.  # noqa: E501
        :type: int
        """

        self._function_room_setup_id = function_room_setup_id

    @property
    def function_room_rate_id(self):
        """Gets the function_room_rate_id of this FunctionRoomBookingItem.  # noqa: E501

        Function Room Rate  # noqa: E501

        :return: The function_room_rate_id of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: int
        """
        return self._function_room_rate_id

    @function_room_rate_id.setter
    def function_room_rate_id(self, function_room_rate_id):
        """Sets the function_room_rate_id of this FunctionRoomBookingItem.

        Function Room Rate  # noqa: E501

        :param function_room_rate_id: The function_room_rate_id of this FunctionRoomBookingItem.  # noqa: E501
        :type: int
        """

        self._function_room_rate_id = function_room_rate_id

    @property
    def function_room_booking_status_enum(self):
        """Gets the function_room_booking_status_enum of this FunctionRoomBookingItem.  # noqa: E501

        Function Room Booking Status  # noqa: E501

        :return: The function_room_booking_status_enum of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: str
        """
        return self._function_room_booking_status_enum

    @function_room_booking_status_enum.setter
    def function_room_booking_status_enum(self, function_room_booking_status_enum):
        """Sets the function_room_booking_status_enum of this FunctionRoomBookingItem.

        Function Room Booking Status  # noqa: E501

        :param function_room_booking_status_enum: The function_room_booking_status_enum of this FunctionRoomBookingItem.  # noqa: E501
        :type: str
        """

        self._function_room_booking_status_enum = function_room_booking_status_enum

    @property
    def function_room_rate_amount(self):
        """Gets the function_room_rate_amount of this FunctionRoomBookingItem.  # noqa: E501

        Function Room Rate Amount  # noqa: E501

        :return: The function_room_rate_amount of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: str
        """
        return self._function_room_rate_amount

    @function_room_rate_amount.setter
    def function_room_rate_amount(self, function_room_rate_amount):
        """Sets the function_room_rate_amount of this FunctionRoomBookingItem.

        Function Room Rate Amount  # noqa: E501

        :param function_room_rate_amount: The function_room_rate_amount of this FunctionRoomBookingItem.  # noqa: E501
        :type: str
        """

        self._function_room_rate_amount = function_room_rate_amount

    @property
    def function_room_rate_amount_cost(self):
        """Gets the function_room_rate_amount_cost of this FunctionRoomBookingItem.  # noqa: E501

        Function Room Rate Amount Cost  # noqa: E501

        :return: The function_room_rate_amount_cost of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: str
        """
        return self._function_room_rate_amount_cost

    @function_room_rate_amount_cost.setter
    def function_room_rate_amount_cost(self, function_room_rate_amount_cost):
        """Sets the function_room_rate_amount_cost of this FunctionRoomBookingItem.

        Function Room Rate Amount Cost  # noqa: E501

        :param function_room_rate_amount_cost: The function_room_rate_amount_cost of this FunctionRoomBookingItem.  # noqa: E501
        :type: str
        """

        self._function_room_rate_amount_cost = function_room_rate_amount_cost

    @property
    def setup_notes(self):
        """Gets the setup_notes of this FunctionRoomBookingItem.  # noqa: E501

        Setup Notes  # noqa: E501

        :return: The setup_notes of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: str
        """
        return self._setup_notes

    @setup_notes.setter
    def setup_notes(self, setup_notes):
        """Sets the setup_notes of this FunctionRoomBookingItem.

        Setup Notes  # noqa: E501

        :param setup_notes: The setup_notes of this FunctionRoomBookingItem.  # noqa: E501
        :type: str
        """
        if setup_notes is not None and len(setup_notes) > 1000:
            raise ValueError("Invalid value for `setup_notes`, length must be less than or equal to `1000`")  # noqa: E501

        self._setup_notes = setup_notes

    @property
    def comments(self):
        """Gets the comments of this FunctionRoomBookingItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this FunctionRoomBookingItem.

        Comments  # noqa: E501

        :param comments: The comments of this FunctionRoomBookingItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 1000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `1000`")  # noqa: E501

        self._comments = comments

    @property
    def security_user_id(self):
        """Gets the security_user_id of this FunctionRoomBookingItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this FunctionRoomBookingItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this FunctionRoomBookingItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this FunctionRoomBookingItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this FunctionRoomBookingItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this FunctionRoomBookingItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this FunctionRoomBookingItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this FunctionRoomBookingItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this FunctionRoomBookingItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this FunctionRoomBookingItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this FunctionRoomBookingItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this FunctionRoomBookingItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this FunctionRoomBookingItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FunctionRoomBookingItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
