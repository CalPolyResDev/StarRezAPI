# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MealPlanDiningHallItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'meal_plan_dining_hall_id': 'int',
        'description': 'str',
        'capacity_min': 'int',
        'capacity_max': 'int',
        'view_on_web': 'bool',
        'charge_item_id': 'int',
        'date_modified': 'str'
    }

    attribute_map = {
        'meal_plan_dining_hall_id': 'MealPlanDiningHallID',
        'description': 'Description',
        'capacity_min': 'CapacityMin',
        'capacity_max': 'CapacityMax',
        'view_on_web': 'ViewOnWeb',
        'charge_item_id': 'ChargeItemID',
        'date_modified': 'DateModified'
    }

    def __init__(self, meal_plan_dining_hall_id=None, description=None, capacity_min=None, capacity_max=None, view_on_web=None, charge_item_id=None, date_modified=None):  # noqa: E501
        """MealPlanDiningHallItem - a model defined in Swagger"""  # noqa: E501

        self._meal_plan_dining_hall_id = None
        self._description = None
        self._capacity_min = None
        self._capacity_max = None
        self._view_on_web = None
        self._charge_item_id = None
        self._date_modified = None
        self.discriminator = None

        if meal_plan_dining_hall_id is not None:
            self.meal_plan_dining_hall_id = meal_plan_dining_hall_id
        if description is not None:
            self.description = description
        if capacity_min is not None:
            self.capacity_min = capacity_min
        if capacity_max is not None:
            self.capacity_max = capacity_max
        if view_on_web is not None:
            self.view_on_web = view_on_web
        if charge_item_id is not None:
            self.charge_item_id = charge_item_id
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def meal_plan_dining_hall_id(self):
        """Gets the meal_plan_dining_hall_id of this MealPlanDiningHallItem.  # noqa: E501

        Meal Plan Dining Hall  # noqa: E501

        :return: The meal_plan_dining_hall_id of this MealPlanDiningHallItem.  # noqa: E501
        :rtype: int
        """
        return self._meal_plan_dining_hall_id

    @meal_plan_dining_hall_id.setter
    def meal_plan_dining_hall_id(self, meal_plan_dining_hall_id):
        """Sets the meal_plan_dining_hall_id of this MealPlanDiningHallItem.

        Meal Plan Dining Hall  # noqa: E501

        :param meal_plan_dining_hall_id: The meal_plan_dining_hall_id of this MealPlanDiningHallItem.  # noqa: E501
        :type: int
        """

        self._meal_plan_dining_hall_id = meal_plan_dining_hall_id

    @property
    def description(self):
        """Gets the description of this MealPlanDiningHallItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this MealPlanDiningHallItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MealPlanDiningHallItem.

        Description  # noqa: E501

        :param description: The description of this MealPlanDiningHallItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def capacity_min(self):
        """Gets the capacity_min of this MealPlanDiningHallItem.  # noqa: E501

        Capacity Min  # noqa: E501

        :return: The capacity_min of this MealPlanDiningHallItem.  # noqa: E501
        :rtype: int
        """
        return self._capacity_min

    @capacity_min.setter
    def capacity_min(self, capacity_min):
        """Sets the capacity_min of this MealPlanDiningHallItem.

        Capacity Min  # noqa: E501

        :param capacity_min: The capacity_min of this MealPlanDiningHallItem.  # noqa: E501
        :type: int
        """

        self._capacity_min = capacity_min

    @property
    def capacity_max(self):
        """Gets the capacity_max of this MealPlanDiningHallItem.  # noqa: E501

        Capacity Max  # noqa: E501

        :return: The capacity_max of this MealPlanDiningHallItem.  # noqa: E501
        :rtype: int
        """
        return self._capacity_max

    @capacity_max.setter
    def capacity_max(self, capacity_max):
        """Sets the capacity_max of this MealPlanDiningHallItem.

        Capacity Max  # noqa: E501

        :param capacity_max: The capacity_max of this MealPlanDiningHallItem.  # noqa: E501
        :type: int
        """

        self._capacity_max = capacity_max

    @property
    def view_on_web(self):
        """Gets the view_on_web of this MealPlanDiningHallItem.  # noqa: E501

        View On Web  # noqa: E501

        :return: The view_on_web of this MealPlanDiningHallItem.  # noqa: E501
        :rtype: bool
        """
        return self._view_on_web

    @view_on_web.setter
    def view_on_web(self, view_on_web):
        """Sets the view_on_web of this MealPlanDiningHallItem.

        View On Web  # noqa: E501

        :param view_on_web: The view_on_web of this MealPlanDiningHallItem.  # noqa: E501
        :type: bool
        """

        self._view_on_web = view_on_web

    @property
    def charge_item_id(self):
        """Gets the charge_item_id of this MealPlanDiningHallItem.  # noqa: E501

        Charge Item  # noqa: E501

        :return: The charge_item_id of this MealPlanDiningHallItem.  # noqa: E501
        :rtype: int
        """
        return self._charge_item_id

    @charge_item_id.setter
    def charge_item_id(self, charge_item_id):
        """Sets the charge_item_id of this MealPlanDiningHallItem.

        Charge Item  # noqa: E501

        :param charge_item_id: The charge_item_id of this MealPlanDiningHallItem.  # noqa: E501
        :type: int
        """

        self._charge_item_id = charge_item_id

    @property
    def date_modified(self):
        """Gets the date_modified of this MealPlanDiningHallItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this MealPlanDiningHallItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this MealPlanDiningHallItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this MealPlanDiningHallItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MealPlanDiningHallItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
