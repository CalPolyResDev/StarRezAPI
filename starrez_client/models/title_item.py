# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TitleItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title_id': 'int',
        'description': 'str',
        'update_gender': 'bool',
        'gender_enum': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'title_id': 'TitleID',
        'description': 'Description',
        'update_gender': 'UpdateGender',
        'gender_enum': 'GenderEnum',
        'date_modified': 'DateModified'
    }

    def __init__(self, title_id=None, description=None, update_gender=None, gender_enum=None, date_modified=None):  # noqa: E501
        """TitleItem - a model defined in Swagger"""  # noqa: E501

        self._title_id = None
        self._description = None
        self._update_gender = None
        self._gender_enum = None
        self._date_modified = None
        self.discriminator = None

        if title_id is not None:
            self.title_id = title_id
        if description is not None:
            self.description = description
        if update_gender is not None:
            self.update_gender = update_gender
        if gender_enum is not None:
            self.gender_enum = gender_enum
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def title_id(self):
        """Gets the title_id of this TitleItem.  # noqa: E501

        Title  # noqa: E501

        :return: The title_id of this TitleItem.  # noqa: E501
        :rtype: int
        """
        return self._title_id

    @title_id.setter
    def title_id(self, title_id):
        """Sets the title_id of this TitleItem.

        Title  # noqa: E501

        :param title_id: The title_id of this TitleItem.  # noqa: E501
        :type: int
        """

        self._title_id = title_id

    @property
    def description(self):
        """Gets the description of this TitleItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this TitleItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TitleItem.

        Description  # noqa: E501

        :param description: The description of this TitleItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 15:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `15`")  # noqa: E501

        self._description = description

    @property
    def update_gender(self):
        """Gets the update_gender of this TitleItem.  # noqa: E501

        Update Gender  # noqa: E501

        :return: The update_gender of this TitleItem.  # noqa: E501
        :rtype: bool
        """
        return self._update_gender

    @update_gender.setter
    def update_gender(self, update_gender):
        """Sets the update_gender of this TitleItem.

        Update Gender  # noqa: E501

        :param update_gender: The update_gender of this TitleItem.  # noqa: E501
        :type: bool
        """

        self._update_gender = update_gender

    @property
    def gender_enum(self):
        """Gets the gender_enum of this TitleItem.  # noqa: E501

        Gender  # noqa: E501

        :return: The gender_enum of this TitleItem.  # noqa: E501
        :rtype: str
        """
        return self._gender_enum

    @gender_enum.setter
    def gender_enum(self, gender_enum):
        """Sets the gender_enum of this TitleItem.

        Gender  # noqa: E501

        :param gender_enum: The gender_enum of this TitleItem.  # noqa: E501
        :type: str
        """

        self._gender_enum = gender_enum

    @property
    def date_modified(self):
        """Gets the date_modified of this TitleItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this TitleItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this TitleItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this TitleItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitleItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
