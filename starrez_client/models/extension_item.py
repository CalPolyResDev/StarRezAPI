# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExtensionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extension_id': 'int',
        'description': 'str',
        'virtual': 'str',
        'site_id': 'int',
        'phone_number': 'str',
        'equipment_number1': 'str',
        'equipment_number2': 'str',
        'equipment_number3': 'str',
        'equipment_comments': 'str',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'extension_id': 'ExtensionID',
        'description': 'Description',
        'virtual': 'Virtual',
        'site_id': 'SiteID',
        'phone_number': 'PhoneNumber',
        'equipment_number1': 'EquipmentNumber1',
        'equipment_number2': 'EquipmentNumber2',
        'equipment_number3': 'EquipmentNumber3',
        'equipment_comments': 'EquipmentComments',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, extension_id=None, description=None, virtual=None, site_id=None, phone_number=None, equipment_number1=None, equipment_number2=None, equipment_number3=None, equipment_comments=None, comments=None, date_modified=None):  # noqa: E501
        """ExtensionItem - a model defined in Swagger"""  # noqa: E501

        self._extension_id = None
        self._description = None
        self._virtual = None
        self._site_id = None
        self._phone_number = None
        self._equipment_number1 = None
        self._equipment_number2 = None
        self._equipment_number3 = None
        self._equipment_comments = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if extension_id is not None:
            self.extension_id = extension_id
        if description is not None:
            self.description = description
        if virtual is not None:
            self.virtual = virtual
        if site_id is not None:
            self.site_id = site_id
        if phone_number is not None:
            self.phone_number = phone_number
        if equipment_number1 is not None:
            self.equipment_number1 = equipment_number1
        if equipment_number2 is not None:
            self.equipment_number2 = equipment_number2
        if equipment_number3 is not None:
            self.equipment_number3 = equipment_number3
        if equipment_comments is not None:
            self.equipment_comments = equipment_comments
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def extension_id(self):
        """Gets the extension_id of this ExtensionItem.  # noqa: E501

        Extension  # noqa: E501

        :return: The extension_id of this ExtensionItem.  # noqa: E501
        :rtype: int
        """
        return self._extension_id

    @extension_id.setter
    def extension_id(self, extension_id):
        """Sets the extension_id of this ExtensionItem.

        Extension  # noqa: E501

        :param extension_id: The extension_id of this ExtensionItem.  # noqa: E501
        :type: int
        """

        self._extension_id = extension_id

    @property
    def description(self):
        """Gets the description of this ExtensionItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this ExtensionItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExtensionItem.

        Description  # noqa: E501

        :param description: The description of this ExtensionItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 10:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `10`")  # noqa: E501

        self._description = description

    @property
    def virtual(self):
        """Gets the virtual of this ExtensionItem.  # noqa: E501

        Virtual  # noqa: E501

        :return: The virtual of this ExtensionItem.  # noqa: E501
        :rtype: str
        """
        return self._virtual

    @virtual.setter
    def virtual(self, virtual):
        """Sets the virtual of this ExtensionItem.

        Virtual  # noqa: E501

        :param virtual: The virtual of this ExtensionItem.  # noqa: E501
        :type: str
        """
        if virtual is not None and len(virtual) > 10:
            raise ValueError("Invalid value for `virtual`, length must be less than or equal to `10`")  # noqa: E501

        self._virtual = virtual

    @property
    def site_id(self):
        """Gets the site_id of this ExtensionItem.  # noqa: E501

        Site  # noqa: E501

        :return: The site_id of this ExtensionItem.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this ExtensionItem.

        Site  # noqa: E501

        :param site_id: The site_id of this ExtensionItem.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def phone_number(self):
        """Gets the phone_number of this ExtensionItem.  # noqa: E501

        Phone Number  # noqa: E501

        :return: The phone_number of this ExtensionItem.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ExtensionItem.

        Phone Number  # noqa: E501

        :param phone_number: The phone_number of this ExtensionItem.  # noqa: E501
        :type: str
        """
        if phone_number is not None and len(phone_number) > 20:
            raise ValueError("Invalid value for `phone_number`, length must be less than or equal to `20`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def equipment_number1(self):
        """Gets the equipment_number1 of this ExtensionItem.  # noqa: E501

        Equipment Number 1  # noqa: E501

        :return: The equipment_number1 of this ExtensionItem.  # noqa: E501
        :rtype: str
        """
        return self._equipment_number1

    @equipment_number1.setter
    def equipment_number1(self, equipment_number1):
        """Sets the equipment_number1 of this ExtensionItem.

        Equipment Number 1  # noqa: E501

        :param equipment_number1: The equipment_number1 of this ExtensionItem.  # noqa: E501
        :type: str
        """
        if equipment_number1 is not None and len(equipment_number1) > 30:
            raise ValueError("Invalid value for `equipment_number1`, length must be less than or equal to `30`")  # noqa: E501

        self._equipment_number1 = equipment_number1

    @property
    def equipment_number2(self):
        """Gets the equipment_number2 of this ExtensionItem.  # noqa: E501

        Equipment Number 2  # noqa: E501

        :return: The equipment_number2 of this ExtensionItem.  # noqa: E501
        :rtype: str
        """
        return self._equipment_number2

    @equipment_number2.setter
    def equipment_number2(self, equipment_number2):
        """Sets the equipment_number2 of this ExtensionItem.

        Equipment Number 2  # noqa: E501

        :param equipment_number2: The equipment_number2 of this ExtensionItem.  # noqa: E501
        :type: str
        """
        if equipment_number2 is not None and len(equipment_number2) > 30:
            raise ValueError("Invalid value for `equipment_number2`, length must be less than or equal to `30`")  # noqa: E501

        self._equipment_number2 = equipment_number2

    @property
    def equipment_number3(self):
        """Gets the equipment_number3 of this ExtensionItem.  # noqa: E501

        Equipment Number 3  # noqa: E501

        :return: The equipment_number3 of this ExtensionItem.  # noqa: E501
        :rtype: str
        """
        return self._equipment_number3

    @equipment_number3.setter
    def equipment_number3(self, equipment_number3):
        """Sets the equipment_number3 of this ExtensionItem.

        Equipment Number 3  # noqa: E501

        :param equipment_number3: The equipment_number3 of this ExtensionItem.  # noqa: E501
        :type: str
        """
        if equipment_number3 is not None and len(equipment_number3) > 30:
            raise ValueError("Invalid value for `equipment_number3`, length must be less than or equal to `30`")  # noqa: E501

        self._equipment_number3 = equipment_number3

    @property
    def equipment_comments(self):
        """Gets the equipment_comments of this ExtensionItem.  # noqa: E501

        Equipment Comments  # noqa: E501

        :return: The equipment_comments of this ExtensionItem.  # noqa: E501
        :rtype: str
        """
        return self._equipment_comments

    @equipment_comments.setter
    def equipment_comments(self, equipment_comments):
        """Sets the equipment_comments of this ExtensionItem.

        Equipment Comments  # noqa: E501

        :param equipment_comments: The equipment_comments of this ExtensionItem.  # noqa: E501
        :type: str
        """
        if equipment_comments is not None and len(equipment_comments) > 30:
            raise ValueError("Invalid value for `equipment_comments`, length must be less than or equal to `30`")  # noqa: E501

        self._equipment_comments = equipment_comments

    @property
    def comments(self):
        """Gets the comments of this ExtensionItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this ExtensionItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ExtensionItem.

        Comments  # noqa: E501

        :param comments: The comments of this ExtensionItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 100:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `100`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this ExtensionItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this ExtensionItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ExtensionItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this ExtensionItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtensionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
