# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LogActivityItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'log_activity_id': 'int',
        'parent_id': 'int',
        'log_date': 'str',
        'machine': 'str',
        'user_name': 'str',
        'log_activity_enum': 'str',
        'table_name': 'str',
        'table_id': 'int',
        'entry_id': 'int',
        'description': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'log_activity_id': 'LogActivityID',
        'parent_id': 'ParentID',
        'log_date': 'LogDate',
        'machine': 'Machine',
        'user_name': 'UserName',
        'log_activity_enum': 'LogActivityEnum',
        'table_name': 'TableName',
        'table_id': 'TableID',
        'entry_id': 'EntryID',
        'description': 'Description',
        'date_modified': 'DateModified'
    }

    def __init__(self, log_activity_id=None, parent_id=None, log_date=None, machine=None, user_name=None, log_activity_enum=None, table_name=None, table_id=None, entry_id=None, description=None, date_modified=None):  # noqa: E501
        """LogActivityItem - a model defined in Swagger"""  # noqa: E501

        self._log_activity_id = None
        self._parent_id = None
        self._log_date = None
        self._machine = None
        self._user_name = None
        self._log_activity_enum = None
        self._table_name = None
        self._table_id = None
        self._entry_id = None
        self._description = None
        self._date_modified = None
        self.discriminator = None

        if log_activity_id is not None:
            self.log_activity_id = log_activity_id
        if parent_id is not None:
            self.parent_id = parent_id
        if log_date is not None:
            self.log_date = log_date
        if machine is not None:
            self.machine = machine
        if user_name is not None:
            self.user_name = user_name
        if log_activity_enum is not None:
            self.log_activity_enum = log_activity_enum
        if table_name is not None:
            self.table_name = table_name
        if table_id is not None:
            self.table_id = table_id
        if entry_id is not None:
            self.entry_id = entry_id
        if description is not None:
            self.description = description
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def log_activity_id(self):
        """Gets the log_activity_id of this LogActivityItem.  # noqa: E501

        Log Activity  # noqa: E501

        :return: The log_activity_id of this LogActivityItem.  # noqa: E501
        :rtype: int
        """
        return self._log_activity_id

    @log_activity_id.setter
    def log_activity_id(self, log_activity_id):
        """Sets the log_activity_id of this LogActivityItem.

        Log Activity  # noqa: E501

        :param log_activity_id: The log_activity_id of this LogActivityItem.  # noqa: E501
        :type: int
        """

        self._log_activity_id = log_activity_id

    @property
    def parent_id(self):
        """Gets the parent_id of this LogActivityItem.  # noqa: E501

        Parent  # noqa: E501

        :return: The parent_id of this LogActivityItem.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this LogActivityItem.

        Parent  # noqa: E501

        :param parent_id: The parent_id of this LogActivityItem.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def log_date(self):
        """Gets the log_date of this LogActivityItem.  # noqa: E501

        Log Date  # noqa: E501

        :return: The log_date of this LogActivityItem.  # noqa: E501
        :rtype: str
        """
        return self._log_date

    @log_date.setter
    def log_date(self, log_date):
        """Sets the log_date of this LogActivityItem.

        Log Date  # noqa: E501

        :param log_date: The log_date of this LogActivityItem.  # noqa: E501
        :type: str
        """

        self._log_date = log_date

    @property
    def machine(self):
        """Gets the machine of this LogActivityItem.  # noqa: E501

        Machine  # noqa: E501

        :return: The machine of this LogActivityItem.  # noqa: E501
        :rtype: str
        """
        return self._machine

    @machine.setter
    def machine(self, machine):
        """Sets the machine of this LogActivityItem.

        Machine  # noqa: E501

        :param machine: The machine of this LogActivityItem.  # noqa: E501
        :type: str
        """
        if machine is not None and len(machine) > 40:
            raise ValueError("Invalid value for `machine`, length must be less than or equal to `40`")  # noqa: E501

        self._machine = machine

    @property
    def user_name(self):
        """Gets the user_name of this LogActivityItem.  # noqa: E501

        User Name  # noqa: E501

        :return: The user_name of this LogActivityItem.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this LogActivityItem.

        User Name  # noqa: E501

        :param user_name: The user_name of this LogActivityItem.  # noqa: E501
        :type: str
        """
        if user_name is not None and len(user_name) > 30:
            raise ValueError("Invalid value for `user_name`, length must be less than or equal to `30`")  # noqa: E501

        self._user_name = user_name

    @property
    def log_activity_enum(self):
        """Gets the log_activity_enum of this LogActivityItem.  # noqa: E501

        Log Activity  # noqa: E501

        :return: The log_activity_enum of this LogActivityItem.  # noqa: E501
        :rtype: str
        """
        return self._log_activity_enum

    @log_activity_enum.setter
    def log_activity_enum(self, log_activity_enum):
        """Sets the log_activity_enum of this LogActivityItem.

        Log Activity  # noqa: E501

        :param log_activity_enum: The log_activity_enum of this LogActivityItem.  # noqa: E501
        :type: str
        """

        self._log_activity_enum = log_activity_enum

    @property
    def table_name(self):
        """Gets the table_name of this LogActivityItem.  # noqa: E501

        Table Name  # noqa: E501

        :return: The table_name of this LogActivityItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this LogActivityItem.

        Table Name  # noqa: E501

        :param table_name: The table_name of this LogActivityItem.  # noqa: E501
        :type: str
        """
        if table_name is not None and len(table_name) > 50:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `50`")  # noqa: E501

        self._table_name = table_name

    @property
    def table_id(self):
        """Gets the table_id of this LogActivityItem.  # noqa: E501

        Table  # noqa: E501

        :return: The table_id of this LogActivityItem.  # noqa: E501
        :rtype: int
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this LogActivityItem.

        Table  # noqa: E501

        :param table_id: The table_id of this LogActivityItem.  # noqa: E501
        :type: int
        """

        self._table_id = table_id

    @property
    def entry_id(self):
        """Gets the entry_id of this LogActivityItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this LogActivityItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this LogActivityItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this LogActivityItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def description(self):
        """Gets the description of this LogActivityItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this LogActivityItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LogActivityItem.

        Description  # noqa: E501

        :param description: The description of this LogActivityItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 5000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `5000`")  # noqa: E501

        self._description = description

    @property
    def date_modified(self):
        """Gets the date_modified of this LogActivityItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this LogActivityItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this LogActivityItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this LogActivityItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogActivityItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
