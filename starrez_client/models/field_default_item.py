# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FieldDefaultItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_default_id': 'int',
        'table_name': 'str',
        'field_name': 'str',
        'required': 'bool',
        'required_message': 'str',
        'enforce_unique': 'bool',
        'enforce_unique_message': 'str',
        'apply_default': 'bool',
        'value': 'str',
        'conditional': 'bool',
        'conditional_field_name': 'str',
        'conditional_value': 'str',
        'important': 'bool',
        'date_modified': 'str'
    }

    attribute_map = {
        'field_default_id': 'FieldDefaultID',
        'table_name': 'TableName',
        'field_name': 'FieldName',
        'required': 'Required',
        'required_message': 'RequiredMessage',
        'enforce_unique': 'EnforceUnique',
        'enforce_unique_message': 'EnforceUniqueMessage',
        'apply_default': 'ApplyDefault',
        'value': 'Value',
        'conditional': 'Conditional',
        'conditional_field_name': 'ConditionalFieldName',
        'conditional_value': 'ConditionalValue',
        'important': 'Important',
        'date_modified': 'DateModified'
    }

    def __init__(self, field_default_id=None, table_name=None, field_name=None, required=None, required_message=None, enforce_unique=None, enforce_unique_message=None, apply_default=None, value=None, conditional=None, conditional_field_name=None, conditional_value=None, important=None, date_modified=None):  # noqa: E501
        """FieldDefaultItem - a model defined in Swagger"""  # noqa: E501

        self._field_default_id = None
        self._table_name = None
        self._field_name = None
        self._required = None
        self._required_message = None
        self._enforce_unique = None
        self._enforce_unique_message = None
        self._apply_default = None
        self._value = None
        self._conditional = None
        self._conditional_field_name = None
        self._conditional_value = None
        self._important = None
        self._date_modified = None
        self.discriminator = None

        if field_default_id is not None:
            self.field_default_id = field_default_id
        if table_name is not None:
            self.table_name = table_name
        if field_name is not None:
            self.field_name = field_name
        if required is not None:
            self.required = required
        if required_message is not None:
            self.required_message = required_message
        if enforce_unique is not None:
            self.enforce_unique = enforce_unique
        if enforce_unique_message is not None:
            self.enforce_unique_message = enforce_unique_message
        if apply_default is not None:
            self.apply_default = apply_default
        if value is not None:
            self.value = value
        if conditional is not None:
            self.conditional = conditional
        if conditional_field_name is not None:
            self.conditional_field_name = conditional_field_name
        if conditional_value is not None:
            self.conditional_value = conditional_value
        if important is not None:
            self.important = important
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def field_default_id(self):
        """Gets the field_default_id of this FieldDefaultItem.  # noqa: E501

        Field Default  # noqa: E501

        :return: The field_default_id of this FieldDefaultItem.  # noqa: E501
        :rtype: int
        """
        return self._field_default_id

    @field_default_id.setter
    def field_default_id(self, field_default_id):
        """Sets the field_default_id of this FieldDefaultItem.

        Field Default  # noqa: E501

        :param field_default_id: The field_default_id of this FieldDefaultItem.  # noqa: E501
        :type: int
        """

        self._field_default_id = field_default_id

    @property
    def table_name(self):
        """Gets the table_name of this FieldDefaultItem.  # noqa: E501

        Table Name  # noqa: E501

        :return: The table_name of this FieldDefaultItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this FieldDefaultItem.

        Table Name  # noqa: E501

        :param table_name: The table_name of this FieldDefaultItem.  # noqa: E501
        :type: str
        """
        if table_name is not None and len(table_name) > 50:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `50`")  # noqa: E501

        self._table_name = table_name

    @property
    def field_name(self):
        """Gets the field_name of this FieldDefaultItem.  # noqa: E501

        Field Name  # noqa: E501

        :return: The field_name of this FieldDefaultItem.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this FieldDefaultItem.

        Field Name  # noqa: E501

        :param field_name: The field_name of this FieldDefaultItem.  # noqa: E501
        :type: str
        """
        if field_name is not None and len(field_name) > 50:
            raise ValueError("Invalid value for `field_name`, length must be less than or equal to `50`")  # noqa: E501

        self._field_name = field_name

    @property
    def required(self):
        """Gets the required of this FieldDefaultItem.  # noqa: E501

        Required  # noqa: E501

        :return: The required of this FieldDefaultItem.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this FieldDefaultItem.

        Required  # noqa: E501

        :param required: The required of this FieldDefaultItem.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def required_message(self):
        """Gets the required_message of this FieldDefaultItem.  # noqa: E501

        Required Message  # noqa: E501

        :return: The required_message of this FieldDefaultItem.  # noqa: E501
        :rtype: str
        """
        return self._required_message

    @required_message.setter
    def required_message(self, required_message):
        """Sets the required_message of this FieldDefaultItem.

        Required Message  # noqa: E501

        :param required_message: The required_message of this FieldDefaultItem.  # noqa: E501
        :type: str
        """
        if required_message is not None and len(required_message) > 150:
            raise ValueError("Invalid value for `required_message`, length must be less than or equal to `150`")  # noqa: E501

        self._required_message = required_message

    @property
    def enforce_unique(self):
        """Gets the enforce_unique of this FieldDefaultItem.  # noqa: E501

        Enforce Unique  # noqa: E501

        :return: The enforce_unique of this FieldDefaultItem.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_unique

    @enforce_unique.setter
    def enforce_unique(self, enforce_unique):
        """Sets the enforce_unique of this FieldDefaultItem.

        Enforce Unique  # noqa: E501

        :param enforce_unique: The enforce_unique of this FieldDefaultItem.  # noqa: E501
        :type: bool
        """

        self._enforce_unique = enforce_unique

    @property
    def enforce_unique_message(self):
        """Gets the enforce_unique_message of this FieldDefaultItem.  # noqa: E501

        Enforce Unique Message  # noqa: E501

        :return: The enforce_unique_message of this FieldDefaultItem.  # noqa: E501
        :rtype: str
        """
        return self._enforce_unique_message

    @enforce_unique_message.setter
    def enforce_unique_message(self, enforce_unique_message):
        """Sets the enforce_unique_message of this FieldDefaultItem.

        Enforce Unique Message  # noqa: E501

        :param enforce_unique_message: The enforce_unique_message of this FieldDefaultItem.  # noqa: E501
        :type: str
        """
        if enforce_unique_message is not None and len(enforce_unique_message) > 150:
            raise ValueError("Invalid value for `enforce_unique_message`, length must be less than or equal to `150`")  # noqa: E501

        self._enforce_unique_message = enforce_unique_message

    @property
    def apply_default(self):
        """Gets the apply_default of this FieldDefaultItem.  # noqa: E501

        Apply Default  # noqa: E501

        :return: The apply_default of this FieldDefaultItem.  # noqa: E501
        :rtype: bool
        """
        return self._apply_default

    @apply_default.setter
    def apply_default(self, apply_default):
        """Sets the apply_default of this FieldDefaultItem.

        Apply Default  # noqa: E501

        :param apply_default: The apply_default of this FieldDefaultItem.  # noqa: E501
        :type: bool
        """

        self._apply_default = apply_default

    @property
    def value(self):
        """Gets the value of this FieldDefaultItem.  # noqa: E501

        Value  # noqa: E501

        :return: The value of this FieldDefaultItem.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FieldDefaultItem.

        Value  # noqa: E501

        :param value: The value of this FieldDefaultItem.  # noqa: E501
        :type: str
        """
        if value is not None and len(value) > 50:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `50`")  # noqa: E501

        self._value = value

    @property
    def conditional(self):
        """Gets the conditional of this FieldDefaultItem.  # noqa: E501

        Conditional  # noqa: E501

        :return: The conditional of this FieldDefaultItem.  # noqa: E501
        :rtype: bool
        """
        return self._conditional

    @conditional.setter
    def conditional(self, conditional):
        """Sets the conditional of this FieldDefaultItem.

        Conditional  # noqa: E501

        :param conditional: The conditional of this FieldDefaultItem.  # noqa: E501
        :type: bool
        """

        self._conditional = conditional

    @property
    def conditional_field_name(self):
        """Gets the conditional_field_name of this FieldDefaultItem.  # noqa: E501

        Conditional Field Name  # noqa: E501

        :return: The conditional_field_name of this FieldDefaultItem.  # noqa: E501
        :rtype: str
        """
        return self._conditional_field_name

    @conditional_field_name.setter
    def conditional_field_name(self, conditional_field_name):
        """Sets the conditional_field_name of this FieldDefaultItem.

        Conditional Field Name  # noqa: E501

        :param conditional_field_name: The conditional_field_name of this FieldDefaultItem.  # noqa: E501
        :type: str
        """
        if conditional_field_name is not None and len(conditional_field_name) > 50:
            raise ValueError("Invalid value for `conditional_field_name`, length must be less than or equal to `50`")  # noqa: E501

        self._conditional_field_name = conditional_field_name

    @property
    def conditional_value(self):
        """Gets the conditional_value of this FieldDefaultItem.  # noqa: E501

        Conditional Value  # noqa: E501

        :return: The conditional_value of this FieldDefaultItem.  # noqa: E501
        :rtype: str
        """
        return self._conditional_value

    @conditional_value.setter
    def conditional_value(self, conditional_value):
        """Sets the conditional_value of this FieldDefaultItem.

        Conditional Value  # noqa: E501

        :param conditional_value: The conditional_value of this FieldDefaultItem.  # noqa: E501
        :type: str
        """
        if conditional_value is not None and len(conditional_value) > 50:
            raise ValueError("Invalid value for `conditional_value`, length must be less than or equal to `50`")  # noqa: E501

        self._conditional_value = conditional_value

    @property
    def important(self):
        """Gets the important of this FieldDefaultItem.  # noqa: E501

        Important  # noqa: E501

        :return: The important of this FieldDefaultItem.  # noqa: E501
        :rtype: bool
        """
        return self._important

    @important.setter
    def important(self, important):
        """Sets the important of this FieldDefaultItem.

        Important  # noqa: E501

        :param important: The important of this FieldDefaultItem.  # noqa: E501
        :type: bool
        """

        self._important = important

    @property
    def date_modified(self):
        """Gets the date_modified of this FieldDefaultItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this FieldDefaultItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this FieldDefaultItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this FieldDefaultItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldDefaultItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
