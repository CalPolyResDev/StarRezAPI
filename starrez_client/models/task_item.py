# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TaskItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_id': 'int',
        'security_user_id': 'int',
        'assigned_security_user_id': 'int',
        'description': 'str',
        'date_start': 'str',
        'date_due': 'str',
        'date_complete': 'str',
        'date_remind': 'str',
        'date_snoozed_to': 'str',
        'table_name': 'str',
        'table_id': 'int',
        'task_status_id': 'int',
        'task_type_id': 'int',
        'priority_id': 'int',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'task_id': 'TaskID',
        'security_user_id': 'SecurityUserID',
        'assigned_security_user_id': 'Assigned_SecurityUserID',
        'description': 'Description',
        'date_start': 'DateStart',
        'date_due': 'DateDue',
        'date_complete': 'DateComplete',
        'date_remind': 'DateRemind',
        'date_snoozed_to': 'DateSnoozedTo',
        'table_name': 'TableName',
        'table_id': 'TableID',
        'task_status_id': 'TaskStatusID',
        'task_type_id': 'TaskTypeID',
        'priority_id': 'PriorityID',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, task_id=None, security_user_id=None, assigned_security_user_id=None, description=None, date_start=None, date_due=None, date_complete=None, date_remind=None, date_snoozed_to=None, table_name=None, table_id=None, task_status_id=None, task_type_id=None, priority_id=None, comments=None, date_modified=None):  # noqa: E501
        """TaskItem - a model defined in Swagger"""  # noqa: E501

        self._task_id = None
        self._security_user_id = None
        self._assigned_security_user_id = None
        self._description = None
        self._date_start = None
        self._date_due = None
        self._date_complete = None
        self._date_remind = None
        self._date_snoozed_to = None
        self._table_name = None
        self._table_id = None
        self._task_status_id = None
        self._task_type_id = None
        self._priority_id = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if task_id is not None:
            self.task_id = task_id
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if assigned_security_user_id is not None:
            self.assigned_security_user_id = assigned_security_user_id
        if description is not None:
            self.description = description
        if date_start is not None:
            self.date_start = date_start
        if date_due is not None:
            self.date_due = date_due
        if date_complete is not None:
            self.date_complete = date_complete
        if date_remind is not None:
            self.date_remind = date_remind
        if date_snoozed_to is not None:
            self.date_snoozed_to = date_snoozed_to
        if table_name is not None:
            self.table_name = table_name
        if table_id is not None:
            self.table_id = table_id
        if task_status_id is not None:
            self.task_status_id = task_status_id
        if task_type_id is not None:
            self.task_type_id = task_type_id
        if priority_id is not None:
            self.priority_id = priority_id
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def task_id(self):
        """Gets the task_id of this TaskItem.  # noqa: E501

        Task  # noqa: E501

        :return: The task_id of this TaskItem.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskItem.

        Task  # noqa: E501

        :param task_id: The task_id of this TaskItem.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def security_user_id(self):
        """Gets the security_user_id of this TaskItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this TaskItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this TaskItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this TaskItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def assigned_security_user_id(self):
        """Gets the assigned_security_user_id of this TaskItem.  # noqa: E501

        Assigned Security User  # noqa: E501

        :return: The assigned_security_user_id of this TaskItem.  # noqa: E501
        :rtype: int
        """
        return self._assigned_security_user_id

    @assigned_security_user_id.setter
    def assigned_security_user_id(self, assigned_security_user_id):
        """Sets the assigned_security_user_id of this TaskItem.

        Assigned Security User  # noqa: E501

        :param assigned_security_user_id: The assigned_security_user_id of this TaskItem.  # noqa: E501
        :type: int
        """

        self._assigned_security_user_id = assigned_security_user_id

    @property
    def description(self):
        """Gets the description of this TaskItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this TaskItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskItem.

        Description  # noqa: E501

        :param description: The description of this TaskItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501

        self._description = description

    @property
    def date_start(self):
        """Gets the date_start of this TaskItem.  # noqa: E501

        Date Start  # noqa: E501

        :return: The date_start of this TaskItem.  # noqa: E501
        :rtype: str
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this TaskItem.

        Date Start  # noqa: E501

        :param date_start: The date_start of this TaskItem.  # noqa: E501
        :type: str
        """

        self._date_start = date_start

    @property
    def date_due(self):
        """Gets the date_due of this TaskItem.  # noqa: E501

        Date Due  # noqa: E501

        :return: The date_due of this TaskItem.  # noqa: E501
        :rtype: str
        """
        return self._date_due

    @date_due.setter
    def date_due(self, date_due):
        """Sets the date_due of this TaskItem.

        Date Due  # noqa: E501

        :param date_due: The date_due of this TaskItem.  # noqa: E501
        :type: str
        """

        self._date_due = date_due

    @property
    def date_complete(self):
        """Gets the date_complete of this TaskItem.  # noqa: E501

        Date Complete  # noqa: E501

        :return: The date_complete of this TaskItem.  # noqa: E501
        :rtype: str
        """
        return self._date_complete

    @date_complete.setter
    def date_complete(self, date_complete):
        """Sets the date_complete of this TaskItem.

        Date Complete  # noqa: E501

        :param date_complete: The date_complete of this TaskItem.  # noqa: E501
        :type: str
        """

        self._date_complete = date_complete

    @property
    def date_remind(self):
        """Gets the date_remind of this TaskItem.  # noqa: E501

        Date Remind  # noqa: E501

        :return: The date_remind of this TaskItem.  # noqa: E501
        :rtype: str
        """
        return self._date_remind

    @date_remind.setter
    def date_remind(self, date_remind):
        """Sets the date_remind of this TaskItem.

        Date Remind  # noqa: E501

        :param date_remind: The date_remind of this TaskItem.  # noqa: E501
        :type: str
        """

        self._date_remind = date_remind

    @property
    def date_snoozed_to(self):
        """Gets the date_snoozed_to of this TaskItem.  # noqa: E501

        Date Snoozed To  # noqa: E501

        :return: The date_snoozed_to of this TaskItem.  # noqa: E501
        :rtype: str
        """
        return self._date_snoozed_to

    @date_snoozed_to.setter
    def date_snoozed_to(self, date_snoozed_to):
        """Sets the date_snoozed_to of this TaskItem.

        Date Snoozed To  # noqa: E501

        :param date_snoozed_to: The date_snoozed_to of this TaskItem.  # noqa: E501
        :type: str
        """

        self._date_snoozed_to = date_snoozed_to

    @property
    def table_name(self):
        """Gets the table_name of this TaskItem.  # noqa: E501

        Table Name  # noqa: E501

        :return: The table_name of this TaskItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this TaskItem.

        Table Name  # noqa: E501

        :param table_name: The table_name of this TaskItem.  # noqa: E501
        :type: str
        """
        if table_name is not None and len(table_name) > 100:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `100`")  # noqa: E501

        self._table_name = table_name

    @property
    def table_id(self):
        """Gets the table_id of this TaskItem.  # noqa: E501

        Table  # noqa: E501

        :return: The table_id of this TaskItem.  # noqa: E501
        :rtype: int
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this TaskItem.

        Table  # noqa: E501

        :param table_id: The table_id of this TaskItem.  # noqa: E501
        :type: int
        """

        self._table_id = table_id

    @property
    def task_status_id(self):
        """Gets the task_status_id of this TaskItem.  # noqa: E501

        Task Status  # noqa: E501

        :return: The task_status_id of this TaskItem.  # noqa: E501
        :rtype: int
        """
        return self._task_status_id

    @task_status_id.setter
    def task_status_id(self, task_status_id):
        """Sets the task_status_id of this TaskItem.

        Task Status  # noqa: E501

        :param task_status_id: The task_status_id of this TaskItem.  # noqa: E501
        :type: int
        """

        self._task_status_id = task_status_id

    @property
    def task_type_id(self):
        """Gets the task_type_id of this TaskItem.  # noqa: E501

        Task Type  # noqa: E501

        :return: The task_type_id of this TaskItem.  # noqa: E501
        :rtype: int
        """
        return self._task_type_id

    @task_type_id.setter
    def task_type_id(self, task_type_id):
        """Sets the task_type_id of this TaskItem.

        Task Type  # noqa: E501

        :param task_type_id: The task_type_id of this TaskItem.  # noqa: E501
        :type: int
        """

        self._task_type_id = task_type_id

    @property
    def priority_id(self):
        """Gets the priority_id of this TaskItem.  # noqa: E501

        Priority  # noqa: E501

        :return: The priority_id of this TaskItem.  # noqa: E501
        :rtype: int
        """
        return self._priority_id

    @priority_id.setter
    def priority_id(self, priority_id):
        """Sets the priority_id of this TaskItem.

        Priority  # noqa: E501

        :param priority_id: The priority_id of this TaskItem.  # noqa: E501
        :type: int
        """

        self._priority_id = priority_id

    @property
    def comments(self):
        """Gets the comments of this TaskItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this TaskItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TaskItem.

        Comments  # noqa: E501

        :param comments: The comments of this TaskItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 5000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `5000`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this TaskItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this TaskItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this TaskItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this TaskItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
