# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportDetailItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_detail_id': 'int',
        'report_id': 'int',
        'parent_id': 'int',
        'report_name': 'str',
        'report_name_extra': 'str',
        'sub_report_link_field': 'str',
        'sub_report_link_base_field': 'str',
        'report_layout_object': 'str',
        'report_data_source_object': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'report_detail_id': 'ReportDetailID',
        'report_id': 'ReportID',
        'parent_id': 'ParentID',
        'report_name': 'ReportName',
        'report_name_extra': 'ReportNameExtra',
        'sub_report_link_field': 'SubReportLinkField',
        'sub_report_link_base_field': 'SubReportLinkBaseField',
        'report_layout_object': 'ReportLayoutObject',
        'report_data_source_object': 'ReportDataSourceObject',
        'date_modified': 'DateModified'
    }

    def __init__(self, report_detail_id=None, report_id=None, parent_id=None, report_name=None, report_name_extra=None, sub_report_link_field=None, sub_report_link_base_field=None, report_layout_object=None, report_data_source_object=None, date_modified=None):  # noqa: E501
        """ReportDetailItem - a model defined in Swagger"""  # noqa: E501

        self._report_detail_id = None
        self._report_id = None
        self._parent_id = None
        self._report_name = None
        self._report_name_extra = None
        self._sub_report_link_field = None
        self._sub_report_link_base_field = None
        self._report_layout_object = None
        self._report_data_source_object = None
        self._date_modified = None
        self.discriminator = None

        if report_detail_id is not None:
            self.report_detail_id = report_detail_id
        if report_id is not None:
            self.report_id = report_id
        if parent_id is not None:
            self.parent_id = parent_id
        if report_name is not None:
            self.report_name = report_name
        if report_name_extra is not None:
            self.report_name_extra = report_name_extra
        if sub_report_link_field is not None:
            self.sub_report_link_field = sub_report_link_field
        if sub_report_link_base_field is not None:
            self.sub_report_link_base_field = sub_report_link_base_field
        if report_layout_object is not None:
            self.report_layout_object = report_layout_object
        if report_data_source_object is not None:
            self.report_data_source_object = report_data_source_object
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def report_detail_id(self):
        """Gets the report_detail_id of this ReportDetailItem.  # noqa: E501

        Report Detail  # noqa: E501

        :return: The report_detail_id of this ReportDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._report_detail_id

    @report_detail_id.setter
    def report_detail_id(self, report_detail_id):
        """Sets the report_detail_id of this ReportDetailItem.

        Report Detail  # noqa: E501

        :param report_detail_id: The report_detail_id of this ReportDetailItem.  # noqa: E501
        :type: int
        """

        self._report_detail_id = report_detail_id

    @property
    def report_id(self):
        """Gets the report_id of this ReportDetailItem.  # noqa: E501

        Report  # noqa: E501

        :return: The report_id of this ReportDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this ReportDetailItem.

        Report  # noqa: E501

        :param report_id: The report_id of this ReportDetailItem.  # noqa: E501
        :type: int
        """

        self._report_id = report_id

    @property
    def parent_id(self):
        """Gets the parent_id of this ReportDetailItem.  # noqa: E501

        Parent  # noqa: E501

        :return: The parent_id of this ReportDetailItem.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ReportDetailItem.

        Parent  # noqa: E501

        :param parent_id: The parent_id of this ReportDetailItem.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def report_name(self):
        """Gets the report_name of this ReportDetailItem.  # noqa: E501

        Report Name  # noqa: E501

        :return: The report_name of this ReportDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this ReportDetailItem.

        Report Name  # noqa: E501

        :param report_name: The report_name of this ReportDetailItem.  # noqa: E501
        :type: str
        """
        if report_name is not None and len(report_name) > 255:
            raise ValueError("Invalid value for `report_name`, length must be less than or equal to `255`")  # noqa: E501

        self._report_name = report_name

    @property
    def report_name_extra(self):
        """Gets the report_name_extra of this ReportDetailItem.  # noqa: E501

        Report Name Extra  # noqa: E501

        :return: The report_name_extra of this ReportDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._report_name_extra

    @report_name_extra.setter
    def report_name_extra(self, report_name_extra):
        """Sets the report_name_extra of this ReportDetailItem.

        Report Name Extra  # noqa: E501

        :param report_name_extra: The report_name_extra of this ReportDetailItem.  # noqa: E501
        :type: str
        """
        if report_name_extra is not None and len(report_name_extra) > 255:
            raise ValueError("Invalid value for `report_name_extra`, length must be less than or equal to `255`")  # noqa: E501

        self._report_name_extra = report_name_extra

    @property
    def sub_report_link_field(self):
        """Gets the sub_report_link_field of this ReportDetailItem.  # noqa: E501

        Sub Report Link Field  # noqa: E501

        :return: The sub_report_link_field of this ReportDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._sub_report_link_field

    @sub_report_link_field.setter
    def sub_report_link_field(self, sub_report_link_field):
        """Sets the sub_report_link_field of this ReportDetailItem.

        Sub Report Link Field  # noqa: E501

        :param sub_report_link_field: The sub_report_link_field of this ReportDetailItem.  # noqa: E501
        :type: str
        """
        if sub_report_link_field is not None and len(sub_report_link_field) > 255:
            raise ValueError("Invalid value for `sub_report_link_field`, length must be less than or equal to `255`")  # noqa: E501

        self._sub_report_link_field = sub_report_link_field

    @property
    def sub_report_link_base_field(self):
        """Gets the sub_report_link_base_field of this ReportDetailItem.  # noqa: E501

        Sub Report Link Base Field  # noqa: E501

        :return: The sub_report_link_base_field of this ReportDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._sub_report_link_base_field

    @sub_report_link_base_field.setter
    def sub_report_link_base_field(self, sub_report_link_base_field):
        """Sets the sub_report_link_base_field of this ReportDetailItem.

        Sub Report Link Base Field  # noqa: E501

        :param sub_report_link_base_field: The sub_report_link_base_field of this ReportDetailItem.  # noqa: E501
        :type: str
        """
        if sub_report_link_base_field is not None and len(sub_report_link_base_field) > 255:
            raise ValueError("Invalid value for `sub_report_link_base_field`, length must be less than or equal to `255`")  # noqa: E501

        self._sub_report_link_base_field = sub_report_link_base_field

    @property
    def report_layout_object(self):
        """Gets the report_layout_object of this ReportDetailItem.  # noqa: E501

        Report Layout Object  # noqa: E501

        :return: The report_layout_object of this ReportDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._report_layout_object

    @report_layout_object.setter
    def report_layout_object(self, report_layout_object):
        """Sets the report_layout_object of this ReportDetailItem.

        Report Layout Object  # noqa: E501

        :param report_layout_object: The report_layout_object of this ReportDetailItem.  # noqa: E501
        :type: str
        """

        self._report_layout_object = report_layout_object

    @property
    def report_data_source_object(self):
        """Gets the report_data_source_object of this ReportDetailItem.  # noqa: E501

        Report Data Source Object  # noqa: E501

        :return: The report_data_source_object of this ReportDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._report_data_source_object

    @report_data_source_object.setter
    def report_data_source_object(self, report_data_source_object):
        """Sets the report_data_source_object of this ReportDetailItem.

        Report Data Source Object  # noqa: E501

        :param report_data_source_object: The report_data_source_object of this ReportDetailItem.  # noqa: E501
        :type: str
        """

        self._report_data_source_object = report_data_source_object

    @property
    def date_modified(self):
        """Gets the date_modified of this ReportDetailItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this ReportDetailItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ReportDetailItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this ReportDetailItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportDetailItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
