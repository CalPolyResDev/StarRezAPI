# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SchoolItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'school_id': 'int',
        'description': 'str',
        'school_type': 'str',
        'location': 'str',
        'geographic_location': 'str',
        'comments': 'str',
        'contact_name': 'str',
        'street': 'str',
        'street2': 'str',
        'city': 'str',
        'country_id': 'int',
        'state_province': 'str',
        'zip_postcode': 'str',
        'phone': 'str',
        'phone_mobile_cell': 'str',
        'phone_other': 'str',
        'phone_other2': 'str',
        'email': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'school_id': 'SchoolID',
        'description': 'Description',
        'school_type': 'SchoolType',
        'location': 'Location',
        'geographic_location': 'GeographicLocation',
        'comments': 'Comments',
        'contact_name': 'ContactName',
        'street': 'Street',
        'street2': 'Street2',
        'city': 'City',
        'country_id': 'CountryID',
        'state_province': 'StateProvince',
        'zip_postcode': 'ZipPostcode',
        'phone': 'Phone',
        'phone_mobile_cell': 'PhoneMobileCell',
        'phone_other': 'PhoneOther',
        'phone_other2': 'PhoneOther2',
        'email': 'Email',
        'date_modified': 'DateModified'
    }

    def __init__(self, school_id=None, description=None, school_type=None, location=None, geographic_location=None, comments=None, contact_name=None, street=None, street2=None, city=None, country_id=None, state_province=None, zip_postcode=None, phone=None, phone_mobile_cell=None, phone_other=None, phone_other2=None, email=None, date_modified=None):  # noqa: E501
        """SchoolItem - a model defined in Swagger"""  # noqa: E501

        self._school_id = None
        self._description = None
        self._school_type = None
        self._location = None
        self._geographic_location = None
        self._comments = None
        self._contact_name = None
        self._street = None
        self._street2 = None
        self._city = None
        self._country_id = None
        self._state_province = None
        self._zip_postcode = None
        self._phone = None
        self._phone_mobile_cell = None
        self._phone_other = None
        self._phone_other2 = None
        self._email = None
        self._date_modified = None
        self.discriminator = None

        if school_id is not None:
            self.school_id = school_id
        if description is not None:
            self.description = description
        if school_type is not None:
            self.school_type = school_type
        if location is not None:
            self.location = location
        if geographic_location is not None:
            self.geographic_location = geographic_location
        if comments is not None:
            self.comments = comments
        if contact_name is not None:
            self.contact_name = contact_name
        if street is not None:
            self.street = street
        if street2 is not None:
            self.street2 = street2
        if city is not None:
            self.city = city
        if country_id is not None:
            self.country_id = country_id
        if state_province is not None:
            self.state_province = state_province
        if zip_postcode is not None:
            self.zip_postcode = zip_postcode
        if phone is not None:
            self.phone = phone
        if phone_mobile_cell is not None:
            self.phone_mobile_cell = phone_mobile_cell
        if phone_other is not None:
            self.phone_other = phone_other
        if phone_other2 is not None:
            self.phone_other2 = phone_other2
        if email is not None:
            self.email = email
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def school_id(self):
        """Gets the school_id of this SchoolItem.  # noqa: E501

        School  # noqa: E501

        :return: The school_id of this SchoolItem.  # noqa: E501
        :rtype: int
        """
        return self._school_id

    @school_id.setter
    def school_id(self, school_id):
        """Sets the school_id of this SchoolItem.

        School  # noqa: E501

        :param school_id: The school_id of this SchoolItem.  # noqa: E501
        :type: int
        """

        self._school_id = school_id

    @property
    def description(self):
        """Gets the description of this SchoolItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SchoolItem.

        Description  # noqa: E501

        :param description: The description of this SchoolItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 50:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `50`")  # noqa: E501

        self._description = description

    @property
    def school_type(self):
        """Gets the school_type of this SchoolItem.  # noqa: E501

        School Type  # noqa: E501

        :return: The school_type of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._school_type

    @school_type.setter
    def school_type(self, school_type):
        """Sets the school_type of this SchoolItem.

        School Type  # noqa: E501

        :param school_type: The school_type of this SchoolItem.  # noqa: E501
        :type: str
        """
        if school_type is not None and len(school_type) > 50:
            raise ValueError("Invalid value for `school_type`, length must be less than or equal to `50`")  # noqa: E501

        self._school_type = school_type

    @property
    def location(self):
        """Gets the location of this SchoolItem.  # noqa: E501

        Location  # noqa: E501

        :return: The location of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SchoolItem.

        Location  # noqa: E501

        :param location: The location of this SchoolItem.  # noqa: E501
        :type: str
        """
        if location is not None and len(location) > 50:
            raise ValueError("Invalid value for `location`, length must be less than or equal to `50`")  # noqa: E501

        self._location = location

    @property
    def geographic_location(self):
        """Gets the geographic_location of this SchoolItem.  # noqa: E501

        Geographic Location  # noqa: E501

        :return: The geographic_location of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._geographic_location

    @geographic_location.setter
    def geographic_location(self, geographic_location):
        """Sets the geographic_location of this SchoolItem.

        Geographic Location  # noqa: E501

        :param geographic_location: The geographic_location of this SchoolItem.  # noqa: E501
        :type: str
        """
        if geographic_location is not None and len(geographic_location) > 50:
            raise ValueError("Invalid value for `geographic_location`, length must be less than or equal to `50`")  # noqa: E501

        self._geographic_location = geographic_location

    @property
    def comments(self):
        """Gets the comments of this SchoolItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this SchoolItem.

        Comments  # noqa: E501

        :param comments: The comments of this SchoolItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 200:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `200`")  # noqa: E501

        self._comments = comments

    @property
    def contact_name(self):
        """Gets the contact_name of this SchoolItem.  # noqa: E501

        Contact Name  # noqa: E501

        :return: The contact_name of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this SchoolItem.

        Contact Name  # noqa: E501

        :param contact_name: The contact_name of this SchoolItem.  # noqa: E501
        :type: str
        """
        if contact_name is not None and len(contact_name) > 50:
            raise ValueError("Invalid value for `contact_name`, length must be less than or equal to `50`")  # noqa: E501

        self._contact_name = contact_name

    @property
    def street(self):
        """Gets the street of this SchoolItem.  # noqa: E501

        Street  # noqa: E501

        :return: The street of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this SchoolItem.

        Street  # noqa: E501

        :param street: The street of this SchoolItem.  # noqa: E501
        :type: str
        """
        if street is not None and len(street) > 80:
            raise ValueError("Invalid value for `street`, length must be less than or equal to `80`")  # noqa: E501

        self._street = street

    @property
    def street2(self):
        """Gets the street2 of this SchoolItem.  # noqa: E501

        Street 2  # noqa: E501

        :return: The street2 of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this SchoolItem.

        Street 2  # noqa: E501

        :param street2: The street2 of this SchoolItem.  # noqa: E501
        :type: str
        """
        if street2 is not None and len(street2) > 80:
            raise ValueError("Invalid value for `street2`, length must be less than or equal to `80`")  # noqa: E501

        self._street2 = street2

    @property
    def city(self):
        """Gets the city of this SchoolItem.  # noqa: E501

        City  # noqa: E501

        :return: The city of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this SchoolItem.

        City  # noqa: E501

        :param city: The city of this SchoolItem.  # noqa: E501
        :type: str
        """
        if city is not None and len(city) > 60:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `60`")  # noqa: E501

        self._city = city

    @property
    def country_id(self):
        """Gets the country_id of this SchoolItem.  # noqa: E501

        Country  # noqa: E501

        :return: The country_id of this SchoolItem.  # noqa: E501
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this SchoolItem.

        Country  # noqa: E501

        :param country_id: The country_id of this SchoolItem.  # noqa: E501
        :type: int
        """

        self._country_id = country_id

    @property
    def state_province(self):
        """Gets the state_province of this SchoolItem.  # noqa: E501

        State Province  # noqa: E501

        :return: The state_province of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._state_province

    @state_province.setter
    def state_province(self, state_province):
        """Sets the state_province of this SchoolItem.

        State Province  # noqa: E501

        :param state_province: The state_province of this SchoolItem.  # noqa: E501
        :type: str
        """
        if state_province is not None and len(state_province) > 60:
            raise ValueError("Invalid value for `state_province`, length must be less than or equal to `60`")  # noqa: E501

        self._state_province = state_province

    @property
    def zip_postcode(self):
        """Gets the zip_postcode of this SchoolItem.  # noqa: E501

        Zip Postcode  # noqa: E501

        :return: The zip_postcode of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._zip_postcode

    @zip_postcode.setter
    def zip_postcode(self, zip_postcode):
        """Sets the zip_postcode of this SchoolItem.

        Zip Postcode  # noqa: E501

        :param zip_postcode: The zip_postcode of this SchoolItem.  # noqa: E501
        :type: str
        """
        if zip_postcode is not None and len(zip_postcode) > 15:
            raise ValueError("Invalid value for `zip_postcode`, length must be less than or equal to `15`")  # noqa: E501

        self._zip_postcode = zip_postcode

    @property
    def phone(self):
        """Gets the phone of this SchoolItem.  # noqa: E501

        Phone  # noqa: E501

        :return: The phone of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this SchoolItem.

        Phone  # noqa: E501

        :param phone: The phone of this SchoolItem.  # noqa: E501
        :type: str
        """
        if phone is not None and len(phone) > 25:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `25`")  # noqa: E501

        self._phone = phone

    @property
    def phone_mobile_cell(self):
        """Gets the phone_mobile_cell of this SchoolItem.  # noqa: E501

        Phone Mobile Cell  # noqa: E501

        :return: The phone_mobile_cell of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._phone_mobile_cell

    @phone_mobile_cell.setter
    def phone_mobile_cell(self, phone_mobile_cell):
        """Sets the phone_mobile_cell of this SchoolItem.

        Phone Mobile Cell  # noqa: E501

        :param phone_mobile_cell: The phone_mobile_cell of this SchoolItem.  # noqa: E501
        :type: str
        """
        if phone_mobile_cell is not None and len(phone_mobile_cell) > 25:
            raise ValueError("Invalid value for `phone_mobile_cell`, length must be less than or equal to `25`")  # noqa: E501

        self._phone_mobile_cell = phone_mobile_cell

    @property
    def phone_other(self):
        """Gets the phone_other of this SchoolItem.  # noqa: E501

        Phone Other  # noqa: E501

        :return: The phone_other of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._phone_other

    @phone_other.setter
    def phone_other(self, phone_other):
        """Sets the phone_other of this SchoolItem.

        Phone Other  # noqa: E501

        :param phone_other: The phone_other of this SchoolItem.  # noqa: E501
        :type: str
        """
        if phone_other is not None and len(phone_other) > 25:
            raise ValueError("Invalid value for `phone_other`, length must be less than or equal to `25`")  # noqa: E501

        self._phone_other = phone_other

    @property
    def phone_other2(self):
        """Gets the phone_other2 of this SchoolItem.  # noqa: E501

        Phone Other 2  # noqa: E501

        :return: The phone_other2 of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._phone_other2

    @phone_other2.setter
    def phone_other2(self, phone_other2):
        """Sets the phone_other2 of this SchoolItem.

        Phone Other 2  # noqa: E501

        :param phone_other2: The phone_other2 of this SchoolItem.  # noqa: E501
        :type: str
        """
        if phone_other2 is not None and len(phone_other2) > 25:
            raise ValueError("Invalid value for `phone_other2`, length must be less than or equal to `25`")  # noqa: E501

        self._phone_other2 = phone_other2

    @property
    def email(self):
        """Gets the email of this SchoolItem.  # noqa: E501

        Email  # noqa: E501

        :return: The email of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SchoolItem.

        Email  # noqa: E501

        :param email: The email of this SchoolItem.  # noqa: E501
        :type: str
        """
        if email is not None and len(email) > 100:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `100`")  # noqa: E501

        self._email = email

    @property
    def date_modified(self):
        """Gets the date_modified of this SchoolItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this SchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this SchoolItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this SchoolItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchoolItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
