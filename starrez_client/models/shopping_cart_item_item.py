# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ShoppingCartItemItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shopping_cart_item_id': 'int',
        'charge_item_id': 'int',
        'description': 'str',
        'comments': 'str',
        'max_quantity': 'int',
        'amount': 'str',
        'amount_cost': 'str',
        'table_id': 'int',
        'table_name': 'str',
        'view_on_web': 'bool',
        'web_image_location': 'str',
        'sort_order': 'int',
        'active_date_start': 'str',
        'active_date_end': 'str',
        'max_items_per_entry': 'int',
        'transaction_template_id': 'int',
        'record_type_enum': 'str',
        'custom_bit1': 'bool',
        'custom_bit2': 'bool',
        'custom_string1': 'str',
        'custom_string2': 'str',
        'custom_string3': 'str',
        'custom_string4': 'str',
        'custom_string5': 'str',
        'custom_string6': 'str',
        'custom_date1': 'str',
        'custom_date2': 'str',
        'security_user_id': 'int',
        'created_by_security_user_id': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'shopping_cart_item_id': 'ShoppingCartItemID',
        'charge_item_id': 'ChargeItemID',
        'description': 'Description',
        'comments': 'Comments',
        'max_quantity': 'MaxQuantity',
        'amount': 'Amount',
        'amount_cost': 'AmountCost',
        'table_id': 'TableID',
        'table_name': 'TableName',
        'view_on_web': 'ViewOnWeb',
        'web_image_location': 'WebImageLocation',
        'sort_order': 'SortOrder',
        'active_date_start': 'ActiveDateStart',
        'active_date_end': 'ActiveDateEnd',
        'max_items_per_entry': 'MaxItemsPerEntry',
        'transaction_template_id': 'TransactionTemplateID',
        'record_type_enum': 'RecordTypeEnum',
        'custom_bit1': 'CustomBit1',
        'custom_bit2': 'CustomBit2',
        'custom_string1': 'CustomString1',
        'custom_string2': 'CustomString2',
        'custom_string3': 'CustomString3',
        'custom_string4': 'CustomString4',
        'custom_string5': 'CustomString5',
        'custom_string6': 'CustomString6',
        'custom_date1': 'CustomDate1',
        'custom_date2': 'CustomDate2',
        'security_user_id': 'SecurityUserID',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, shopping_cart_item_id=None, charge_item_id=None, description=None, comments=None, max_quantity=None, amount=None, amount_cost=None, table_id=None, table_name=None, view_on_web=None, web_image_location=None, sort_order=None, active_date_start=None, active_date_end=None, max_items_per_entry=None, transaction_template_id=None, record_type_enum=None, custom_bit1=None, custom_bit2=None, custom_string1=None, custom_string2=None, custom_string3=None, custom_string4=None, custom_string5=None, custom_string6=None, custom_date1=None, custom_date2=None, security_user_id=None, created_by_security_user_id=None, date_created=None, date_modified=None):  # noqa: E501
        """ShoppingCartItemItem - a model defined in Swagger"""  # noqa: E501

        self._shopping_cart_item_id = None
        self._charge_item_id = None
        self._description = None
        self._comments = None
        self._max_quantity = None
        self._amount = None
        self._amount_cost = None
        self._table_id = None
        self._table_name = None
        self._view_on_web = None
        self._web_image_location = None
        self._sort_order = None
        self._active_date_start = None
        self._active_date_end = None
        self._max_items_per_entry = None
        self._transaction_template_id = None
        self._record_type_enum = None
        self._custom_bit1 = None
        self._custom_bit2 = None
        self._custom_string1 = None
        self._custom_string2 = None
        self._custom_string3 = None
        self._custom_string4 = None
        self._custom_string5 = None
        self._custom_string6 = None
        self._custom_date1 = None
        self._custom_date2 = None
        self._security_user_id = None
        self._created_by_security_user_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if shopping_cart_item_id is not None:
            self.shopping_cart_item_id = shopping_cart_item_id
        if charge_item_id is not None:
            self.charge_item_id = charge_item_id
        if description is not None:
            self.description = description
        if comments is not None:
            self.comments = comments
        if max_quantity is not None:
            self.max_quantity = max_quantity
        if amount is not None:
            self.amount = amount
        if amount_cost is not None:
            self.amount_cost = amount_cost
        if table_id is not None:
            self.table_id = table_id
        if table_name is not None:
            self.table_name = table_name
        if view_on_web is not None:
            self.view_on_web = view_on_web
        if web_image_location is not None:
            self.web_image_location = web_image_location
        if sort_order is not None:
            self.sort_order = sort_order
        if active_date_start is not None:
            self.active_date_start = active_date_start
        if active_date_end is not None:
            self.active_date_end = active_date_end
        if max_items_per_entry is not None:
            self.max_items_per_entry = max_items_per_entry
        if transaction_template_id is not None:
            self.transaction_template_id = transaction_template_id
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if custom_bit1 is not None:
            self.custom_bit1 = custom_bit1
        if custom_bit2 is not None:
            self.custom_bit2 = custom_bit2
        if custom_string1 is not None:
            self.custom_string1 = custom_string1
        if custom_string2 is not None:
            self.custom_string2 = custom_string2
        if custom_string3 is not None:
            self.custom_string3 = custom_string3
        if custom_string4 is not None:
            self.custom_string4 = custom_string4
        if custom_string5 is not None:
            self.custom_string5 = custom_string5
        if custom_string6 is not None:
            self.custom_string6 = custom_string6
        if custom_date1 is not None:
            self.custom_date1 = custom_date1
        if custom_date2 is not None:
            self.custom_date2 = custom_date2
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def shopping_cart_item_id(self):
        """Gets the shopping_cart_item_id of this ShoppingCartItemItem.  # noqa: E501

        Shopping Cart Item  # noqa: E501

        :return: The shopping_cart_item_id of this ShoppingCartItemItem.  # noqa: E501
        :rtype: int
        """
        return self._shopping_cart_item_id

    @shopping_cart_item_id.setter
    def shopping_cart_item_id(self, shopping_cart_item_id):
        """Sets the shopping_cart_item_id of this ShoppingCartItemItem.

        Shopping Cart Item  # noqa: E501

        :param shopping_cart_item_id: The shopping_cart_item_id of this ShoppingCartItemItem.  # noqa: E501
        :type: int
        """

        self._shopping_cart_item_id = shopping_cart_item_id

    @property
    def charge_item_id(self):
        """Gets the charge_item_id of this ShoppingCartItemItem.  # noqa: E501

        Charge Item  # noqa: E501

        :return: The charge_item_id of this ShoppingCartItemItem.  # noqa: E501
        :rtype: int
        """
        return self._charge_item_id

    @charge_item_id.setter
    def charge_item_id(self, charge_item_id):
        """Sets the charge_item_id of this ShoppingCartItemItem.

        Charge Item  # noqa: E501

        :param charge_item_id: The charge_item_id of this ShoppingCartItemItem.  # noqa: E501
        :type: int
        """

        self._charge_item_id = charge_item_id

    @property
    def description(self):
        """Gets the description of this ShoppingCartItemItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ShoppingCartItemItem.

        Description  # noqa: E501

        :param description: The description of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def comments(self):
        """Gets the comments of this ShoppingCartItemItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ShoppingCartItemItem.

        Comments  # noqa: E501

        :param comments: The comments of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 5000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `5000`")  # noqa: E501

        self._comments = comments

    @property
    def max_quantity(self):
        """Gets the max_quantity of this ShoppingCartItemItem.  # noqa: E501

        Max Quantity  # noqa: E501

        :return: The max_quantity of this ShoppingCartItemItem.  # noqa: E501
        :rtype: int
        """
        return self._max_quantity

    @max_quantity.setter
    def max_quantity(self, max_quantity):
        """Sets the max_quantity of this ShoppingCartItemItem.

        Max Quantity  # noqa: E501

        :param max_quantity: The max_quantity of this ShoppingCartItemItem.  # noqa: E501
        :type: int
        """

        self._max_quantity = max_quantity

    @property
    def amount(self):
        """Gets the amount of this ShoppingCartItemItem.  # noqa: E501

        Amount  # noqa: E501

        :return: The amount of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ShoppingCartItemItem.

        Amount  # noqa: E501

        :param amount: The amount of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def amount_cost(self):
        """Gets the amount_cost of this ShoppingCartItemItem.  # noqa: E501

        Amount Cost  # noqa: E501

        :return: The amount_cost of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._amount_cost

    @amount_cost.setter
    def amount_cost(self, amount_cost):
        """Sets the amount_cost of this ShoppingCartItemItem.

        Amount Cost  # noqa: E501

        :param amount_cost: The amount_cost of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """

        self._amount_cost = amount_cost

    @property
    def table_id(self):
        """Gets the table_id of this ShoppingCartItemItem.  # noqa: E501

        Table  # noqa: E501

        :return: The table_id of this ShoppingCartItemItem.  # noqa: E501
        :rtype: int
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this ShoppingCartItemItem.

        Table  # noqa: E501

        :param table_id: The table_id of this ShoppingCartItemItem.  # noqa: E501
        :type: int
        """

        self._table_id = table_id

    @property
    def table_name(self):
        """Gets the table_name of this ShoppingCartItemItem.  # noqa: E501

        Table Name  # noqa: E501

        :return: The table_name of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this ShoppingCartItemItem.

        Table Name  # noqa: E501

        :param table_name: The table_name of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """
        if table_name is not None and len(table_name) > 50:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `50`")  # noqa: E501

        self._table_name = table_name

    @property
    def view_on_web(self):
        """Gets the view_on_web of this ShoppingCartItemItem.  # noqa: E501

        View On Web  # noqa: E501

        :return: The view_on_web of this ShoppingCartItemItem.  # noqa: E501
        :rtype: bool
        """
        return self._view_on_web

    @view_on_web.setter
    def view_on_web(self, view_on_web):
        """Sets the view_on_web of this ShoppingCartItemItem.

        View On Web  # noqa: E501

        :param view_on_web: The view_on_web of this ShoppingCartItemItem.  # noqa: E501
        :type: bool
        """

        self._view_on_web = view_on_web

    @property
    def web_image_location(self):
        """Gets the web_image_location of this ShoppingCartItemItem.  # noqa: E501

        Web Image Location  # noqa: E501

        :return: The web_image_location of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._web_image_location

    @web_image_location.setter
    def web_image_location(self, web_image_location):
        """Sets the web_image_location of this ShoppingCartItemItem.

        Web Image Location  # noqa: E501

        :param web_image_location: The web_image_location of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """
        if web_image_location is not None and len(web_image_location) > 200:
            raise ValueError("Invalid value for `web_image_location`, length must be less than or equal to `200`")  # noqa: E501

        self._web_image_location = web_image_location

    @property
    def sort_order(self):
        """Gets the sort_order of this ShoppingCartItemItem.  # noqa: E501

        Sort Order  # noqa: E501

        :return: The sort_order of this ShoppingCartItemItem.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ShoppingCartItemItem.

        Sort Order  # noqa: E501

        :param sort_order: The sort_order of this ShoppingCartItemItem.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def active_date_start(self):
        """Gets the active_date_start of this ShoppingCartItemItem.  # noqa: E501

        Active Date Start  # noqa: E501

        :return: The active_date_start of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._active_date_start

    @active_date_start.setter
    def active_date_start(self, active_date_start):
        """Sets the active_date_start of this ShoppingCartItemItem.

        Active Date Start  # noqa: E501

        :param active_date_start: The active_date_start of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """

        self._active_date_start = active_date_start

    @property
    def active_date_end(self):
        """Gets the active_date_end of this ShoppingCartItemItem.  # noqa: E501

        Active Date End  # noqa: E501

        :return: The active_date_end of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._active_date_end

    @active_date_end.setter
    def active_date_end(self, active_date_end):
        """Sets the active_date_end of this ShoppingCartItemItem.

        Active Date End  # noqa: E501

        :param active_date_end: The active_date_end of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """

        self._active_date_end = active_date_end

    @property
    def max_items_per_entry(self):
        """Gets the max_items_per_entry of this ShoppingCartItemItem.  # noqa: E501

        Max Items Per Entry  # noqa: E501

        :return: The max_items_per_entry of this ShoppingCartItemItem.  # noqa: E501
        :rtype: int
        """
        return self._max_items_per_entry

    @max_items_per_entry.setter
    def max_items_per_entry(self, max_items_per_entry):
        """Sets the max_items_per_entry of this ShoppingCartItemItem.

        Max Items Per Entry  # noqa: E501

        :param max_items_per_entry: The max_items_per_entry of this ShoppingCartItemItem.  # noqa: E501
        :type: int
        """

        self._max_items_per_entry = max_items_per_entry

    @property
    def transaction_template_id(self):
        """Gets the transaction_template_id of this ShoppingCartItemItem.  # noqa: E501

        Transaction Template  # noqa: E501

        :return: The transaction_template_id of this ShoppingCartItemItem.  # noqa: E501
        :rtype: int
        """
        return self._transaction_template_id

    @transaction_template_id.setter
    def transaction_template_id(self, transaction_template_id):
        """Sets the transaction_template_id of this ShoppingCartItemItem.

        Transaction Template  # noqa: E501

        :param transaction_template_id: The transaction_template_id of this ShoppingCartItemItem.  # noqa: E501
        :type: int
        """

        self._transaction_template_id = transaction_template_id

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this ShoppingCartItemItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this ShoppingCartItemItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def custom_bit1(self):
        """Gets the custom_bit1 of this ShoppingCartItemItem.  # noqa: E501

        Custom Flag 1  # noqa: E501

        :return: The custom_bit1 of this ShoppingCartItemItem.  # noqa: E501
        :rtype: bool
        """
        return self._custom_bit1

    @custom_bit1.setter
    def custom_bit1(self, custom_bit1):
        """Sets the custom_bit1 of this ShoppingCartItemItem.

        Custom Flag 1  # noqa: E501

        :param custom_bit1: The custom_bit1 of this ShoppingCartItemItem.  # noqa: E501
        :type: bool
        """

        self._custom_bit1 = custom_bit1

    @property
    def custom_bit2(self):
        """Gets the custom_bit2 of this ShoppingCartItemItem.  # noqa: E501

        Custom Flag 2  # noqa: E501

        :return: The custom_bit2 of this ShoppingCartItemItem.  # noqa: E501
        :rtype: bool
        """
        return self._custom_bit2

    @custom_bit2.setter
    def custom_bit2(self, custom_bit2):
        """Sets the custom_bit2 of this ShoppingCartItemItem.

        Custom Flag 2  # noqa: E501

        :param custom_bit2: The custom_bit2 of this ShoppingCartItemItem.  # noqa: E501
        :type: bool
        """

        self._custom_bit2 = custom_bit2

    @property
    def custom_string1(self):
        """Gets the custom_string1 of this ShoppingCartItemItem.  # noqa: E501

        Custom String 1  # noqa: E501

        :return: The custom_string1 of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string1

    @custom_string1.setter
    def custom_string1(self, custom_string1):
        """Sets the custom_string1 of this ShoppingCartItemItem.

        Custom String 1  # noqa: E501

        :param custom_string1: The custom_string1 of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """
        if custom_string1 is not None and len(custom_string1) > 50:
            raise ValueError("Invalid value for `custom_string1`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string1 = custom_string1

    @property
    def custom_string2(self):
        """Gets the custom_string2 of this ShoppingCartItemItem.  # noqa: E501

        Custom String 2  # noqa: E501

        :return: The custom_string2 of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string2

    @custom_string2.setter
    def custom_string2(self, custom_string2):
        """Sets the custom_string2 of this ShoppingCartItemItem.

        Custom String 2  # noqa: E501

        :param custom_string2: The custom_string2 of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """
        if custom_string2 is not None and len(custom_string2) > 50:
            raise ValueError("Invalid value for `custom_string2`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string2 = custom_string2

    @property
    def custom_string3(self):
        """Gets the custom_string3 of this ShoppingCartItemItem.  # noqa: E501

        Custom String 3  # noqa: E501

        :return: The custom_string3 of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string3

    @custom_string3.setter
    def custom_string3(self, custom_string3):
        """Sets the custom_string3 of this ShoppingCartItemItem.

        Custom String 3  # noqa: E501

        :param custom_string3: The custom_string3 of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """
        if custom_string3 is not None and len(custom_string3) > 50:
            raise ValueError("Invalid value for `custom_string3`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string3 = custom_string3

    @property
    def custom_string4(self):
        """Gets the custom_string4 of this ShoppingCartItemItem.  # noqa: E501

        Custom String 4  # noqa: E501

        :return: The custom_string4 of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string4

    @custom_string4.setter
    def custom_string4(self, custom_string4):
        """Sets the custom_string4 of this ShoppingCartItemItem.

        Custom String 4  # noqa: E501

        :param custom_string4: The custom_string4 of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """
        if custom_string4 is not None and len(custom_string4) > 50:
            raise ValueError("Invalid value for `custom_string4`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string4 = custom_string4

    @property
    def custom_string5(self):
        """Gets the custom_string5 of this ShoppingCartItemItem.  # noqa: E501

        Custom String 5  # noqa: E501

        :return: The custom_string5 of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string5

    @custom_string5.setter
    def custom_string5(self, custom_string5):
        """Sets the custom_string5 of this ShoppingCartItemItem.

        Custom String 5  # noqa: E501

        :param custom_string5: The custom_string5 of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """
        if custom_string5 is not None and len(custom_string5) > 50:
            raise ValueError("Invalid value for `custom_string5`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string5 = custom_string5

    @property
    def custom_string6(self):
        """Gets the custom_string6 of this ShoppingCartItemItem.  # noqa: E501

        Custom String 6  # noqa: E501

        :return: The custom_string6 of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string6

    @custom_string6.setter
    def custom_string6(self, custom_string6):
        """Sets the custom_string6 of this ShoppingCartItemItem.

        Custom String 6  # noqa: E501

        :param custom_string6: The custom_string6 of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """
        if custom_string6 is not None and len(custom_string6) > 50:
            raise ValueError("Invalid value for `custom_string6`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string6 = custom_string6

    @property
    def custom_date1(self):
        """Gets the custom_date1 of this ShoppingCartItemItem.  # noqa: E501

        Custom Date 1  # noqa: E501

        :return: The custom_date1 of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_date1

    @custom_date1.setter
    def custom_date1(self, custom_date1):
        """Sets the custom_date1 of this ShoppingCartItemItem.

        Custom Date 1  # noqa: E501

        :param custom_date1: The custom_date1 of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """

        self._custom_date1 = custom_date1

    @property
    def custom_date2(self):
        """Gets the custom_date2 of this ShoppingCartItemItem.  # noqa: E501

        Custom Date 2  # noqa: E501

        :return: The custom_date2 of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_date2

    @custom_date2.setter
    def custom_date2(self, custom_date2):
        """Sets the custom_date2 of this ShoppingCartItemItem.

        Custom Date 2  # noqa: E501

        :param custom_date2: The custom_date2 of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """

        self._custom_date2 = custom_date2

    @property
    def security_user_id(self):
        """Gets the security_user_id of this ShoppingCartItemItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this ShoppingCartItemItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this ShoppingCartItemItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this ShoppingCartItemItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this ShoppingCartItemItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this ShoppingCartItemItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this ShoppingCartItemItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this ShoppingCartItemItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this ShoppingCartItemItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this ShoppingCartItemItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ShoppingCartItemItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this ShoppingCartItemItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this ShoppingCartItemItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this ShoppingCartItemItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ShoppingCartItemItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this ShoppingCartItemItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShoppingCartItemItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
