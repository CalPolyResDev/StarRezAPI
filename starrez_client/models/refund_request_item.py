# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RefundRequestItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'refund_request_id': 'int',
        'entry_id': 'int',
        'category_id': 'int',
        'description': 'str',
        'requested_amount': 'str',
        'refund_amount': 'str',
        'charge_group_id': 'int',
        'payment_type_id': 'int',
        'refund_request_configuration_id': 'int',
        'refund_request_batch_configuration_id': 'int',
        'batch_number': 'int',
        'refund_request_status_enum': 'str',
        'comments': 'str',
        'workflow_step_id': 'int',
        'assigned_to_security_user_id': 'int',
        'current_workflow_history_id': 'int',
        'previous_workflow_history_id': 'int',
        'security_user_id': 'int',
        'created_by_security_user_id': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'refund_request_id': 'RefundRequestID',
        'entry_id': 'EntryID',
        'category_id': 'CategoryID',
        'description': 'Description',
        'requested_amount': 'RequestedAmount',
        'refund_amount': 'RefundAmount',
        'charge_group_id': 'ChargeGroupID',
        'payment_type_id': 'PaymentTypeID',
        'refund_request_configuration_id': 'RefundRequestConfigurationID',
        'refund_request_batch_configuration_id': 'RefundRequestBatchConfigurationID',
        'batch_number': 'BatchNumber',
        'refund_request_status_enum': 'RefundRequestStatusEnum',
        'comments': 'Comments',
        'workflow_step_id': 'WorkflowStepID',
        'assigned_to_security_user_id': 'AssignedTo_SecurityUserID',
        'current_workflow_history_id': 'Current_WorkflowHistoryID',
        'previous_workflow_history_id': 'Previous_WorkflowHistoryID',
        'security_user_id': 'SecurityUserID',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, refund_request_id=None, entry_id=None, category_id=None, description=None, requested_amount=None, refund_amount=None, charge_group_id=None, payment_type_id=None, refund_request_configuration_id=None, refund_request_batch_configuration_id=None, batch_number=None, refund_request_status_enum=None, comments=None, workflow_step_id=None, assigned_to_security_user_id=None, current_workflow_history_id=None, previous_workflow_history_id=None, security_user_id=None, created_by_security_user_id=None, date_created=None, date_modified=None):  # noqa: E501
        """RefundRequestItem - a model defined in Swagger"""  # noqa: E501

        self._refund_request_id = None
        self._entry_id = None
        self._category_id = None
        self._description = None
        self._requested_amount = None
        self._refund_amount = None
        self._charge_group_id = None
        self._payment_type_id = None
        self._refund_request_configuration_id = None
        self._refund_request_batch_configuration_id = None
        self._batch_number = None
        self._refund_request_status_enum = None
        self._comments = None
        self._workflow_step_id = None
        self._assigned_to_security_user_id = None
        self._current_workflow_history_id = None
        self._previous_workflow_history_id = None
        self._security_user_id = None
        self._created_by_security_user_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if refund_request_id is not None:
            self.refund_request_id = refund_request_id
        if entry_id is not None:
            self.entry_id = entry_id
        if category_id is not None:
            self.category_id = category_id
        if description is not None:
            self.description = description
        if requested_amount is not None:
            self.requested_amount = requested_amount
        if refund_amount is not None:
            self.refund_amount = refund_amount
        if charge_group_id is not None:
            self.charge_group_id = charge_group_id
        if payment_type_id is not None:
            self.payment_type_id = payment_type_id
        if refund_request_configuration_id is not None:
            self.refund_request_configuration_id = refund_request_configuration_id
        if refund_request_batch_configuration_id is not None:
            self.refund_request_batch_configuration_id = refund_request_batch_configuration_id
        if batch_number is not None:
            self.batch_number = batch_number
        if refund_request_status_enum is not None:
            self.refund_request_status_enum = refund_request_status_enum
        if comments is not None:
            self.comments = comments
        if workflow_step_id is not None:
            self.workflow_step_id = workflow_step_id
        if assigned_to_security_user_id is not None:
            self.assigned_to_security_user_id = assigned_to_security_user_id
        if current_workflow_history_id is not None:
            self.current_workflow_history_id = current_workflow_history_id
        if previous_workflow_history_id is not None:
            self.previous_workflow_history_id = previous_workflow_history_id
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def refund_request_id(self):
        """Gets the refund_request_id of this RefundRequestItem.  # noqa: E501

        Refund Request  # noqa: E501

        :return: The refund_request_id of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._refund_request_id

    @refund_request_id.setter
    def refund_request_id(self, refund_request_id):
        """Sets the refund_request_id of this RefundRequestItem.

        Refund Request  # noqa: E501

        :param refund_request_id: The refund_request_id of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._refund_request_id = refund_request_id

    @property
    def entry_id(self):
        """Gets the entry_id of this RefundRequestItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this RefundRequestItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def category_id(self):
        """Gets the category_id of this RefundRequestItem.  # noqa: E501

        Category  # noqa: E501

        :return: The category_id of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this RefundRequestItem.

        Category  # noqa: E501

        :param category_id: The category_id of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def description(self):
        """Gets the description of this RefundRequestItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this RefundRequestItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RefundRequestItem.

        Description  # noqa: E501

        :param description: The description of this RefundRequestItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501

        self._description = description

    @property
    def requested_amount(self):
        """Gets the requested_amount of this RefundRequestItem.  # noqa: E501

        Requested Amount  # noqa: E501

        :return: The requested_amount of this RefundRequestItem.  # noqa: E501
        :rtype: str
        """
        return self._requested_amount

    @requested_amount.setter
    def requested_amount(self, requested_amount):
        """Sets the requested_amount of this RefundRequestItem.

        Requested Amount  # noqa: E501

        :param requested_amount: The requested_amount of this RefundRequestItem.  # noqa: E501
        :type: str
        """

        self._requested_amount = requested_amount

    @property
    def refund_amount(self):
        """Gets the refund_amount of this RefundRequestItem.  # noqa: E501

        Refund Amount  # noqa: E501

        :return: The refund_amount of this RefundRequestItem.  # noqa: E501
        :rtype: str
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this RefundRequestItem.

        Refund Amount  # noqa: E501

        :param refund_amount: The refund_amount of this RefundRequestItem.  # noqa: E501
        :type: str
        """

        self._refund_amount = refund_amount

    @property
    def charge_group_id(self):
        """Gets the charge_group_id of this RefundRequestItem.  # noqa: E501

        Charge Group  # noqa: E501

        :return: The charge_group_id of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._charge_group_id

    @charge_group_id.setter
    def charge_group_id(self, charge_group_id):
        """Sets the charge_group_id of this RefundRequestItem.

        Charge Group  # noqa: E501

        :param charge_group_id: The charge_group_id of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._charge_group_id = charge_group_id

    @property
    def payment_type_id(self):
        """Gets the payment_type_id of this RefundRequestItem.  # noqa: E501

        Payment Type  # noqa: E501

        :return: The payment_type_id of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._payment_type_id

    @payment_type_id.setter
    def payment_type_id(self, payment_type_id):
        """Sets the payment_type_id of this RefundRequestItem.

        Payment Type  # noqa: E501

        :param payment_type_id: The payment_type_id of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._payment_type_id = payment_type_id

    @property
    def refund_request_configuration_id(self):
        """Gets the refund_request_configuration_id of this RefundRequestItem.  # noqa: E501

        Refund Request Configuration  # noqa: E501

        :return: The refund_request_configuration_id of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._refund_request_configuration_id

    @refund_request_configuration_id.setter
    def refund_request_configuration_id(self, refund_request_configuration_id):
        """Sets the refund_request_configuration_id of this RefundRequestItem.

        Refund Request Configuration  # noqa: E501

        :param refund_request_configuration_id: The refund_request_configuration_id of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._refund_request_configuration_id = refund_request_configuration_id

    @property
    def refund_request_batch_configuration_id(self):
        """Gets the refund_request_batch_configuration_id of this RefundRequestItem.  # noqa: E501

        Refund Request Batch Configuration  # noqa: E501

        :return: The refund_request_batch_configuration_id of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._refund_request_batch_configuration_id

    @refund_request_batch_configuration_id.setter
    def refund_request_batch_configuration_id(self, refund_request_batch_configuration_id):
        """Sets the refund_request_batch_configuration_id of this RefundRequestItem.

        Refund Request Batch Configuration  # noqa: E501

        :param refund_request_batch_configuration_id: The refund_request_batch_configuration_id of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._refund_request_batch_configuration_id = refund_request_batch_configuration_id

    @property
    def batch_number(self):
        """Gets the batch_number of this RefundRequestItem.  # noqa: E501

        Batch Number  # noqa: E501

        :return: The batch_number of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._batch_number

    @batch_number.setter
    def batch_number(self, batch_number):
        """Sets the batch_number of this RefundRequestItem.

        Batch Number  # noqa: E501

        :param batch_number: The batch_number of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._batch_number = batch_number

    @property
    def refund_request_status_enum(self):
        """Gets the refund_request_status_enum of this RefundRequestItem.  # noqa: E501

        Refund Request Status  # noqa: E501

        :return: The refund_request_status_enum of this RefundRequestItem.  # noqa: E501
        :rtype: str
        """
        return self._refund_request_status_enum

    @refund_request_status_enum.setter
    def refund_request_status_enum(self, refund_request_status_enum):
        """Sets the refund_request_status_enum of this RefundRequestItem.

        Refund Request Status  # noqa: E501

        :param refund_request_status_enum: The refund_request_status_enum of this RefundRequestItem.  # noqa: E501
        :type: str
        """

        self._refund_request_status_enum = refund_request_status_enum

    @property
    def comments(self):
        """Gets the comments of this RefundRequestItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this RefundRequestItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this RefundRequestItem.

        Comments  # noqa: E501

        :param comments: The comments of this RefundRequestItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 300:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `300`")  # noqa: E501

        self._comments = comments

    @property
    def workflow_step_id(self):
        """Gets the workflow_step_id of this RefundRequestItem.  # noqa: E501

        Workflow Step  # noqa: E501

        :return: The workflow_step_id of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._workflow_step_id

    @workflow_step_id.setter
    def workflow_step_id(self, workflow_step_id):
        """Sets the workflow_step_id of this RefundRequestItem.

        Workflow Step  # noqa: E501

        :param workflow_step_id: The workflow_step_id of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._workflow_step_id = workflow_step_id

    @property
    def assigned_to_security_user_id(self):
        """Gets the assigned_to_security_user_id of this RefundRequestItem.  # noqa: E501

        Assigned To Security User  # noqa: E501

        :return: The assigned_to_security_user_id of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._assigned_to_security_user_id

    @assigned_to_security_user_id.setter
    def assigned_to_security_user_id(self, assigned_to_security_user_id):
        """Sets the assigned_to_security_user_id of this RefundRequestItem.

        Assigned To Security User  # noqa: E501

        :param assigned_to_security_user_id: The assigned_to_security_user_id of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._assigned_to_security_user_id = assigned_to_security_user_id

    @property
    def current_workflow_history_id(self):
        """Gets the current_workflow_history_id of this RefundRequestItem.  # noqa: E501

        Current Workflow History  # noqa: E501

        :return: The current_workflow_history_id of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._current_workflow_history_id

    @current_workflow_history_id.setter
    def current_workflow_history_id(self, current_workflow_history_id):
        """Sets the current_workflow_history_id of this RefundRequestItem.

        Current Workflow History  # noqa: E501

        :param current_workflow_history_id: The current_workflow_history_id of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._current_workflow_history_id = current_workflow_history_id

    @property
    def previous_workflow_history_id(self):
        """Gets the previous_workflow_history_id of this RefundRequestItem.  # noqa: E501

        Previous Workflow History  # noqa: E501

        :return: The previous_workflow_history_id of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._previous_workflow_history_id

    @previous_workflow_history_id.setter
    def previous_workflow_history_id(self, previous_workflow_history_id):
        """Sets the previous_workflow_history_id of this RefundRequestItem.

        Previous Workflow History  # noqa: E501

        :param previous_workflow_history_id: The previous_workflow_history_id of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._previous_workflow_history_id = previous_workflow_history_id

    @property
    def security_user_id(self):
        """Gets the security_user_id of this RefundRequestItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this RefundRequestItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this RefundRequestItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this RefundRequestItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this RefundRequestItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this RefundRequestItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this RefundRequestItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this RefundRequestItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this RefundRequestItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this RefundRequestItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this RefundRequestItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this RefundRequestItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this RefundRequestItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this RefundRequestItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefundRequestItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
