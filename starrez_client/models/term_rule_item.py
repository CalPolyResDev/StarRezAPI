# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TermRuleItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'term_rule_id': 'int',
        'term_id': 'int',
        'web_section_id': 'int',
        'active': 'bool',
        'active_date_open': 'str',
        'active_date_close': 'str',
        'comments': 'str',
        'security_user_id': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'term_rule_id': 'TermRuleID',
        'term_id': 'TermID',
        'web_section_id': 'WebSectionID',
        'active': 'Active',
        'active_date_open': 'ActiveDateOpen',
        'active_date_close': 'ActiveDateClose',
        'comments': 'Comments',
        'security_user_id': 'SecurityUserID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, term_rule_id=None, term_id=None, web_section_id=None, active=None, active_date_open=None, active_date_close=None, comments=None, security_user_id=None, date_created=None, date_modified=None):  # noqa: E501
        """TermRuleItem - a model defined in Swagger"""  # noqa: E501

        self._term_rule_id = None
        self._term_id = None
        self._web_section_id = None
        self._active = None
        self._active_date_open = None
        self._active_date_close = None
        self._comments = None
        self._security_user_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if term_rule_id is not None:
            self.term_rule_id = term_rule_id
        if term_id is not None:
            self.term_id = term_id
        if web_section_id is not None:
            self.web_section_id = web_section_id
        if active is not None:
            self.active = active
        if active_date_open is not None:
            self.active_date_open = active_date_open
        if active_date_close is not None:
            self.active_date_close = active_date_close
        if comments is not None:
            self.comments = comments
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def term_rule_id(self):
        """Gets the term_rule_id of this TermRuleItem.  # noqa: E501

        Term Rule  # noqa: E501

        :return: The term_rule_id of this TermRuleItem.  # noqa: E501
        :rtype: int
        """
        return self._term_rule_id

    @term_rule_id.setter
    def term_rule_id(self, term_rule_id):
        """Sets the term_rule_id of this TermRuleItem.

        Term Rule  # noqa: E501

        :param term_rule_id: The term_rule_id of this TermRuleItem.  # noqa: E501
        :type: int
        """

        self._term_rule_id = term_rule_id

    @property
    def term_id(self):
        """Gets the term_id of this TermRuleItem.  # noqa: E501

        Term  # noqa: E501

        :return: The term_id of this TermRuleItem.  # noqa: E501
        :rtype: int
        """
        return self._term_id

    @term_id.setter
    def term_id(self, term_id):
        """Sets the term_id of this TermRuleItem.

        Term  # noqa: E501

        :param term_id: The term_id of this TermRuleItem.  # noqa: E501
        :type: int
        """

        self._term_id = term_id

    @property
    def web_section_id(self):
        """Gets the web_section_id of this TermRuleItem.  # noqa: E501

        Web Section  # noqa: E501

        :return: The web_section_id of this TermRuleItem.  # noqa: E501
        :rtype: int
        """
        return self._web_section_id

    @web_section_id.setter
    def web_section_id(self, web_section_id):
        """Sets the web_section_id of this TermRuleItem.

        Web Section  # noqa: E501

        :param web_section_id: The web_section_id of this TermRuleItem.  # noqa: E501
        :type: int
        """

        self._web_section_id = web_section_id

    @property
    def active(self):
        """Gets the active of this TermRuleItem.  # noqa: E501

        Active  # noqa: E501

        :return: The active of this TermRuleItem.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TermRuleItem.

        Active  # noqa: E501

        :param active: The active of this TermRuleItem.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def active_date_open(self):
        """Gets the active_date_open of this TermRuleItem.  # noqa: E501

        Active Date Open  # noqa: E501

        :return: The active_date_open of this TermRuleItem.  # noqa: E501
        :rtype: str
        """
        return self._active_date_open

    @active_date_open.setter
    def active_date_open(self, active_date_open):
        """Sets the active_date_open of this TermRuleItem.

        Active Date Open  # noqa: E501

        :param active_date_open: The active_date_open of this TermRuleItem.  # noqa: E501
        :type: str
        """

        self._active_date_open = active_date_open

    @property
    def active_date_close(self):
        """Gets the active_date_close of this TermRuleItem.  # noqa: E501

        Active Date Close  # noqa: E501

        :return: The active_date_close of this TermRuleItem.  # noqa: E501
        :rtype: str
        """
        return self._active_date_close

    @active_date_close.setter
    def active_date_close(self, active_date_close):
        """Sets the active_date_close of this TermRuleItem.

        Active Date Close  # noqa: E501

        :param active_date_close: The active_date_close of this TermRuleItem.  # noqa: E501
        :type: str
        """

        self._active_date_close = active_date_close

    @property
    def comments(self):
        """Gets the comments of this TermRuleItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this TermRuleItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TermRuleItem.

        Comments  # noqa: E501

        :param comments: The comments of this TermRuleItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 100:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `100`")  # noqa: E501

        self._comments = comments

    @property
    def security_user_id(self):
        """Gets the security_user_id of this TermRuleItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this TermRuleItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this TermRuleItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this TermRuleItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this TermRuleItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this TermRuleItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this TermRuleItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this TermRuleItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this TermRuleItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this TermRuleItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this TermRuleItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this TermRuleItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TermRuleItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
