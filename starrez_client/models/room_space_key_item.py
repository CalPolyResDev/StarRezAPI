# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RoomSpaceKeyItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'room_space_key_id': 'int',
        'room_space_id': 'int',
        'room_space_key_type_id': 'int',
        'room_space_key_status_enum': 'str',
        'room_space_key_booking_id': 'int',
        'serial_number': 'str',
        'description': 'str',
        'location': 'str',
        'store': 'str',
        'cut': 'str',
        'details': 'str',
        'custom_bit1': 'bool',
        'custom_bit2': 'bool',
        'custom_string1': 'str',
        'custom_string2': 'str',
        'custom_string3': 'str',
        'custom_string4': 'str',
        'custom_string5': 'str',
        'custom_string6': 'str',
        'custom_date1': 'str',
        'custom_date2': 'str',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'room_space_key_id': 'RoomSpaceKeyID',
        'room_space_id': 'RoomSpaceID',
        'room_space_key_type_id': 'RoomSpaceKeyTypeID',
        'room_space_key_status_enum': 'RoomSpaceKeyStatusEnum',
        'room_space_key_booking_id': 'RoomSpaceKeyBookingID',
        'serial_number': 'SerialNumber',
        'description': 'Description',
        'location': 'Location',
        'store': 'Store',
        'cut': 'Cut',
        'details': 'Details',
        'custom_bit1': 'CustomBit1',
        'custom_bit2': 'CustomBit2',
        'custom_string1': 'CustomString1',
        'custom_string2': 'CustomString2',
        'custom_string3': 'CustomString3',
        'custom_string4': 'CustomString4',
        'custom_string5': 'CustomString5',
        'custom_string6': 'CustomString6',
        'custom_date1': 'CustomDate1',
        'custom_date2': 'CustomDate2',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, room_space_key_id=None, room_space_id=None, room_space_key_type_id=None, room_space_key_status_enum=None, room_space_key_booking_id=None, serial_number=None, description=None, location=None, store=None, cut=None, details=None, custom_bit1=None, custom_bit2=None, custom_string1=None, custom_string2=None, custom_string3=None, custom_string4=None, custom_string5=None, custom_string6=None, custom_date1=None, custom_date2=None, comments=None, date_modified=None):  # noqa: E501
        """RoomSpaceKeyItem - a model defined in Swagger"""  # noqa: E501

        self._room_space_key_id = None
        self._room_space_id = None
        self._room_space_key_type_id = None
        self._room_space_key_status_enum = None
        self._room_space_key_booking_id = None
        self._serial_number = None
        self._description = None
        self._location = None
        self._store = None
        self._cut = None
        self._details = None
        self._custom_bit1 = None
        self._custom_bit2 = None
        self._custom_string1 = None
        self._custom_string2 = None
        self._custom_string3 = None
        self._custom_string4 = None
        self._custom_string5 = None
        self._custom_string6 = None
        self._custom_date1 = None
        self._custom_date2 = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if room_space_key_id is not None:
            self.room_space_key_id = room_space_key_id
        if room_space_id is not None:
            self.room_space_id = room_space_id
        if room_space_key_type_id is not None:
            self.room_space_key_type_id = room_space_key_type_id
        if room_space_key_status_enum is not None:
            self.room_space_key_status_enum = room_space_key_status_enum
        if room_space_key_booking_id is not None:
            self.room_space_key_booking_id = room_space_key_booking_id
        if serial_number is not None:
            self.serial_number = serial_number
        if description is not None:
            self.description = description
        if location is not None:
            self.location = location
        if store is not None:
            self.store = store
        if cut is not None:
            self.cut = cut
        if details is not None:
            self.details = details
        if custom_bit1 is not None:
            self.custom_bit1 = custom_bit1
        if custom_bit2 is not None:
            self.custom_bit2 = custom_bit2
        if custom_string1 is not None:
            self.custom_string1 = custom_string1
        if custom_string2 is not None:
            self.custom_string2 = custom_string2
        if custom_string3 is not None:
            self.custom_string3 = custom_string3
        if custom_string4 is not None:
            self.custom_string4 = custom_string4
        if custom_string5 is not None:
            self.custom_string5 = custom_string5
        if custom_string6 is not None:
            self.custom_string6 = custom_string6
        if custom_date1 is not None:
            self.custom_date1 = custom_date1
        if custom_date2 is not None:
            self.custom_date2 = custom_date2
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def room_space_key_id(self):
        """Gets the room_space_key_id of this RoomSpaceKeyItem.  # noqa: E501

        Room Space Key  # noqa: E501

        :return: The room_space_key_id of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: int
        """
        return self._room_space_key_id

    @room_space_key_id.setter
    def room_space_key_id(self, room_space_key_id):
        """Sets the room_space_key_id of this RoomSpaceKeyItem.

        Room Space Key  # noqa: E501

        :param room_space_key_id: The room_space_key_id of this RoomSpaceKeyItem.  # noqa: E501
        :type: int
        """

        self._room_space_key_id = room_space_key_id

    @property
    def room_space_id(self):
        """Gets the room_space_id of this RoomSpaceKeyItem.  # noqa: E501

        Room Space  # noqa: E501

        :return: The room_space_id of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: int
        """
        return self._room_space_id

    @room_space_id.setter
    def room_space_id(self, room_space_id):
        """Sets the room_space_id of this RoomSpaceKeyItem.

        Room Space  # noqa: E501

        :param room_space_id: The room_space_id of this RoomSpaceKeyItem.  # noqa: E501
        :type: int
        """

        self._room_space_id = room_space_id

    @property
    def room_space_key_type_id(self):
        """Gets the room_space_key_type_id of this RoomSpaceKeyItem.  # noqa: E501

        Room Space Key Type  # noqa: E501

        :return: The room_space_key_type_id of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: int
        """
        return self._room_space_key_type_id

    @room_space_key_type_id.setter
    def room_space_key_type_id(self, room_space_key_type_id):
        """Sets the room_space_key_type_id of this RoomSpaceKeyItem.

        Room Space Key Type  # noqa: E501

        :param room_space_key_type_id: The room_space_key_type_id of this RoomSpaceKeyItem.  # noqa: E501
        :type: int
        """

        self._room_space_key_type_id = room_space_key_type_id

    @property
    def room_space_key_status_enum(self):
        """Gets the room_space_key_status_enum of this RoomSpaceKeyItem.  # noqa: E501

        Room Space Key Status  # noqa: E501

        :return: The room_space_key_status_enum of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._room_space_key_status_enum

    @room_space_key_status_enum.setter
    def room_space_key_status_enum(self, room_space_key_status_enum):
        """Sets the room_space_key_status_enum of this RoomSpaceKeyItem.

        Room Space Key Status  # noqa: E501

        :param room_space_key_status_enum: The room_space_key_status_enum of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """

        self._room_space_key_status_enum = room_space_key_status_enum

    @property
    def room_space_key_booking_id(self):
        """Gets the room_space_key_booking_id of this RoomSpaceKeyItem.  # noqa: E501

        Room Space Key Booking  # noqa: E501

        :return: The room_space_key_booking_id of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: int
        """
        return self._room_space_key_booking_id

    @room_space_key_booking_id.setter
    def room_space_key_booking_id(self, room_space_key_booking_id):
        """Sets the room_space_key_booking_id of this RoomSpaceKeyItem.

        Room Space Key Booking  # noqa: E501

        :param room_space_key_booking_id: The room_space_key_booking_id of this RoomSpaceKeyItem.  # noqa: E501
        :type: int
        """

        self._room_space_key_booking_id = room_space_key_booking_id

    @property
    def serial_number(self):
        """Gets the serial_number of this RoomSpaceKeyItem.  # noqa: E501

        Serial Number  # noqa: E501

        :return: The serial_number of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this RoomSpaceKeyItem.

        Serial Number  # noqa: E501

        :param serial_number: The serial_number of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """
        if serial_number is not None and len(serial_number) > 50:
            raise ValueError("Invalid value for `serial_number`, length must be less than or equal to `50`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def description(self):
        """Gets the description of this RoomSpaceKeyItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoomSpaceKeyItem.

        Description  # noqa: E501

        :param description: The description of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")  # noqa: E501

        self._description = description

    @property
    def location(self):
        """Gets the location of this RoomSpaceKeyItem.  # noqa: E501

        Location  # noqa: E501

        :return: The location of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this RoomSpaceKeyItem.

        Location  # noqa: E501

        :param location: The location of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """
        if location is not None and len(location) > 50:
            raise ValueError("Invalid value for `location`, length must be less than or equal to `50`")  # noqa: E501

        self._location = location

    @property
    def store(self):
        """Gets the store of this RoomSpaceKeyItem.  # noqa: E501

        Store  # noqa: E501

        :return: The store of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this RoomSpaceKeyItem.

        Store  # noqa: E501

        :param store: The store of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """
        if store is not None and len(store) > 50:
            raise ValueError("Invalid value for `store`, length must be less than or equal to `50`")  # noqa: E501

        self._store = store

    @property
    def cut(self):
        """Gets the cut of this RoomSpaceKeyItem.  # noqa: E501

        Cut  # noqa: E501

        :return: The cut of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._cut

    @cut.setter
    def cut(self, cut):
        """Sets the cut of this RoomSpaceKeyItem.

        Cut  # noqa: E501

        :param cut: The cut of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """
        if cut is not None and len(cut) > 50:
            raise ValueError("Invalid value for `cut`, length must be less than or equal to `50`")  # noqa: E501

        self._cut = cut

    @property
    def details(self):
        """Gets the details of this RoomSpaceKeyItem.  # noqa: E501

        Details  # noqa: E501

        :return: The details of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RoomSpaceKeyItem.

        Details  # noqa: E501

        :param details: The details of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """
        if details is not None and len(details) > 50:
            raise ValueError("Invalid value for `details`, length must be less than or equal to `50`")  # noqa: E501

        self._details = details

    @property
    def custom_bit1(self):
        """Gets the custom_bit1 of this RoomSpaceKeyItem.  # noqa: E501

        Custom Flag 1  # noqa: E501

        :return: The custom_bit1 of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: bool
        """
        return self._custom_bit1

    @custom_bit1.setter
    def custom_bit1(self, custom_bit1):
        """Sets the custom_bit1 of this RoomSpaceKeyItem.

        Custom Flag 1  # noqa: E501

        :param custom_bit1: The custom_bit1 of this RoomSpaceKeyItem.  # noqa: E501
        :type: bool
        """

        self._custom_bit1 = custom_bit1

    @property
    def custom_bit2(self):
        """Gets the custom_bit2 of this RoomSpaceKeyItem.  # noqa: E501

        Custom Flag 2  # noqa: E501

        :return: The custom_bit2 of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: bool
        """
        return self._custom_bit2

    @custom_bit2.setter
    def custom_bit2(self, custom_bit2):
        """Sets the custom_bit2 of this RoomSpaceKeyItem.

        Custom Flag 2  # noqa: E501

        :param custom_bit2: The custom_bit2 of this RoomSpaceKeyItem.  # noqa: E501
        :type: bool
        """

        self._custom_bit2 = custom_bit2

    @property
    def custom_string1(self):
        """Gets the custom_string1 of this RoomSpaceKeyItem.  # noqa: E501

        Custom String 1  # noqa: E501

        :return: The custom_string1 of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string1

    @custom_string1.setter
    def custom_string1(self, custom_string1):
        """Sets the custom_string1 of this RoomSpaceKeyItem.

        Custom String 1  # noqa: E501

        :param custom_string1: The custom_string1 of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """
        if custom_string1 is not None and len(custom_string1) > 50:
            raise ValueError("Invalid value for `custom_string1`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string1 = custom_string1

    @property
    def custom_string2(self):
        """Gets the custom_string2 of this RoomSpaceKeyItem.  # noqa: E501

        Custom String 2  # noqa: E501

        :return: The custom_string2 of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string2

    @custom_string2.setter
    def custom_string2(self, custom_string2):
        """Sets the custom_string2 of this RoomSpaceKeyItem.

        Custom String 2  # noqa: E501

        :param custom_string2: The custom_string2 of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """
        if custom_string2 is not None and len(custom_string2) > 50:
            raise ValueError("Invalid value for `custom_string2`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string2 = custom_string2

    @property
    def custom_string3(self):
        """Gets the custom_string3 of this RoomSpaceKeyItem.  # noqa: E501

        Custom String 3  # noqa: E501

        :return: The custom_string3 of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string3

    @custom_string3.setter
    def custom_string3(self, custom_string3):
        """Sets the custom_string3 of this RoomSpaceKeyItem.

        Custom String 3  # noqa: E501

        :param custom_string3: The custom_string3 of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """
        if custom_string3 is not None and len(custom_string3) > 50:
            raise ValueError("Invalid value for `custom_string3`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string3 = custom_string3

    @property
    def custom_string4(self):
        """Gets the custom_string4 of this RoomSpaceKeyItem.  # noqa: E501

        Custom String 4  # noqa: E501

        :return: The custom_string4 of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string4

    @custom_string4.setter
    def custom_string4(self, custom_string4):
        """Sets the custom_string4 of this RoomSpaceKeyItem.

        Custom String 4  # noqa: E501

        :param custom_string4: The custom_string4 of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """
        if custom_string4 is not None and len(custom_string4) > 50:
            raise ValueError("Invalid value for `custom_string4`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string4 = custom_string4

    @property
    def custom_string5(self):
        """Gets the custom_string5 of this RoomSpaceKeyItem.  # noqa: E501

        Custom String 5  # noqa: E501

        :return: The custom_string5 of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string5

    @custom_string5.setter
    def custom_string5(self, custom_string5):
        """Sets the custom_string5 of this RoomSpaceKeyItem.

        Custom String 5  # noqa: E501

        :param custom_string5: The custom_string5 of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """
        if custom_string5 is not None and len(custom_string5) > 50:
            raise ValueError("Invalid value for `custom_string5`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string5 = custom_string5

    @property
    def custom_string6(self):
        """Gets the custom_string6 of this RoomSpaceKeyItem.  # noqa: E501

        Custom String 6  # noqa: E501

        :return: The custom_string6 of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string6

    @custom_string6.setter
    def custom_string6(self, custom_string6):
        """Sets the custom_string6 of this RoomSpaceKeyItem.

        Custom String 6  # noqa: E501

        :param custom_string6: The custom_string6 of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """
        if custom_string6 is not None and len(custom_string6) > 50:
            raise ValueError("Invalid value for `custom_string6`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string6 = custom_string6

    @property
    def custom_date1(self):
        """Gets the custom_date1 of this RoomSpaceKeyItem.  # noqa: E501

        Custom Date 1  # noqa: E501

        :return: The custom_date1 of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_date1

    @custom_date1.setter
    def custom_date1(self, custom_date1):
        """Sets the custom_date1 of this RoomSpaceKeyItem.

        Custom Date 1  # noqa: E501

        :param custom_date1: The custom_date1 of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """

        self._custom_date1 = custom_date1

    @property
    def custom_date2(self):
        """Gets the custom_date2 of this RoomSpaceKeyItem.  # noqa: E501

        Custom Date 2  # noqa: E501

        :return: The custom_date2 of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_date2

    @custom_date2.setter
    def custom_date2(self, custom_date2):
        """Sets the custom_date2 of this RoomSpaceKeyItem.

        Custom Date 2  # noqa: E501

        :param custom_date2: The custom_date2 of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """

        self._custom_date2 = custom_date2

    @property
    def comments(self):
        """Gets the comments of this RoomSpaceKeyItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this RoomSpaceKeyItem.

        Comments  # noqa: E501

        :param comments: The comments of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 250:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `250`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this RoomSpaceKeyItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this RoomSpaceKeyItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this RoomSpaceKeyItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this RoomSpaceKeyItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomSpaceKeyItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
