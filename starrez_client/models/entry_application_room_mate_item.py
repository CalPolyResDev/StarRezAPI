# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntryApplicationRoomMateItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_application_room_mate_id': 'int',
        'entry_application_id': 'int',
        'sort_order': 'int',
        'room_mate_entry_application_id': 'int',
        'confirmed': 'bool',
        'enforce': 'bool',
        'date_created': 'datetime',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'entry_application_room_mate_id': 'EntryApplicationRoomMateID',
        'entry_application_id': 'EntryApplicationID',
        'sort_order': 'SortOrder',
        'room_mate_entry_application_id': 'RoomMate_EntryApplicationID',
        'confirmed': 'Confirmed',
        'enforce': 'Enforce',
        'date_created': 'DateCreated',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, entry_application_room_mate_id=None, entry_application_id=None, sort_order=None, room_mate_entry_application_id=None, confirmed=None, enforce=None, date_created=None, comments=None, date_modified=None):  # noqa: E501
        """EntryApplicationRoomMateItem - a model defined in Swagger"""  # noqa: E501

        self._entry_application_room_mate_id = None
        self._entry_application_id = None
        self._sort_order = None
        self._room_mate_entry_application_id = None
        self._confirmed = None
        self._enforce = None
        self._date_created = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if entry_application_room_mate_id is not None:
            self.entry_application_room_mate_id = entry_application_room_mate_id
        if entry_application_id is not None:
            self.entry_application_id = entry_application_id
        if sort_order is not None:
            self.sort_order = sort_order
        if room_mate_entry_application_id is not None:
            self.room_mate_entry_application_id = room_mate_entry_application_id
        if confirmed is not None:
            self.confirmed = confirmed
        if enforce is not None:
            self.enforce = enforce
        if date_created is not None:
            self.date_created = date_created
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def entry_application_room_mate_id(self):
        """Gets the entry_application_room_mate_id of this EntryApplicationRoomMateItem.  # noqa: E501

        Entry Application Room Mate  # noqa: E501

        :return: The entry_application_room_mate_id of this EntryApplicationRoomMateItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_application_room_mate_id

    @entry_application_room_mate_id.setter
    def entry_application_room_mate_id(self, entry_application_room_mate_id):
        """Sets the entry_application_room_mate_id of this EntryApplicationRoomMateItem.

        Entry Application Room Mate  # noqa: E501

        :param entry_application_room_mate_id: The entry_application_room_mate_id of this EntryApplicationRoomMateItem.  # noqa: E501
        :type: int
        """

        self._entry_application_room_mate_id = entry_application_room_mate_id

    @property
    def entry_application_id(self):
        """Gets the entry_application_id of this EntryApplicationRoomMateItem.  # noqa: E501

        Entry Application  # noqa: E501

        :return: The entry_application_id of this EntryApplicationRoomMateItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_application_id

    @entry_application_id.setter
    def entry_application_id(self, entry_application_id):
        """Sets the entry_application_id of this EntryApplicationRoomMateItem.

        Entry Application  # noqa: E501

        :param entry_application_id: The entry_application_id of this EntryApplicationRoomMateItem.  # noqa: E501
        :type: int
        """

        self._entry_application_id = entry_application_id

    @property
    def sort_order(self):
        """Gets the sort_order of this EntryApplicationRoomMateItem.  # noqa: E501

        Sort Order  # noqa: E501

        :return: The sort_order of this EntryApplicationRoomMateItem.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this EntryApplicationRoomMateItem.

        Sort Order  # noqa: E501

        :param sort_order: The sort_order of this EntryApplicationRoomMateItem.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def room_mate_entry_application_id(self):
        """Gets the room_mate_entry_application_id of this EntryApplicationRoomMateItem.  # noqa: E501

        Room Mate Entry Application  # noqa: E501

        :return: The room_mate_entry_application_id of this EntryApplicationRoomMateItem.  # noqa: E501
        :rtype: int
        """
        return self._room_mate_entry_application_id

    @room_mate_entry_application_id.setter
    def room_mate_entry_application_id(self, room_mate_entry_application_id):
        """Sets the room_mate_entry_application_id of this EntryApplicationRoomMateItem.

        Room Mate Entry Application  # noqa: E501

        :param room_mate_entry_application_id: The room_mate_entry_application_id of this EntryApplicationRoomMateItem.  # noqa: E501
        :type: int
        """

        self._room_mate_entry_application_id = room_mate_entry_application_id

    @property
    def confirmed(self):
        """Gets the confirmed of this EntryApplicationRoomMateItem.  # noqa: E501

        Confirmed  # noqa: E501

        :return: The confirmed of this EntryApplicationRoomMateItem.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this EntryApplicationRoomMateItem.

        Confirmed  # noqa: E501

        :param confirmed: The confirmed of this EntryApplicationRoomMateItem.  # noqa: E501
        :type: bool
        """

        self._confirmed = confirmed

    @property
    def enforce(self):
        """Gets the enforce of this EntryApplicationRoomMateItem.  # noqa: E501

        Enforce  # noqa: E501

        :return: The enforce of this EntryApplicationRoomMateItem.  # noqa: E501
        :rtype: bool
        """
        return self._enforce

    @enforce.setter
    def enforce(self, enforce):
        """Sets the enforce of this EntryApplicationRoomMateItem.

        Enforce  # noqa: E501

        :param enforce: The enforce of this EntryApplicationRoomMateItem.  # noqa: E501
        :type: bool
        """

        self._enforce = enforce

    @property
    def date_created(self):
        """Gets the date_created of this EntryApplicationRoomMateItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this EntryApplicationRoomMateItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this EntryApplicationRoomMateItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this EntryApplicationRoomMateItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def comments(self):
        """Gets the comments of this EntryApplicationRoomMateItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this EntryApplicationRoomMateItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EntryApplicationRoomMateItem.

        Comments  # noqa: E501

        :param comments: The comments of this EntryApplicationRoomMateItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 500:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `500`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this EntryApplicationRoomMateItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EntryApplicationRoomMateItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntryApplicationRoomMateItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EntryApplicationRoomMateItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryApplicationRoomMateItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
