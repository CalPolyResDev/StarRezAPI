# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChargeGroupItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_group_id': 'int',
        'record_type_enum': 'str',
        'abbreviation': 'str',
        'category_id': 'int',
        'description': 'str',
        'hold': 'bool',
        'deposit': 'bool',
        'balance_payment_with_charge': 'bool',
        'tax_deductible': 'bool',
        'allow_transaction_delete': 'bool',
        'credit_limit_amount': 'str',
        'web_account_view': 'bool',
        'web_account_payments': 'bool',
        'web_account_comments': 'str',
        'custom_bit1': 'bool',
        'custom_bit2': 'bool',
        'custom_string1': 'str',
        'custom_string2': 'str',
        'custom_string3': 'str',
        'custom_string4': 'str',
        'custom_string5': 'str',
        'custom_string6': 'str',
        'custom_date1': 'str',
        'custom_date2': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'charge_group_id': 'ChargeGroupID',
        'record_type_enum': 'RecordTypeEnum',
        'abbreviation': 'Abbreviation',
        'category_id': 'CategoryID',
        'description': 'Description',
        'hold': 'Hold',
        'deposit': 'Deposit',
        'balance_payment_with_charge': 'BalancePaymentWithCharge',
        'tax_deductible': 'TaxDeductible',
        'allow_transaction_delete': 'AllowTransactionDelete',
        'credit_limit_amount': 'CreditLimitAmount',
        'web_account_view': 'WebAccountView',
        'web_account_payments': 'WebAccountPayments',
        'web_account_comments': 'WebAccountComments',
        'custom_bit1': 'CustomBit1',
        'custom_bit2': 'CustomBit2',
        'custom_string1': 'CustomString1',
        'custom_string2': 'CustomString2',
        'custom_string3': 'CustomString3',
        'custom_string4': 'CustomString4',
        'custom_string5': 'CustomString5',
        'custom_string6': 'CustomString6',
        'custom_date1': 'CustomDate1',
        'custom_date2': 'CustomDate2',
        'date_modified': 'DateModified'
    }

    def __init__(self, charge_group_id=None, record_type_enum=None, abbreviation=None, category_id=None, description=None, hold=None, deposit=None, balance_payment_with_charge=None, tax_deductible=None, allow_transaction_delete=None, credit_limit_amount=None, web_account_view=None, web_account_payments=None, web_account_comments=None, custom_bit1=None, custom_bit2=None, custom_string1=None, custom_string2=None, custom_string3=None, custom_string4=None, custom_string5=None, custom_string6=None, custom_date1=None, custom_date2=None, date_modified=None):  # noqa: E501
        """ChargeGroupItem - a model defined in Swagger"""  # noqa: E501

        self._charge_group_id = None
        self._record_type_enum = None
        self._abbreviation = None
        self._category_id = None
        self._description = None
        self._hold = None
        self._deposit = None
        self._balance_payment_with_charge = None
        self._tax_deductible = None
        self._allow_transaction_delete = None
        self._credit_limit_amount = None
        self._web_account_view = None
        self._web_account_payments = None
        self._web_account_comments = None
        self._custom_bit1 = None
        self._custom_bit2 = None
        self._custom_string1 = None
        self._custom_string2 = None
        self._custom_string3 = None
        self._custom_string4 = None
        self._custom_string5 = None
        self._custom_string6 = None
        self._custom_date1 = None
        self._custom_date2 = None
        self._date_modified = None
        self.discriminator = None

        if charge_group_id is not None:
            self.charge_group_id = charge_group_id
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if category_id is not None:
            self.category_id = category_id
        if description is not None:
            self.description = description
        if hold is not None:
            self.hold = hold
        if deposit is not None:
            self.deposit = deposit
        if balance_payment_with_charge is not None:
            self.balance_payment_with_charge = balance_payment_with_charge
        if tax_deductible is not None:
            self.tax_deductible = tax_deductible
        if allow_transaction_delete is not None:
            self.allow_transaction_delete = allow_transaction_delete
        if credit_limit_amount is not None:
            self.credit_limit_amount = credit_limit_amount
        if web_account_view is not None:
            self.web_account_view = web_account_view
        if web_account_payments is not None:
            self.web_account_payments = web_account_payments
        if web_account_comments is not None:
            self.web_account_comments = web_account_comments
        if custom_bit1 is not None:
            self.custom_bit1 = custom_bit1
        if custom_bit2 is not None:
            self.custom_bit2 = custom_bit2
        if custom_string1 is not None:
            self.custom_string1 = custom_string1
        if custom_string2 is not None:
            self.custom_string2 = custom_string2
        if custom_string3 is not None:
            self.custom_string3 = custom_string3
        if custom_string4 is not None:
            self.custom_string4 = custom_string4
        if custom_string5 is not None:
            self.custom_string5 = custom_string5
        if custom_string6 is not None:
            self.custom_string6 = custom_string6
        if custom_date1 is not None:
            self.custom_date1 = custom_date1
        if custom_date2 is not None:
            self.custom_date2 = custom_date2
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def charge_group_id(self):
        """Gets the charge_group_id of this ChargeGroupItem.  # noqa: E501

        Charge Group  # noqa: E501

        :return: The charge_group_id of this ChargeGroupItem.  # noqa: E501
        :rtype: int
        """
        return self._charge_group_id

    @charge_group_id.setter
    def charge_group_id(self, charge_group_id):
        """Sets the charge_group_id of this ChargeGroupItem.

        Charge Group  # noqa: E501

        :param charge_group_id: The charge_group_id of this ChargeGroupItem.  # noqa: E501
        :type: int
        """

        self._charge_group_id = charge_group_id

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this ChargeGroupItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this ChargeGroupItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this ChargeGroupItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def abbreviation(self):
        """Gets the abbreviation of this ChargeGroupItem.  # noqa: E501

        Abbreviation  # noqa: E501

        :return: The abbreviation of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this ChargeGroupItem.

        Abbreviation  # noqa: E501

        :param abbreviation: The abbreviation of this ChargeGroupItem.  # noqa: E501
        :type: str
        """
        if abbreviation is not None and len(abbreviation) > 6:
            raise ValueError("Invalid value for `abbreviation`, length must be less than or equal to `6`")  # noqa: E501

        self._abbreviation = abbreviation

    @property
    def category_id(self):
        """Gets the category_id of this ChargeGroupItem.  # noqa: E501

        Category  # noqa: E501

        :return: The category_id of this ChargeGroupItem.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ChargeGroupItem.

        Category  # noqa: E501

        :param category_id: The category_id of this ChargeGroupItem.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def description(self):
        """Gets the description of this ChargeGroupItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChargeGroupItem.

        Description  # noqa: E501

        :param description: The description of this ChargeGroupItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 35:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `35`")  # noqa: E501

        self._description = description

    @property
    def hold(self):
        """Gets the hold of this ChargeGroupItem.  # noqa: E501

        Hold  # noqa: E501

        :return: The hold of this ChargeGroupItem.  # noqa: E501
        :rtype: bool
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this ChargeGroupItem.

        Hold  # noqa: E501

        :param hold: The hold of this ChargeGroupItem.  # noqa: E501
        :type: bool
        """

        self._hold = hold

    @property
    def deposit(self):
        """Gets the deposit of this ChargeGroupItem.  # noqa: E501

        Deposit  # noqa: E501

        :return: The deposit of this ChargeGroupItem.  # noqa: E501
        :rtype: bool
        """
        return self._deposit

    @deposit.setter
    def deposit(self, deposit):
        """Sets the deposit of this ChargeGroupItem.

        Deposit  # noqa: E501

        :param deposit: The deposit of this ChargeGroupItem.  # noqa: E501
        :type: bool
        """

        self._deposit = deposit

    @property
    def balance_payment_with_charge(self):
        """Gets the balance_payment_with_charge of this ChargeGroupItem.  # noqa: E501

        Balance Payment With Charge  # noqa: E501

        :return: The balance_payment_with_charge of this ChargeGroupItem.  # noqa: E501
        :rtype: bool
        """
        return self._balance_payment_with_charge

    @balance_payment_with_charge.setter
    def balance_payment_with_charge(self, balance_payment_with_charge):
        """Sets the balance_payment_with_charge of this ChargeGroupItem.

        Balance Payment With Charge  # noqa: E501

        :param balance_payment_with_charge: The balance_payment_with_charge of this ChargeGroupItem.  # noqa: E501
        :type: bool
        """

        self._balance_payment_with_charge = balance_payment_with_charge

    @property
    def tax_deductible(self):
        """Gets the tax_deductible of this ChargeGroupItem.  # noqa: E501

        Tax Deductible  # noqa: E501

        :return: The tax_deductible of this ChargeGroupItem.  # noqa: E501
        :rtype: bool
        """
        return self._tax_deductible

    @tax_deductible.setter
    def tax_deductible(self, tax_deductible):
        """Sets the tax_deductible of this ChargeGroupItem.

        Tax Deductible  # noqa: E501

        :param tax_deductible: The tax_deductible of this ChargeGroupItem.  # noqa: E501
        :type: bool
        """

        self._tax_deductible = tax_deductible

    @property
    def allow_transaction_delete(self):
        """Gets the allow_transaction_delete of this ChargeGroupItem.  # noqa: E501

        Allow Transaction Delete  # noqa: E501

        :return: The allow_transaction_delete of this ChargeGroupItem.  # noqa: E501
        :rtype: bool
        """
        return self._allow_transaction_delete

    @allow_transaction_delete.setter
    def allow_transaction_delete(self, allow_transaction_delete):
        """Sets the allow_transaction_delete of this ChargeGroupItem.

        Allow Transaction Delete  # noqa: E501

        :param allow_transaction_delete: The allow_transaction_delete of this ChargeGroupItem.  # noqa: E501
        :type: bool
        """

        self._allow_transaction_delete = allow_transaction_delete

    @property
    def credit_limit_amount(self):
        """Gets the credit_limit_amount of this ChargeGroupItem.  # noqa: E501

        Credit Limit Amount  # noqa: E501

        :return: The credit_limit_amount of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._credit_limit_amount

    @credit_limit_amount.setter
    def credit_limit_amount(self, credit_limit_amount):
        """Sets the credit_limit_amount of this ChargeGroupItem.

        Credit Limit Amount  # noqa: E501

        :param credit_limit_amount: The credit_limit_amount of this ChargeGroupItem.  # noqa: E501
        :type: str
        """

        self._credit_limit_amount = credit_limit_amount

    @property
    def web_account_view(self):
        """Gets the web_account_view of this ChargeGroupItem.  # noqa: E501

        Web Account View  # noqa: E501

        :return: The web_account_view of this ChargeGroupItem.  # noqa: E501
        :rtype: bool
        """
        return self._web_account_view

    @web_account_view.setter
    def web_account_view(self, web_account_view):
        """Sets the web_account_view of this ChargeGroupItem.

        Web Account View  # noqa: E501

        :param web_account_view: The web_account_view of this ChargeGroupItem.  # noqa: E501
        :type: bool
        """

        self._web_account_view = web_account_view

    @property
    def web_account_payments(self):
        """Gets the web_account_payments of this ChargeGroupItem.  # noqa: E501

        Web Account Payments  # noqa: E501

        :return: The web_account_payments of this ChargeGroupItem.  # noqa: E501
        :rtype: bool
        """
        return self._web_account_payments

    @web_account_payments.setter
    def web_account_payments(self, web_account_payments):
        """Sets the web_account_payments of this ChargeGroupItem.

        Web Account Payments  # noqa: E501

        :param web_account_payments: The web_account_payments of this ChargeGroupItem.  # noqa: E501
        :type: bool
        """

        self._web_account_payments = web_account_payments

    @property
    def web_account_comments(self):
        """Gets the web_account_comments of this ChargeGroupItem.  # noqa: E501

        Web Account Comments  # noqa: E501

        :return: The web_account_comments of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._web_account_comments

    @web_account_comments.setter
    def web_account_comments(self, web_account_comments):
        """Sets the web_account_comments of this ChargeGroupItem.

        Web Account Comments  # noqa: E501

        :param web_account_comments: The web_account_comments of this ChargeGroupItem.  # noqa: E501
        :type: str
        """
        if web_account_comments is not None and len(web_account_comments) > 500:
            raise ValueError("Invalid value for `web_account_comments`, length must be less than or equal to `500`")  # noqa: E501

        self._web_account_comments = web_account_comments

    @property
    def custom_bit1(self):
        """Gets the custom_bit1 of this ChargeGroupItem.  # noqa: E501

        Custom Flag 1  # noqa: E501

        :return: The custom_bit1 of this ChargeGroupItem.  # noqa: E501
        :rtype: bool
        """
        return self._custom_bit1

    @custom_bit1.setter
    def custom_bit1(self, custom_bit1):
        """Sets the custom_bit1 of this ChargeGroupItem.

        Custom Flag 1  # noqa: E501

        :param custom_bit1: The custom_bit1 of this ChargeGroupItem.  # noqa: E501
        :type: bool
        """

        self._custom_bit1 = custom_bit1

    @property
    def custom_bit2(self):
        """Gets the custom_bit2 of this ChargeGroupItem.  # noqa: E501

        Custom Flag 2  # noqa: E501

        :return: The custom_bit2 of this ChargeGroupItem.  # noqa: E501
        :rtype: bool
        """
        return self._custom_bit2

    @custom_bit2.setter
    def custom_bit2(self, custom_bit2):
        """Sets the custom_bit2 of this ChargeGroupItem.

        Custom Flag 2  # noqa: E501

        :param custom_bit2: The custom_bit2 of this ChargeGroupItem.  # noqa: E501
        :type: bool
        """

        self._custom_bit2 = custom_bit2

    @property
    def custom_string1(self):
        """Gets the custom_string1 of this ChargeGroupItem.  # noqa: E501

        Custom String 1  # noqa: E501

        :return: The custom_string1 of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string1

    @custom_string1.setter
    def custom_string1(self, custom_string1):
        """Sets the custom_string1 of this ChargeGroupItem.

        Custom String 1  # noqa: E501

        :param custom_string1: The custom_string1 of this ChargeGroupItem.  # noqa: E501
        :type: str
        """
        if custom_string1 is not None and len(custom_string1) > 50:
            raise ValueError("Invalid value for `custom_string1`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string1 = custom_string1

    @property
    def custom_string2(self):
        """Gets the custom_string2 of this ChargeGroupItem.  # noqa: E501

        Custom String 2  # noqa: E501

        :return: The custom_string2 of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string2

    @custom_string2.setter
    def custom_string2(self, custom_string2):
        """Sets the custom_string2 of this ChargeGroupItem.

        Custom String 2  # noqa: E501

        :param custom_string2: The custom_string2 of this ChargeGroupItem.  # noqa: E501
        :type: str
        """
        if custom_string2 is not None and len(custom_string2) > 50:
            raise ValueError("Invalid value for `custom_string2`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string2 = custom_string2

    @property
    def custom_string3(self):
        """Gets the custom_string3 of this ChargeGroupItem.  # noqa: E501

        Custom String 3  # noqa: E501

        :return: The custom_string3 of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string3

    @custom_string3.setter
    def custom_string3(self, custom_string3):
        """Sets the custom_string3 of this ChargeGroupItem.

        Custom String 3  # noqa: E501

        :param custom_string3: The custom_string3 of this ChargeGroupItem.  # noqa: E501
        :type: str
        """
        if custom_string3 is not None and len(custom_string3) > 50:
            raise ValueError("Invalid value for `custom_string3`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string3 = custom_string3

    @property
    def custom_string4(self):
        """Gets the custom_string4 of this ChargeGroupItem.  # noqa: E501

        Custom String 4  # noqa: E501

        :return: The custom_string4 of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string4

    @custom_string4.setter
    def custom_string4(self, custom_string4):
        """Sets the custom_string4 of this ChargeGroupItem.

        Custom String 4  # noqa: E501

        :param custom_string4: The custom_string4 of this ChargeGroupItem.  # noqa: E501
        :type: str
        """
        if custom_string4 is not None and len(custom_string4) > 50:
            raise ValueError("Invalid value for `custom_string4`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string4 = custom_string4

    @property
    def custom_string5(self):
        """Gets the custom_string5 of this ChargeGroupItem.  # noqa: E501

        Custom String 5  # noqa: E501

        :return: The custom_string5 of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string5

    @custom_string5.setter
    def custom_string5(self, custom_string5):
        """Sets the custom_string5 of this ChargeGroupItem.

        Custom String 5  # noqa: E501

        :param custom_string5: The custom_string5 of this ChargeGroupItem.  # noqa: E501
        :type: str
        """
        if custom_string5 is not None and len(custom_string5) > 50:
            raise ValueError("Invalid value for `custom_string5`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string5 = custom_string5

    @property
    def custom_string6(self):
        """Gets the custom_string6 of this ChargeGroupItem.  # noqa: E501

        Custom String 6  # noqa: E501

        :return: The custom_string6 of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string6

    @custom_string6.setter
    def custom_string6(self, custom_string6):
        """Sets the custom_string6 of this ChargeGroupItem.

        Custom String 6  # noqa: E501

        :param custom_string6: The custom_string6 of this ChargeGroupItem.  # noqa: E501
        :type: str
        """
        if custom_string6 is not None and len(custom_string6) > 50:
            raise ValueError("Invalid value for `custom_string6`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string6 = custom_string6

    @property
    def custom_date1(self):
        """Gets the custom_date1 of this ChargeGroupItem.  # noqa: E501

        Custom Date 1  # noqa: E501

        :return: The custom_date1 of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_date1

    @custom_date1.setter
    def custom_date1(self, custom_date1):
        """Sets the custom_date1 of this ChargeGroupItem.

        Custom Date 1  # noqa: E501

        :param custom_date1: The custom_date1 of this ChargeGroupItem.  # noqa: E501
        :type: str
        """

        self._custom_date1 = custom_date1

    @property
    def custom_date2(self):
        """Gets the custom_date2 of this ChargeGroupItem.  # noqa: E501

        Custom Date 2  # noqa: E501

        :return: The custom_date2 of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_date2

    @custom_date2.setter
    def custom_date2(self, custom_date2):
        """Sets the custom_date2 of this ChargeGroupItem.

        Custom Date 2  # noqa: E501

        :param custom_date2: The custom_date2 of this ChargeGroupItem.  # noqa: E501
        :type: str
        """

        self._custom_date2 = custom_date2

    @property
    def date_modified(self):
        """Gets the date_modified of this ChargeGroupItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this ChargeGroupItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ChargeGroupItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this ChargeGroupItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChargeGroupItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
