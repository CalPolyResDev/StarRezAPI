# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TransactionLinkItemItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_link_item_id': 'int',
        'transaction_link_id': 'int',
        'transaction_id': 'int',
        'parent': 'bool',
        'date_modified': 'str'
    }

    attribute_map = {
        'transaction_link_item_id': 'TransactionLinkItemID',
        'transaction_link_id': 'TransactionLinkID',
        'transaction_id': 'TransactionID',
        'parent': 'Parent',
        'date_modified': 'DateModified'
    }

    def __init__(self, transaction_link_item_id=None, transaction_link_id=None, transaction_id=None, parent=None, date_modified=None):  # noqa: E501
        """TransactionLinkItemItem - a model defined in Swagger"""  # noqa: E501

        self._transaction_link_item_id = None
        self._transaction_link_id = None
        self._transaction_id = None
        self._parent = None
        self._date_modified = None
        self.discriminator = None

        if transaction_link_item_id is not None:
            self.transaction_link_item_id = transaction_link_item_id
        if transaction_link_id is not None:
            self.transaction_link_id = transaction_link_id
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if parent is not None:
            self.parent = parent
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def transaction_link_item_id(self):
        """Gets the transaction_link_item_id of this TransactionLinkItemItem.  # noqa: E501

        Transaction Link Item  # noqa: E501

        :return: The transaction_link_item_id of this TransactionLinkItemItem.  # noqa: E501
        :rtype: int
        """
        return self._transaction_link_item_id

    @transaction_link_item_id.setter
    def transaction_link_item_id(self, transaction_link_item_id):
        """Sets the transaction_link_item_id of this TransactionLinkItemItem.

        Transaction Link Item  # noqa: E501

        :param transaction_link_item_id: The transaction_link_item_id of this TransactionLinkItemItem.  # noqa: E501
        :type: int
        """

        self._transaction_link_item_id = transaction_link_item_id

    @property
    def transaction_link_id(self):
        """Gets the transaction_link_id of this TransactionLinkItemItem.  # noqa: E501

        Transaction Link  # noqa: E501

        :return: The transaction_link_id of this TransactionLinkItemItem.  # noqa: E501
        :rtype: int
        """
        return self._transaction_link_id

    @transaction_link_id.setter
    def transaction_link_id(self, transaction_link_id):
        """Sets the transaction_link_id of this TransactionLinkItemItem.

        Transaction Link  # noqa: E501

        :param transaction_link_id: The transaction_link_id of this TransactionLinkItemItem.  # noqa: E501
        :type: int
        """

        self._transaction_link_id = transaction_link_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this TransactionLinkItemItem.  # noqa: E501

        Transaction  # noqa: E501

        :return: The transaction_id of this TransactionLinkItemItem.  # noqa: E501
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this TransactionLinkItemItem.

        Transaction  # noqa: E501

        :param transaction_id: The transaction_id of this TransactionLinkItemItem.  # noqa: E501
        :type: int
        """

        self._transaction_id = transaction_id

    @property
    def parent(self):
        """Gets the parent of this TransactionLinkItemItem.  # noqa: E501

        Parent  # noqa: E501

        :return: The parent of this TransactionLinkItemItem.  # noqa: E501
        :rtype: bool
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this TransactionLinkItemItem.

        Parent  # noqa: E501

        :param parent: The parent of this TransactionLinkItemItem.  # noqa: E501
        :type: bool
        """

        self._parent = parent

    @property
    def date_modified(self):
        """Gets the date_modified of this TransactionLinkItemItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this TransactionLinkItemItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this TransactionLinkItemItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this TransactionLinkItemItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionLinkItemItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
