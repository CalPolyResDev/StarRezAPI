# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_id': 'int',
        'category_id': 'int',
        'event_id': 'int',
        'contact_id': 'int',
        'entry_status_enum': 'str',
        'address_type_id': 'int',
        'booking_id': 'int',
        'entry_application_id': 'int',
        'pin_number': 'int',
        'portal_email': 'str',
        'portal_auth_provider_user_id': 'str',
        'portal_reset_guid': 'str',
        'name_last': 'str',
        'name_first': 'str',
        'name_title': 'str',
        'name_preferred': 'str',
        'name_web': 'str',
        'name_other': 'str',
        'name_initials': 'str',
        'name_sharer': 'str',
        'gender_enum': 'str',
        'birth_gender_enum': 'str',
        'directory_flag_privacy': 'bool',
        'dob': 'str',
        'position': 'str',
        'id1': 'str',
        'id2': 'str',
        'id3': 'str',
        'id4': 'int',
        'id5': 'int',
        'phone_process_to_account': 'bool',
        'phone_charge_type_id': 'int',
        'phone_disable_value': 'str',
        'phone_restrict_value': 'str',
        'phone_control_enum': 'str',
        'tax_exemption_enum': 'str',
        'last_check_in_out_date': 'str',
        'previous_entry_status_enum': 'str',
        'testing': 'bool',
        'user_security_user_id': 'int',
        'security_user_id': 'int',
        'created_by_security_user_id': 'int',
        'date_created': 'datetime',
        'entry_guid': 'str',
        'timestamp': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'entry_id': 'EntryID',
        'category_id': 'CategoryID',
        'event_id': 'EventID',
        'contact_id': 'ContactID',
        'entry_status_enum': 'EntryStatusEnum',
        'address_type_id': 'AddressTypeID',
        'booking_id': 'BookingID',
        'entry_application_id': 'EntryApplicationID',
        'pin_number': 'PinNumber',
        'portal_email': 'PortalEmail',
        'portal_auth_provider_user_id': 'PortalAuthProviderUserID',
        'portal_reset_guid': 'PortalResetGUID',
        'name_last': 'NameLast',
        'name_first': 'NameFirst',
        'name_title': 'NameTitle',
        'name_preferred': 'NamePreferred',
        'name_web': 'NameWeb',
        'name_other': 'NameOther',
        'name_initials': 'NameInitials',
        'name_sharer': 'NameSharer',
        'gender_enum': 'GenderEnum',
        'birth_gender_enum': 'Birth_GenderEnum',
        'directory_flag_privacy': 'DirectoryFlagPrivacy',
        'dob': 'DOB',
        'position': 'Position',
        'id1': 'ID1',
        'id2': 'ID2',
        'id3': 'ID3',
        'id4': 'ID4',
        'id5': 'ID5',
        'phone_process_to_account': 'PhoneProcessToAccount',
        'phone_charge_type_id': 'PhoneChargeTypeID',
        'phone_disable_value': 'PhoneDisableValue',
        'phone_restrict_value': 'PhoneRestrictValue',
        'phone_control_enum': 'PhoneControlEnum',
        'tax_exemption_enum': 'TaxExemptionEnum',
        'last_check_in_out_date': 'LastCheckInOutDate',
        'previous_entry_status_enum': 'Previous_EntryStatusEnum',
        'testing': 'Testing',
        'user_security_user_id': 'User_SecurityUserID',
        'security_user_id': 'SecurityUserID',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'date_created': 'DateCreated',
        'entry_guid': 'EntryGUID',
        'timestamp': 'timestamp',
        'date_modified': 'DateModified'
    }

    def __init__(self, entry_id=None, category_id=None, event_id=None, contact_id=None, entry_status_enum=None, address_type_id=None, booking_id=None, entry_application_id=None, pin_number=None, portal_email=None, portal_auth_provider_user_id=None, portal_reset_guid=None, name_last=None, name_first=None, name_title=None, name_preferred=None, name_web=None, name_other=None, name_initials=None, name_sharer=None, gender_enum=None, birth_gender_enum=None, directory_flag_privacy=None, dob=None, position=None, id1=None, id2=None, id3=None, id4=None, id5=None, phone_process_to_account=None, phone_charge_type_id=None, phone_disable_value=None, phone_restrict_value=None, phone_control_enum=None, tax_exemption_enum=None, last_check_in_out_date=None, previous_entry_status_enum=None, testing=None, user_security_user_id=None, security_user_id=None, created_by_security_user_id=None, date_created=None, entry_guid=None, timestamp=None, date_modified=None):  # noqa: E501
        """EntryItem - a model defined in Swagger"""  # noqa: E501

        self._entry_id = None
        self._category_id = None
        self._event_id = None
        self._contact_id = None
        self._entry_status_enum = None
        self._address_type_id = None
        self._booking_id = None
        self._entry_application_id = None
        self._pin_number = None
        self._portal_email = None
        self._portal_auth_provider_user_id = None
        self._portal_reset_guid = None
        self._name_last = None
        self._name_first = None
        self._name_title = None
        self._name_preferred = None
        self._name_web = None
        self._name_other = None
        self._name_initials = None
        self._name_sharer = None
        self._gender_enum = None
        self._birth_gender_enum = None
        self._directory_flag_privacy = None
        self._dob = None
        self._position = None
        self._id1 = None
        self._id2 = None
        self._id3 = None
        self._id4 = None
        self._id5 = None
        self._phone_process_to_account = None
        self._phone_charge_type_id = None
        self._phone_disable_value = None
        self._phone_restrict_value = None
        self._phone_control_enum = None
        self._tax_exemption_enum = None
        self._last_check_in_out_date = None
        self._previous_entry_status_enum = None
        self._testing = None
        self._user_security_user_id = None
        self._security_user_id = None
        self._created_by_security_user_id = None
        self._date_created = None
        self._entry_guid = None
        self._timestamp = None
        self._date_modified = None
        self.discriminator = None

        if entry_id is not None:
            self.entry_id = entry_id
        if category_id is not None:
            self.category_id = category_id
        if event_id is not None:
            self.event_id = event_id
        if contact_id is not None:
            self.contact_id = contact_id
        if entry_status_enum is not None:
            self.entry_status_enum = entry_status_enum
        if address_type_id is not None:
            self.address_type_id = address_type_id
        if booking_id is not None:
            self.booking_id = booking_id
        if entry_application_id is not None:
            self.entry_application_id = entry_application_id
        if pin_number is not None:
            self.pin_number = pin_number
        if portal_email is not None:
            self.portal_email = portal_email
        if portal_auth_provider_user_id is not None:
            self.portal_auth_provider_user_id = portal_auth_provider_user_id
        if portal_reset_guid is not None:
            self.portal_reset_guid = portal_reset_guid
        if name_last is not None:
            self.name_last = name_last
        if name_first is not None:
            self.name_first = name_first
        if name_title is not None:
            self.name_title = name_title
        if name_preferred is not None:
            self.name_preferred = name_preferred
        if name_web is not None:
            self.name_web = name_web
        if name_other is not None:
            self.name_other = name_other
        if name_initials is not None:
            self.name_initials = name_initials
        if name_sharer is not None:
            self.name_sharer = name_sharer
        if gender_enum is not None:
            self.gender_enum = gender_enum
        if birth_gender_enum is not None:
            self.birth_gender_enum = birth_gender_enum
        if directory_flag_privacy is not None:
            self.directory_flag_privacy = directory_flag_privacy
        if dob is not None:
            self.dob = dob
        if position is not None:
            self.position = position
        if id1 is not None:
            self.id1 = id1
        if id2 is not None:
            self.id2 = id2
        if id3 is not None:
            self.id3 = id3
        if id4 is not None:
            self.id4 = id4
        if id5 is not None:
            self.id5 = id5
        if phone_process_to_account is not None:
            self.phone_process_to_account = phone_process_to_account
        if phone_charge_type_id is not None:
            self.phone_charge_type_id = phone_charge_type_id
        if phone_disable_value is not None:
            self.phone_disable_value = phone_disable_value
        if phone_restrict_value is not None:
            self.phone_restrict_value = phone_restrict_value
        if phone_control_enum is not None:
            self.phone_control_enum = phone_control_enum
        if tax_exemption_enum is not None:
            self.tax_exemption_enum = tax_exemption_enum
        if last_check_in_out_date is not None:
            self.last_check_in_out_date = last_check_in_out_date
        if previous_entry_status_enum is not None:
            self.previous_entry_status_enum = previous_entry_status_enum
        if testing is not None:
            self.testing = testing
        if user_security_user_id is not None:
            self.user_security_user_id = user_security_user_id
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if date_created is not None:
            self.date_created = date_created
        if entry_guid is not None:
            self.entry_guid = entry_guid
        if timestamp is not None:
            self.timestamp = timestamp
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def entry_id(self):
        """Gets the entry_id of this EntryItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this EntryItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this EntryItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def category_id(self):
        """Gets the category_id of this EntryItem.  # noqa: E501

        Category  # noqa: E501

        :return: The category_id of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this EntryItem.

        Category  # noqa: E501

        :param category_id: The category_id of this EntryItem.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def event_id(self):
        """Gets the event_id of this EntryItem.  # noqa: E501

        Event  # noqa: E501

        :return: The event_id of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this EntryItem.

        Event  # noqa: E501

        :param event_id: The event_id of this EntryItem.  # noqa: E501
        :type: int
        """

        self._event_id = event_id

    @property
    def contact_id(self):
        """Gets the contact_id of this EntryItem.  # noqa: E501

        Contact  # noqa: E501

        :return: The contact_id of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this EntryItem.

        Contact  # noqa: E501

        :param contact_id: The contact_id of this EntryItem.  # noqa: E501
        :type: int
        """

        self._contact_id = contact_id

    @property
    def entry_status_enum(self):
        """Gets the entry_status_enum of this EntryItem.  # noqa: E501

        Entry Status  # noqa: E501

        :return: The entry_status_enum of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._entry_status_enum

    @entry_status_enum.setter
    def entry_status_enum(self, entry_status_enum):
        """Sets the entry_status_enum of this EntryItem.

        Entry Status  # noqa: E501

        :param entry_status_enum: The entry_status_enum of this EntryItem.  # noqa: E501
        :type: str
        """

        self._entry_status_enum = entry_status_enum

    @property
    def address_type_id(self):
        """Gets the address_type_id of this EntryItem.  # noqa: E501

        Address Type  # noqa: E501

        :return: The address_type_id of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._address_type_id

    @address_type_id.setter
    def address_type_id(self, address_type_id):
        """Sets the address_type_id of this EntryItem.

        Address Type  # noqa: E501

        :param address_type_id: The address_type_id of this EntryItem.  # noqa: E501
        :type: int
        """

        self._address_type_id = address_type_id

    @property
    def booking_id(self):
        """Gets the booking_id of this EntryItem.  # noqa: E501

        Booking  # noqa: E501

        :return: The booking_id of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._booking_id

    @booking_id.setter
    def booking_id(self, booking_id):
        """Sets the booking_id of this EntryItem.

        Booking  # noqa: E501

        :param booking_id: The booking_id of this EntryItem.  # noqa: E501
        :type: int
        """

        self._booking_id = booking_id

    @property
    def entry_application_id(self):
        """Gets the entry_application_id of this EntryItem.  # noqa: E501

        Entry Application  # noqa: E501

        :return: The entry_application_id of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_application_id

    @entry_application_id.setter
    def entry_application_id(self, entry_application_id):
        """Sets the entry_application_id of this EntryItem.

        Entry Application  # noqa: E501

        :param entry_application_id: The entry_application_id of this EntryItem.  # noqa: E501
        :type: int
        """

        self._entry_application_id = entry_application_id

    @property
    def pin_number(self):
        """Gets the pin_number of this EntryItem.  # noqa: E501

        Pin Number  # noqa: E501

        :return: The pin_number of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._pin_number

    @pin_number.setter
    def pin_number(self, pin_number):
        """Sets the pin_number of this EntryItem.

        Pin Number  # noqa: E501

        :param pin_number: The pin_number of this EntryItem.  # noqa: E501
        :type: int
        """

        self._pin_number = pin_number

    @property
    def portal_email(self):
        """Gets the portal_email of this EntryItem.  # noqa: E501

        Portal Email  # noqa: E501

        :return: The portal_email of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._portal_email

    @portal_email.setter
    def portal_email(self, portal_email):
        """Sets the portal_email of this EntryItem.

        Portal Email  # noqa: E501

        :param portal_email: The portal_email of this EntryItem.  # noqa: E501
        :type: str
        """
        if portal_email is not None and len(portal_email) > 255:
            raise ValueError("Invalid value for `portal_email`, length must be less than or equal to `255`")  # noqa: E501

        self._portal_email = portal_email

    @property
    def portal_auth_provider_user_id(self):
        """Gets the portal_auth_provider_user_id of this EntryItem.  # noqa: E501

        Portal Auth Provider User  # noqa: E501

        :return: The portal_auth_provider_user_id of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._portal_auth_provider_user_id

    @portal_auth_provider_user_id.setter
    def portal_auth_provider_user_id(self, portal_auth_provider_user_id):
        """Sets the portal_auth_provider_user_id of this EntryItem.

        Portal Auth Provider User  # noqa: E501

        :param portal_auth_provider_user_id: The portal_auth_provider_user_id of this EntryItem.  # noqa: E501
        :type: str
        """
        if portal_auth_provider_user_id is not None and len(portal_auth_provider_user_id) > 255:
            raise ValueError("Invalid value for `portal_auth_provider_user_id`, length must be less than or equal to `255`")  # noqa: E501

        self._portal_auth_provider_user_id = portal_auth_provider_user_id

    @property
    def portal_reset_guid(self):
        """Gets the portal_reset_guid of this EntryItem.  # noqa: E501

        Portal Reset GUID  # noqa: E501

        :return: The portal_reset_guid of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._portal_reset_guid

    @portal_reset_guid.setter
    def portal_reset_guid(self, portal_reset_guid):
        """Sets the portal_reset_guid of this EntryItem.

        Portal Reset GUID  # noqa: E501

        :param portal_reset_guid: The portal_reset_guid of this EntryItem.  # noqa: E501
        :type: str
        """

        self._portal_reset_guid = portal_reset_guid

    @property
    def name_last(self):
        """Gets the name_last of this EntryItem.  # noqa: E501

        Name Last  # noqa: E501

        :return: The name_last of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._name_last

    @name_last.setter
    def name_last(self, name_last):
        """Sets the name_last of this EntryItem.

        Name Last  # noqa: E501

        :param name_last: The name_last of this EntryItem.  # noqa: E501
        :type: str
        """
        if name_last is not None and len(name_last) > 40:
            raise ValueError("Invalid value for `name_last`, length must be less than or equal to `40`")  # noqa: E501

        self._name_last = name_last

    @property
    def name_first(self):
        """Gets the name_first of this EntryItem.  # noqa: E501

        Name First  # noqa: E501

        :return: The name_first of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._name_first

    @name_first.setter
    def name_first(self, name_first):
        """Sets the name_first of this EntryItem.

        Name First  # noqa: E501

        :param name_first: The name_first of this EntryItem.  # noqa: E501
        :type: str
        """
        if name_first is not None and len(name_first) > 40:
            raise ValueError("Invalid value for `name_first`, length must be less than or equal to `40`")  # noqa: E501

        self._name_first = name_first

    @property
    def name_title(self):
        """Gets the name_title of this EntryItem.  # noqa: E501

        Name Title  # noqa: E501

        :return: The name_title of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._name_title

    @name_title.setter
    def name_title(self, name_title):
        """Sets the name_title of this EntryItem.

        Name Title  # noqa: E501

        :param name_title: The name_title of this EntryItem.  # noqa: E501
        :type: str
        """
        if name_title is not None and len(name_title) > 15:
            raise ValueError("Invalid value for `name_title`, length must be less than or equal to `15`")  # noqa: E501

        self._name_title = name_title

    @property
    def name_preferred(self):
        """Gets the name_preferred of this EntryItem.  # noqa: E501

        Name Preferred  # noqa: E501

        :return: The name_preferred of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._name_preferred

    @name_preferred.setter
    def name_preferred(self, name_preferred):
        """Sets the name_preferred of this EntryItem.

        Name Preferred  # noqa: E501

        :param name_preferred: The name_preferred of this EntryItem.  # noqa: E501
        :type: str
        """
        if name_preferred is not None and len(name_preferred) > 40:
            raise ValueError("Invalid value for `name_preferred`, length must be less than or equal to `40`")  # noqa: E501

        self._name_preferred = name_preferred

    @property
    def name_web(self):
        """Gets the name_web of this EntryItem.  # noqa: E501

        Name Web  # noqa: E501

        :return: The name_web of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._name_web

    @name_web.setter
    def name_web(self, name_web):
        """Sets the name_web of this EntryItem.

        Name Web  # noqa: E501

        :param name_web: The name_web of this EntryItem.  # noqa: E501
        :type: str
        """
        if name_web is not None and len(name_web) > 50:
            raise ValueError("Invalid value for `name_web`, length must be less than or equal to `50`")  # noqa: E501

        self._name_web = name_web

    @property
    def name_other(self):
        """Gets the name_other of this EntryItem.  # noqa: E501

        Name Other  # noqa: E501

        :return: The name_other of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._name_other

    @name_other.setter
    def name_other(self, name_other):
        """Sets the name_other of this EntryItem.

        Name Other  # noqa: E501

        :param name_other: The name_other of this EntryItem.  # noqa: E501
        :type: str
        """
        if name_other is not None and len(name_other) > 40:
            raise ValueError("Invalid value for `name_other`, length must be less than or equal to `40`")  # noqa: E501

        self._name_other = name_other

    @property
    def name_initials(self):
        """Gets the name_initials of this EntryItem.  # noqa: E501

        Name Initials  # noqa: E501

        :return: The name_initials of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._name_initials

    @name_initials.setter
    def name_initials(self, name_initials):
        """Sets the name_initials of this EntryItem.

        Name Initials  # noqa: E501

        :param name_initials: The name_initials of this EntryItem.  # noqa: E501
        :type: str
        """
        if name_initials is not None and len(name_initials) > 5:
            raise ValueError("Invalid value for `name_initials`, length must be less than or equal to `5`")  # noqa: E501

        self._name_initials = name_initials

    @property
    def name_sharer(self):
        """Gets the name_sharer of this EntryItem.  # noqa: E501

        Name Sharer  # noqa: E501

        :return: The name_sharer of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._name_sharer

    @name_sharer.setter
    def name_sharer(self, name_sharer):
        """Sets the name_sharer of this EntryItem.

        Name Sharer  # noqa: E501

        :param name_sharer: The name_sharer of this EntryItem.  # noqa: E501
        :type: str
        """
        if name_sharer is not None and len(name_sharer) > 40:
            raise ValueError("Invalid value for `name_sharer`, length must be less than or equal to `40`")  # noqa: E501

        self._name_sharer = name_sharer

    @property
    def gender_enum(self):
        """Gets the gender_enum of this EntryItem.  # noqa: E501

        Gender  # noqa: E501

        :return: The gender_enum of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._gender_enum

    @gender_enum.setter
    def gender_enum(self, gender_enum):
        """Sets the gender_enum of this EntryItem.

        Gender  # noqa: E501

        :param gender_enum: The gender_enum of this EntryItem.  # noqa: E501
        :type: str
        """

        self._gender_enum = gender_enum

    @property
    def birth_gender_enum(self):
        """Gets the birth_gender_enum of this EntryItem.  # noqa: E501

        Birth Gender  # noqa: E501

        :return: The birth_gender_enum of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._birth_gender_enum

    @birth_gender_enum.setter
    def birth_gender_enum(self, birth_gender_enum):
        """Sets the birth_gender_enum of this EntryItem.

        Birth Gender  # noqa: E501

        :param birth_gender_enum: The birth_gender_enum of this EntryItem.  # noqa: E501
        :type: str
        """

        self._birth_gender_enum = birth_gender_enum

    @property
    def directory_flag_privacy(self):
        """Gets the directory_flag_privacy of this EntryItem.  # noqa: E501

        Directory Flag Privacy  # noqa: E501

        :return: The directory_flag_privacy of this EntryItem.  # noqa: E501
        :rtype: bool
        """
        return self._directory_flag_privacy

    @directory_flag_privacy.setter
    def directory_flag_privacy(self, directory_flag_privacy):
        """Sets the directory_flag_privacy of this EntryItem.

        Directory Flag Privacy  # noqa: E501

        :param directory_flag_privacy: The directory_flag_privacy of this EntryItem.  # noqa: E501
        :type: bool
        """

        self._directory_flag_privacy = directory_flag_privacy

    @property
    def dob(self):
        """Gets the dob of this EntryItem.  # noqa: E501

        Date of Birth  # noqa: E501

        :return: The dob of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this EntryItem.

        Date of Birth  # noqa: E501

        :param dob: The dob of this EntryItem.  # noqa: E501
        :type: str
        """

        self._dob = dob

    @property
    def position(self):
        """Gets the position of this EntryItem.  # noqa: E501

        Position  # noqa: E501

        :return: The position of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this EntryItem.

        Position  # noqa: E501

        :param position: The position of this EntryItem.  # noqa: E501
        :type: str
        """
        if position is not None and len(position) > 50:
            raise ValueError("Invalid value for `position`, length must be less than or equal to `50`")  # noqa: E501

        self._position = position

    @property
    def id1(self):
        """Gets the id1 of this EntryItem.  # noqa: E501

        EmplID  # noqa: E501

        :return: The id1 of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._id1

    @id1.setter
    def id1(self, id1):
        """Sets the id1 of this EntryItem.

        EmplID  # noqa: E501

        :param id1: The id1 of this EntryItem.  # noqa: E501
        :type: str
        """
        if id1 is not None and len(id1) > 30:
            raise ValueError("Invalid value for `id1`, length must be less than or equal to `30`")  # noqa: E501

        self._id1 = id1

    @property
    def id2(self):
        """Gets the id2 of this EntryItem.  # noqa: E501

        POLYCARD ISO  # noqa: E501

        :return: The id2 of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._id2

    @id2.setter
    def id2(self, id2):
        """Sets the id2 of this EntryItem.

        POLYCARD ISO  # noqa: E501

        :param id2: The id2 of this EntryItem.  # noqa: E501
        :type: str
        """
        if id2 is not None and len(id2) > 30:
            raise ValueError("Invalid value for `id2`, length must be less than or equal to `30`")  # noqa: E501

        self._id2 = id2

    @property
    def id3(self):
        """Gets the id3 of this EntryItem.  # noqa: E501

        ID3  # noqa: E501

        :return: The id3 of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._id3

    @id3.setter
    def id3(self, id3):
        """Sets the id3 of this EntryItem.

        ID3  # noqa: E501

        :param id3: The id3 of this EntryItem.  # noqa: E501
        :type: str
        """
        if id3 is not None and len(id3) > 30:
            raise ValueError("Invalid value for `id3`, length must be less than or equal to `30`")  # noqa: E501

        self._id3 = id3

    @property
    def id4(self):
        """Gets the id4 of this EntryItem.  # noqa: E501

        ID4  # noqa: E501

        :return: The id4 of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._id4

    @id4.setter
    def id4(self, id4):
        """Sets the id4 of this EntryItem.

        ID4  # noqa: E501

        :param id4: The id4 of this EntryItem.  # noqa: E501
        :type: int
        """

        self._id4 = id4

    @property
    def id5(self):
        """Gets the id5 of this EntryItem.  # noqa: E501

        ID5  # noqa: E501

        :return: The id5 of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._id5

    @id5.setter
    def id5(self, id5):
        """Sets the id5 of this EntryItem.

        ID5  # noqa: E501

        :param id5: The id5 of this EntryItem.  # noqa: E501
        :type: int
        """

        self._id5 = id5

    @property
    def phone_process_to_account(self):
        """Gets the phone_process_to_account of this EntryItem.  # noqa: E501

        Phone Process To Account  # noqa: E501

        :return: The phone_process_to_account of this EntryItem.  # noqa: E501
        :rtype: bool
        """
        return self._phone_process_to_account

    @phone_process_to_account.setter
    def phone_process_to_account(self, phone_process_to_account):
        """Sets the phone_process_to_account of this EntryItem.

        Phone Process To Account  # noqa: E501

        :param phone_process_to_account: The phone_process_to_account of this EntryItem.  # noqa: E501
        :type: bool
        """

        self._phone_process_to_account = phone_process_to_account

    @property
    def phone_charge_type_id(self):
        """Gets the phone_charge_type_id of this EntryItem.  # noqa: E501

        Phone Charge Type  # noqa: E501

        :return: The phone_charge_type_id of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._phone_charge_type_id

    @phone_charge_type_id.setter
    def phone_charge_type_id(self, phone_charge_type_id):
        """Sets the phone_charge_type_id of this EntryItem.

        Phone Charge Type  # noqa: E501

        :param phone_charge_type_id: The phone_charge_type_id of this EntryItem.  # noqa: E501
        :type: int
        """

        self._phone_charge_type_id = phone_charge_type_id

    @property
    def phone_disable_value(self):
        """Gets the phone_disable_value of this EntryItem.  # noqa: E501

        Phone Disable Value  # noqa: E501

        :return: The phone_disable_value of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._phone_disable_value

    @phone_disable_value.setter
    def phone_disable_value(self, phone_disable_value):
        """Sets the phone_disable_value of this EntryItem.

        Phone Disable Value  # noqa: E501

        :param phone_disable_value: The phone_disable_value of this EntryItem.  # noqa: E501
        :type: str
        """

        self._phone_disable_value = phone_disable_value

    @property
    def phone_restrict_value(self):
        """Gets the phone_restrict_value of this EntryItem.  # noqa: E501

        Phone Restrict Value  # noqa: E501

        :return: The phone_restrict_value of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._phone_restrict_value

    @phone_restrict_value.setter
    def phone_restrict_value(self, phone_restrict_value):
        """Sets the phone_restrict_value of this EntryItem.

        Phone Restrict Value  # noqa: E501

        :param phone_restrict_value: The phone_restrict_value of this EntryItem.  # noqa: E501
        :type: str
        """

        self._phone_restrict_value = phone_restrict_value

    @property
    def phone_control_enum(self):
        """Gets the phone_control_enum of this EntryItem.  # noqa: E501

        Phone Control  # noqa: E501

        :return: The phone_control_enum of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._phone_control_enum

    @phone_control_enum.setter
    def phone_control_enum(self, phone_control_enum):
        """Sets the phone_control_enum of this EntryItem.

        Phone Control  # noqa: E501

        :param phone_control_enum: The phone_control_enum of this EntryItem.  # noqa: E501
        :type: str
        """

        self._phone_control_enum = phone_control_enum

    @property
    def tax_exemption_enum(self):
        """Gets the tax_exemption_enum of this EntryItem.  # noqa: E501

        Tax Exemption  # noqa: E501

        :return: The tax_exemption_enum of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_exemption_enum

    @tax_exemption_enum.setter
    def tax_exemption_enum(self, tax_exemption_enum):
        """Sets the tax_exemption_enum of this EntryItem.

        Tax Exemption  # noqa: E501

        :param tax_exemption_enum: The tax_exemption_enum of this EntryItem.  # noqa: E501
        :type: str
        """

        self._tax_exemption_enum = tax_exemption_enum

    @property
    def last_check_in_out_date(self):
        """Gets the last_check_in_out_date of this EntryItem.  # noqa: E501

        Last Check In Out Date  # noqa: E501

        :return: The last_check_in_out_date of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._last_check_in_out_date

    @last_check_in_out_date.setter
    def last_check_in_out_date(self, last_check_in_out_date):
        """Sets the last_check_in_out_date of this EntryItem.

        Last Check In Out Date  # noqa: E501

        :param last_check_in_out_date: The last_check_in_out_date of this EntryItem.  # noqa: E501
        :type: str
        """

        self._last_check_in_out_date = last_check_in_out_date

    @property
    def previous_entry_status_enum(self):
        """Gets the previous_entry_status_enum of this EntryItem.  # noqa: E501

        Previous Entry Status  # noqa: E501

        :return: The previous_entry_status_enum of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._previous_entry_status_enum

    @previous_entry_status_enum.setter
    def previous_entry_status_enum(self, previous_entry_status_enum):
        """Sets the previous_entry_status_enum of this EntryItem.

        Previous Entry Status  # noqa: E501

        :param previous_entry_status_enum: The previous_entry_status_enum of this EntryItem.  # noqa: E501
        :type: str
        """

        self._previous_entry_status_enum = previous_entry_status_enum

    @property
    def testing(self):
        """Gets the testing of this EntryItem.  # noqa: E501

        Testing  # noqa: E501

        :return: The testing of this EntryItem.  # noqa: E501
        :rtype: bool
        """
        return self._testing

    @testing.setter
    def testing(self, testing):
        """Sets the testing of this EntryItem.

        Testing  # noqa: E501

        :param testing: The testing of this EntryItem.  # noqa: E501
        :type: bool
        """

        self._testing = testing

    @property
    def user_security_user_id(self):
        """Gets the user_security_user_id of this EntryItem.  # noqa: E501

        User Security User  # noqa: E501

        :return: The user_security_user_id of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._user_security_user_id

    @user_security_user_id.setter
    def user_security_user_id(self, user_security_user_id):
        """Sets the user_security_user_id of this EntryItem.

        User Security User  # noqa: E501

        :param user_security_user_id: The user_security_user_id of this EntryItem.  # noqa: E501
        :type: int
        """

        self._user_security_user_id = user_security_user_id

    @property
    def security_user_id(self):
        """Gets the security_user_id of this EntryItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this EntryItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this EntryItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this EntryItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this EntryItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this EntryItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this EntryItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this EntryItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this EntryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this EntryItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this EntryItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def entry_guid(self):
        """Gets the entry_guid of this EntryItem.  # noqa: E501

        Entry GUID  # noqa: E501

        :return: The entry_guid of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._entry_guid

    @entry_guid.setter
    def entry_guid(self, entry_guid):
        """Sets the entry_guid of this EntryItem.

        Entry GUID  # noqa: E501

        :param entry_guid: The entry_guid of this EntryItem.  # noqa: E501
        :type: str
        """

        self._entry_guid = entry_guid

    @property
    def timestamp(self):
        """Gets the timestamp of this EntryItem.  # noqa: E501

        Timestamp  # noqa: E501

        :return: The timestamp of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this EntryItem.

        Timestamp  # noqa: E501

        :param timestamp: The timestamp of this EntryItem.  # noqa: E501
        :type: str
        """
        if timestamp is not None and len(timestamp) > 8:
            raise ValueError("Invalid value for `timestamp`, length must be less than or equal to `8`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def date_modified(self):
        """Gets the date_modified of this EntryItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EntryItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntryItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EntryItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
