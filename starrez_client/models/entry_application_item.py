# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntryApplicationItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_application_id': 'int',
        'entry_id': 'int',
        'application_status_id': 'int',
        'classification_id': 'int',
        'term_id': 'int',
        'returning': 'bool',
        'expected_arrival_date': 'str',
        'expected_arrival_date_latest': 'str',
        'expected_departure_date': 'str',
        'application_date': 'str',
        'rating': 'str',
        'cancel_date': 'str',
        'enquiry_date': 'str',
        'received_date': 'str',
        'complete_date': 'str',
        'received_fee': 'bool',
        'received_fee_web_payment_id': 'int',
        'received_fee_payment_id': 'int',
        'received_fee_date': 'str',
        'received_fee_amount': 'str',
        'received_deposit': 'bool',
        'received_deposit_waived': 'bool',
        'received_deposit_web_payment_id': 'int',
        'received_deposit_payment_id': 'int',
        'received_deposit_date': 'str',
        'received_deposit_amount': 'str',
        'received_photo_date': 'str',
        'offered_date': 'str',
        'offer_sent_date': 'str',
        'offer_reply_enum': 'str',
        'offer_reply_date': 'str',
        'offer_reply_reason': 'str',
        'contract_signed_date': 'str',
        'preference_comments': 'str',
        'room_preference_comments': 'str',
        'comments': 'str',
        'comments_internal': 'str',
        'web': 'bool',
        'room_selection_timeslot': 'str',
        'room_selection_number': 'int',
        'roommate_group_id': 'int',
        'room_mate_group_sort_order': 'int',
        'room_mate_show_in_search': 'bool',
        'room_mate_description': 'str',
        'allocate_option_enum': 'str',
        'portal_tracking_only': 'bool',
        'table_id': 'int',
        'table_name': 'str',
        'custom_bit1': 'bool',
        'custom_bit2': 'bool',
        'custom_bit3': 'bool',
        'custom_bit4': 'bool',
        'custom_date1': 'str',
        'custom_date2': 'str',
        'custom_date3': 'str',
        'custom_date4': 'str',
        'security_user_id': 'int',
        'date_created': 'datetime',
        'timestamp': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'entry_application_id': 'EntryApplicationID',
        'entry_id': 'EntryID',
        'application_status_id': 'ApplicationStatusID',
        'classification_id': 'ClassificationID',
        'term_id': 'TermID',
        'returning': 'Returning',
        'expected_arrival_date': 'ExpectedArrivalDate',
        'expected_arrival_date_latest': 'ExpectedArrivalDateLatest',
        'expected_departure_date': 'ExpectedDepartureDate',
        'application_date': 'ApplicationDate',
        'rating': 'Rating',
        'cancel_date': 'CancelDate',
        'enquiry_date': 'EnquiryDate',
        'received_date': 'ReceivedDate',
        'complete_date': 'CompleteDate',
        'received_fee': 'ReceivedFee',
        'received_fee_web_payment_id': 'ReceivedFee_WebPaymentID',
        'received_fee_payment_id': 'ReceivedFee_PaymentID',
        'received_fee_date': 'ReceivedFeeDate',
        'received_fee_amount': 'ReceivedFeeAmount',
        'received_deposit': 'ReceivedDeposit',
        'received_deposit_waived': 'ReceivedDepositWaived',
        'received_deposit_web_payment_id': 'ReceivedDeposit_WebPaymentID',
        'received_deposit_payment_id': 'ReceivedDeposit_PaymentID',
        'received_deposit_date': 'ReceivedDepositDate',
        'received_deposit_amount': 'ReceivedDepositAmount',
        'received_photo_date': 'ReceivedPhotoDate',
        'offered_date': 'OfferedDate',
        'offer_sent_date': 'OfferSentDate',
        'offer_reply_enum': 'OfferReplyEnum',
        'offer_reply_date': 'OfferReplyDate',
        'offer_reply_reason': 'OfferReplyReason',
        'contract_signed_date': 'ContractSignedDate',
        'preference_comments': 'PreferenceComments',
        'room_preference_comments': 'RoomPreferenceComments',
        'comments': 'Comments',
        'comments_internal': 'CommentsInternal',
        'web': 'Web',
        'room_selection_timeslot': 'RoomSelectionTimeslot',
        'room_selection_number': 'RoomSelectionNumber',
        'roommate_group_id': 'RoommateGroupID',
        'room_mate_group_sort_order': 'RoomMateGroupSortOrder',
        'room_mate_show_in_search': 'RoomMateShowInSearch',
        'room_mate_description': 'RoomMateDescription',
        'allocate_option_enum': 'AllocateOptionEnum',
        'portal_tracking_only': 'PortalTrackingOnly',
        'table_id': 'TableID',
        'table_name': 'TableName',
        'custom_bit1': 'CustomBit1',
        'custom_bit2': 'CustomBit2',
        'custom_bit3': 'CustomBit3',
        'custom_bit4': 'CustomBit4',
        'custom_date1': 'CustomDate1',
        'custom_date2': 'CustomDate2',
        'custom_date3': 'CustomDate3',
        'custom_date4': 'CustomDate4',
        'security_user_id': 'SecurityUserID',
        'date_created': 'DateCreated',
        'timestamp': 'timestamp',
        'date_modified': 'DateModified'
    }

    def __init__(self, entry_application_id=None, entry_id=None, application_status_id=None, classification_id=None, term_id=None, returning=None, expected_arrival_date=None, expected_arrival_date_latest=None, expected_departure_date=None, application_date=None, rating=None, cancel_date=None, enquiry_date=None, received_date=None, complete_date=None, received_fee=None, received_fee_web_payment_id=None, received_fee_payment_id=None, received_fee_date=None, received_fee_amount=None, received_deposit=None, received_deposit_waived=None, received_deposit_web_payment_id=None, received_deposit_payment_id=None, received_deposit_date=None, received_deposit_amount=None, received_photo_date=None, offered_date=None, offer_sent_date=None, offer_reply_enum=None, offer_reply_date=None, offer_reply_reason=None, contract_signed_date=None, preference_comments=None, room_preference_comments=None, comments=None, comments_internal=None, web=None, room_selection_timeslot=None, room_selection_number=None, roommate_group_id=None, room_mate_group_sort_order=None, room_mate_show_in_search=None, room_mate_description=None, allocate_option_enum=None, portal_tracking_only=None, table_id=None, table_name=None, custom_bit1=None, custom_bit2=None, custom_bit3=None, custom_bit4=None, custom_date1=None, custom_date2=None, custom_date3=None, custom_date4=None, security_user_id=None, date_created=None, timestamp=None, date_modified=None):  # noqa: E501
        """EntryApplicationItem - a model defined in Swagger"""  # noqa: E501

        self._entry_application_id = None
        self._entry_id = None
        self._application_status_id = None
        self._classification_id = None
        self._term_id = None
        self._returning = None
        self._expected_arrival_date = None
        self._expected_arrival_date_latest = None
        self._expected_departure_date = None
        self._application_date = None
        self._rating = None
        self._cancel_date = None
        self._enquiry_date = None
        self._received_date = None
        self._complete_date = None
        self._received_fee = None
        self._received_fee_web_payment_id = None
        self._received_fee_payment_id = None
        self._received_fee_date = None
        self._received_fee_amount = None
        self._received_deposit = None
        self._received_deposit_waived = None
        self._received_deposit_web_payment_id = None
        self._received_deposit_payment_id = None
        self._received_deposit_date = None
        self._received_deposit_amount = None
        self._received_photo_date = None
        self._offered_date = None
        self._offer_sent_date = None
        self._offer_reply_enum = None
        self._offer_reply_date = None
        self._offer_reply_reason = None
        self._contract_signed_date = None
        self._preference_comments = None
        self._room_preference_comments = None
        self._comments = None
        self._comments_internal = None
        self._web = None
        self._room_selection_timeslot = None
        self._room_selection_number = None
        self._roommate_group_id = None
        self._room_mate_group_sort_order = None
        self._room_mate_show_in_search = None
        self._room_mate_description = None
        self._allocate_option_enum = None
        self._portal_tracking_only = None
        self._table_id = None
        self._table_name = None
        self._custom_bit1 = None
        self._custom_bit2 = None
        self._custom_bit3 = None
        self._custom_bit4 = None
        self._custom_date1 = None
        self._custom_date2 = None
        self._custom_date3 = None
        self._custom_date4 = None
        self._security_user_id = None
        self._date_created = None
        self._timestamp = None
        self._date_modified = None
        self.discriminator = None

        if entry_application_id is not None:
            self.entry_application_id = entry_application_id
        if entry_id is not None:
            self.entry_id = entry_id
        if application_status_id is not None:
            self.application_status_id = application_status_id
        if classification_id is not None:
            self.classification_id = classification_id
        if term_id is not None:
            self.term_id = term_id
        if returning is not None:
            self.returning = returning
        if expected_arrival_date is not None:
            self.expected_arrival_date = expected_arrival_date
        if expected_arrival_date_latest is not None:
            self.expected_arrival_date_latest = expected_arrival_date_latest
        if expected_departure_date is not None:
            self.expected_departure_date = expected_departure_date
        if application_date is not None:
            self.application_date = application_date
        if rating is not None:
            self.rating = rating
        if cancel_date is not None:
            self.cancel_date = cancel_date
        if enquiry_date is not None:
            self.enquiry_date = enquiry_date
        if received_date is not None:
            self.received_date = received_date
        if complete_date is not None:
            self.complete_date = complete_date
        if received_fee is not None:
            self.received_fee = received_fee
        if received_fee_web_payment_id is not None:
            self.received_fee_web_payment_id = received_fee_web_payment_id
        if received_fee_payment_id is not None:
            self.received_fee_payment_id = received_fee_payment_id
        if received_fee_date is not None:
            self.received_fee_date = received_fee_date
        if received_fee_amount is not None:
            self.received_fee_amount = received_fee_amount
        if received_deposit is not None:
            self.received_deposit = received_deposit
        if received_deposit_waived is not None:
            self.received_deposit_waived = received_deposit_waived
        if received_deposit_web_payment_id is not None:
            self.received_deposit_web_payment_id = received_deposit_web_payment_id
        if received_deposit_payment_id is not None:
            self.received_deposit_payment_id = received_deposit_payment_id
        if received_deposit_date is not None:
            self.received_deposit_date = received_deposit_date
        if received_deposit_amount is not None:
            self.received_deposit_amount = received_deposit_amount
        if received_photo_date is not None:
            self.received_photo_date = received_photo_date
        if offered_date is not None:
            self.offered_date = offered_date
        if offer_sent_date is not None:
            self.offer_sent_date = offer_sent_date
        if offer_reply_enum is not None:
            self.offer_reply_enum = offer_reply_enum
        if offer_reply_date is not None:
            self.offer_reply_date = offer_reply_date
        if offer_reply_reason is not None:
            self.offer_reply_reason = offer_reply_reason
        if contract_signed_date is not None:
            self.contract_signed_date = contract_signed_date
        if preference_comments is not None:
            self.preference_comments = preference_comments
        if room_preference_comments is not None:
            self.room_preference_comments = room_preference_comments
        if comments is not None:
            self.comments = comments
        if comments_internal is not None:
            self.comments_internal = comments_internal
        if web is not None:
            self.web = web
        if room_selection_timeslot is not None:
            self.room_selection_timeslot = room_selection_timeslot
        if room_selection_number is not None:
            self.room_selection_number = room_selection_number
        if roommate_group_id is not None:
            self.roommate_group_id = roommate_group_id
        if room_mate_group_sort_order is not None:
            self.room_mate_group_sort_order = room_mate_group_sort_order
        if room_mate_show_in_search is not None:
            self.room_mate_show_in_search = room_mate_show_in_search
        if room_mate_description is not None:
            self.room_mate_description = room_mate_description
        if allocate_option_enum is not None:
            self.allocate_option_enum = allocate_option_enum
        if portal_tracking_only is not None:
            self.portal_tracking_only = portal_tracking_only
        if table_id is not None:
            self.table_id = table_id
        if table_name is not None:
            self.table_name = table_name
        if custom_bit1 is not None:
            self.custom_bit1 = custom_bit1
        if custom_bit2 is not None:
            self.custom_bit2 = custom_bit2
        if custom_bit3 is not None:
            self.custom_bit3 = custom_bit3
        if custom_bit4 is not None:
            self.custom_bit4 = custom_bit4
        if custom_date1 is not None:
            self.custom_date1 = custom_date1
        if custom_date2 is not None:
            self.custom_date2 = custom_date2
        if custom_date3 is not None:
            self.custom_date3 = custom_date3
        if custom_date4 is not None:
            self.custom_date4 = custom_date4
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if date_created is not None:
            self.date_created = date_created
        if timestamp is not None:
            self.timestamp = timestamp
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def entry_application_id(self):
        """Gets the entry_application_id of this EntryApplicationItem.  # noqa: E501

        Entry Application  # noqa: E501

        :return: The entry_application_id of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_application_id

    @entry_application_id.setter
    def entry_application_id(self, entry_application_id):
        """Sets the entry_application_id of this EntryApplicationItem.

        Entry Application  # noqa: E501

        :param entry_application_id: The entry_application_id of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._entry_application_id = entry_application_id

    @property
    def entry_id(self):
        """Gets the entry_id of this EntryApplicationItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this EntryApplicationItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def application_status_id(self):
        """Gets the application_status_id of this EntryApplicationItem.  # noqa: E501

        Application Status  # noqa: E501

        :return: The application_status_id of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._application_status_id

    @application_status_id.setter
    def application_status_id(self, application_status_id):
        """Sets the application_status_id of this EntryApplicationItem.

        Application Status  # noqa: E501

        :param application_status_id: The application_status_id of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._application_status_id = application_status_id

    @property
    def classification_id(self):
        """Gets the classification_id of this EntryApplicationItem.  # noqa: E501

        Classification  # noqa: E501

        :return: The classification_id of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._classification_id

    @classification_id.setter
    def classification_id(self, classification_id):
        """Sets the classification_id of this EntryApplicationItem.

        Classification  # noqa: E501

        :param classification_id: The classification_id of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._classification_id = classification_id

    @property
    def term_id(self):
        """Gets the term_id of this EntryApplicationItem.  # noqa: E501

        Term  # noqa: E501

        :return: The term_id of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._term_id

    @term_id.setter
    def term_id(self, term_id):
        """Sets the term_id of this EntryApplicationItem.

        Term  # noqa: E501

        :param term_id: The term_id of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._term_id = term_id

    @property
    def returning(self):
        """Gets the returning of this EntryApplicationItem.  # noqa: E501

        Returning  # noqa: E501

        :return: The returning of this EntryApplicationItem.  # noqa: E501
        :rtype: bool
        """
        return self._returning

    @returning.setter
    def returning(self, returning):
        """Sets the returning of this EntryApplicationItem.

        Returning  # noqa: E501

        :param returning: The returning of this EntryApplicationItem.  # noqa: E501
        :type: bool
        """

        self._returning = returning

    @property
    def expected_arrival_date(self):
        """Gets the expected_arrival_date of this EntryApplicationItem.  # noqa: E501

        Expected Arrival Date  # noqa: E501

        :return: The expected_arrival_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._expected_arrival_date

    @expected_arrival_date.setter
    def expected_arrival_date(self, expected_arrival_date):
        """Sets the expected_arrival_date of this EntryApplicationItem.

        Expected Arrival Date  # noqa: E501

        :param expected_arrival_date: The expected_arrival_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._expected_arrival_date = expected_arrival_date

    @property
    def expected_arrival_date_latest(self):
        """Gets the expected_arrival_date_latest of this EntryApplicationItem.  # noqa: E501

        Expected Arrival Date Latest  # noqa: E501

        :return: The expected_arrival_date_latest of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._expected_arrival_date_latest

    @expected_arrival_date_latest.setter
    def expected_arrival_date_latest(self, expected_arrival_date_latest):
        """Sets the expected_arrival_date_latest of this EntryApplicationItem.

        Expected Arrival Date Latest  # noqa: E501

        :param expected_arrival_date_latest: The expected_arrival_date_latest of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._expected_arrival_date_latest = expected_arrival_date_latest

    @property
    def expected_departure_date(self):
        """Gets the expected_departure_date of this EntryApplicationItem.  # noqa: E501

        Expected Departure Date  # noqa: E501

        :return: The expected_departure_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._expected_departure_date

    @expected_departure_date.setter
    def expected_departure_date(self, expected_departure_date):
        """Sets the expected_departure_date of this EntryApplicationItem.

        Expected Departure Date  # noqa: E501

        :param expected_departure_date: The expected_departure_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._expected_departure_date = expected_departure_date

    @property
    def application_date(self):
        """Gets the application_date of this EntryApplicationItem.  # noqa: E501

        Application Date  # noqa: E501

        :return: The application_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._application_date

    @application_date.setter
    def application_date(self, application_date):
        """Sets the application_date of this EntryApplicationItem.

        Application Date  # noqa: E501

        :param application_date: The application_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._application_date = application_date

    @property
    def rating(self):
        """Gets the rating of this EntryApplicationItem.  # noqa: E501

        Rating  # noqa: E501

        :return: The rating of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this EntryApplicationItem.

        Rating  # noqa: E501

        :param rating: The rating of this EntryApplicationItem.  # noqa: E501
        :type: str
        """
        if rating is not None and len(rating) > 10:
            raise ValueError("Invalid value for `rating`, length must be less than or equal to `10`")  # noqa: E501

        self._rating = rating

    @property
    def cancel_date(self):
        """Gets the cancel_date of this EntryApplicationItem.  # noqa: E501

        Cancel Date  # noqa: E501

        :return: The cancel_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._cancel_date

    @cancel_date.setter
    def cancel_date(self, cancel_date):
        """Sets the cancel_date of this EntryApplicationItem.

        Cancel Date  # noqa: E501

        :param cancel_date: The cancel_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._cancel_date = cancel_date

    @property
    def enquiry_date(self):
        """Gets the enquiry_date of this EntryApplicationItem.  # noqa: E501

        Enquiry Date  # noqa: E501

        :return: The enquiry_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._enquiry_date

    @enquiry_date.setter
    def enquiry_date(self, enquiry_date):
        """Sets the enquiry_date of this EntryApplicationItem.

        Enquiry Date  # noqa: E501

        :param enquiry_date: The enquiry_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._enquiry_date = enquiry_date

    @property
    def received_date(self):
        """Gets the received_date of this EntryApplicationItem.  # noqa: E501

        Received Date  # noqa: E501

        :return: The received_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._received_date

    @received_date.setter
    def received_date(self, received_date):
        """Sets the received_date of this EntryApplicationItem.

        Received Date  # noqa: E501

        :param received_date: The received_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._received_date = received_date

    @property
    def complete_date(self):
        """Gets the complete_date of this EntryApplicationItem.  # noqa: E501

        Complete Date  # noqa: E501

        :return: The complete_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._complete_date

    @complete_date.setter
    def complete_date(self, complete_date):
        """Sets the complete_date of this EntryApplicationItem.

        Complete Date  # noqa: E501

        :param complete_date: The complete_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._complete_date = complete_date

    @property
    def received_fee(self):
        """Gets the received_fee of this EntryApplicationItem.  # noqa: E501

        Received Fee  # noqa: E501

        :return: The received_fee of this EntryApplicationItem.  # noqa: E501
        :rtype: bool
        """
        return self._received_fee

    @received_fee.setter
    def received_fee(self, received_fee):
        """Sets the received_fee of this EntryApplicationItem.

        Received Fee  # noqa: E501

        :param received_fee: The received_fee of this EntryApplicationItem.  # noqa: E501
        :type: bool
        """

        self._received_fee = received_fee

    @property
    def received_fee_web_payment_id(self):
        """Gets the received_fee_web_payment_id of this EntryApplicationItem.  # noqa: E501

        Received Fee Web Payment  # noqa: E501

        :return: The received_fee_web_payment_id of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._received_fee_web_payment_id

    @received_fee_web_payment_id.setter
    def received_fee_web_payment_id(self, received_fee_web_payment_id):
        """Sets the received_fee_web_payment_id of this EntryApplicationItem.

        Received Fee Web Payment  # noqa: E501

        :param received_fee_web_payment_id: The received_fee_web_payment_id of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._received_fee_web_payment_id = received_fee_web_payment_id

    @property
    def received_fee_payment_id(self):
        """Gets the received_fee_payment_id of this EntryApplicationItem.  # noqa: E501

        Received Fee Payment  # noqa: E501

        :return: The received_fee_payment_id of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._received_fee_payment_id

    @received_fee_payment_id.setter
    def received_fee_payment_id(self, received_fee_payment_id):
        """Sets the received_fee_payment_id of this EntryApplicationItem.

        Received Fee Payment  # noqa: E501

        :param received_fee_payment_id: The received_fee_payment_id of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._received_fee_payment_id = received_fee_payment_id

    @property
    def received_fee_date(self):
        """Gets the received_fee_date of this EntryApplicationItem.  # noqa: E501

        Received Fee Date  # noqa: E501

        :return: The received_fee_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._received_fee_date

    @received_fee_date.setter
    def received_fee_date(self, received_fee_date):
        """Sets the received_fee_date of this EntryApplicationItem.

        Received Fee Date  # noqa: E501

        :param received_fee_date: The received_fee_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._received_fee_date = received_fee_date

    @property
    def received_fee_amount(self):
        """Gets the received_fee_amount of this EntryApplicationItem.  # noqa: E501

        Received Fee Amount  # noqa: E501

        :return: The received_fee_amount of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._received_fee_amount

    @received_fee_amount.setter
    def received_fee_amount(self, received_fee_amount):
        """Sets the received_fee_amount of this EntryApplicationItem.

        Received Fee Amount  # noqa: E501

        :param received_fee_amount: The received_fee_amount of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._received_fee_amount = received_fee_amount

    @property
    def received_deposit(self):
        """Gets the received_deposit of this EntryApplicationItem.  # noqa: E501

        Received Deposit  # noqa: E501

        :return: The received_deposit of this EntryApplicationItem.  # noqa: E501
        :rtype: bool
        """
        return self._received_deposit

    @received_deposit.setter
    def received_deposit(self, received_deposit):
        """Sets the received_deposit of this EntryApplicationItem.

        Received Deposit  # noqa: E501

        :param received_deposit: The received_deposit of this EntryApplicationItem.  # noqa: E501
        :type: bool
        """

        self._received_deposit = received_deposit

    @property
    def received_deposit_waived(self):
        """Gets the received_deposit_waived of this EntryApplicationItem.  # noqa: E501

        Received Deposit Waived  # noqa: E501

        :return: The received_deposit_waived of this EntryApplicationItem.  # noqa: E501
        :rtype: bool
        """
        return self._received_deposit_waived

    @received_deposit_waived.setter
    def received_deposit_waived(self, received_deposit_waived):
        """Sets the received_deposit_waived of this EntryApplicationItem.

        Received Deposit Waived  # noqa: E501

        :param received_deposit_waived: The received_deposit_waived of this EntryApplicationItem.  # noqa: E501
        :type: bool
        """

        self._received_deposit_waived = received_deposit_waived

    @property
    def received_deposit_web_payment_id(self):
        """Gets the received_deposit_web_payment_id of this EntryApplicationItem.  # noqa: E501

        Received Deposit Web Payment  # noqa: E501

        :return: The received_deposit_web_payment_id of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._received_deposit_web_payment_id

    @received_deposit_web_payment_id.setter
    def received_deposit_web_payment_id(self, received_deposit_web_payment_id):
        """Sets the received_deposit_web_payment_id of this EntryApplicationItem.

        Received Deposit Web Payment  # noqa: E501

        :param received_deposit_web_payment_id: The received_deposit_web_payment_id of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._received_deposit_web_payment_id = received_deposit_web_payment_id

    @property
    def received_deposit_payment_id(self):
        """Gets the received_deposit_payment_id of this EntryApplicationItem.  # noqa: E501

        Received Deposit Payment  # noqa: E501

        :return: The received_deposit_payment_id of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._received_deposit_payment_id

    @received_deposit_payment_id.setter
    def received_deposit_payment_id(self, received_deposit_payment_id):
        """Sets the received_deposit_payment_id of this EntryApplicationItem.

        Received Deposit Payment  # noqa: E501

        :param received_deposit_payment_id: The received_deposit_payment_id of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._received_deposit_payment_id = received_deposit_payment_id

    @property
    def received_deposit_date(self):
        """Gets the received_deposit_date of this EntryApplicationItem.  # noqa: E501

        Received Deposit Date  # noqa: E501

        :return: The received_deposit_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._received_deposit_date

    @received_deposit_date.setter
    def received_deposit_date(self, received_deposit_date):
        """Sets the received_deposit_date of this EntryApplicationItem.

        Received Deposit Date  # noqa: E501

        :param received_deposit_date: The received_deposit_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._received_deposit_date = received_deposit_date

    @property
    def received_deposit_amount(self):
        """Gets the received_deposit_amount of this EntryApplicationItem.  # noqa: E501

        Received Deposit Amount  # noqa: E501

        :return: The received_deposit_amount of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._received_deposit_amount

    @received_deposit_amount.setter
    def received_deposit_amount(self, received_deposit_amount):
        """Sets the received_deposit_amount of this EntryApplicationItem.

        Received Deposit Amount  # noqa: E501

        :param received_deposit_amount: The received_deposit_amount of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._received_deposit_amount = received_deposit_amount

    @property
    def received_photo_date(self):
        """Gets the received_photo_date of this EntryApplicationItem.  # noqa: E501

        Received Photo Date  # noqa: E501

        :return: The received_photo_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._received_photo_date

    @received_photo_date.setter
    def received_photo_date(self, received_photo_date):
        """Sets the received_photo_date of this EntryApplicationItem.

        Received Photo Date  # noqa: E501

        :param received_photo_date: The received_photo_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._received_photo_date = received_photo_date

    @property
    def offered_date(self):
        """Gets the offered_date of this EntryApplicationItem.  # noqa: E501

        Offered Date  # noqa: E501

        :return: The offered_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._offered_date

    @offered_date.setter
    def offered_date(self, offered_date):
        """Sets the offered_date of this EntryApplicationItem.

        Offered Date  # noqa: E501

        :param offered_date: The offered_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._offered_date = offered_date

    @property
    def offer_sent_date(self):
        """Gets the offer_sent_date of this EntryApplicationItem.  # noqa: E501

        Offer Sent Date  # noqa: E501

        :return: The offer_sent_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._offer_sent_date

    @offer_sent_date.setter
    def offer_sent_date(self, offer_sent_date):
        """Sets the offer_sent_date of this EntryApplicationItem.

        Offer Sent Date  # noqa: E501

        :param offer_sent_date: The offer_sent_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._offer_sent_date = offer_sent_date

    @property
    def offer_reply_enum(self):
        """Gets the offer_reply_enum of this EntryApplicationItem.  # noqa: E501

        Offer Reply  # noqa: E501

        :return: The offer_reply_enum of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._offer_reply_enum

    @offer_reply_enum.setter
    def offer_reply_enum(self, offer_reply_enum):
        """Sets the offer_reply_enum of this EntryApplicationItem.

        Offer Reply  # noqa: E501

        :param offer_reply_enum: The offer_reply_enum of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._offer_reply_enum = offer_reply_enum

    @property
    def offer_reply_date(self):
        """Gets the offer_reply_date of this EntryApplicationItem.  # noqa: E501

        Offer Reply Date  # noqa: E501

        :return: The offer_reply_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._offer_reply_date

    @offer_reply_date.setter
    def offer_reply_date(self, offer_reply_date):
        """Sets the offer_reply_date of this EntryApplicationItem.

        Offer Reply Date  # noqa: E501

        :param offer_reply_date: The offer_reply_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._offer_reply_date = offer_reply_date

    @property
    def offer_reply_reason(self):
        """Gets the offer_reply_reason of this EntryApplicationItem.  # noqa: E501

        Offer Reply Reason  # noqa: E501

        :return: The offer_reply_reason of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._offer_reply_reason

    @offer_reply_reason.setter
    def offer_reply_reason(self, offer_reply_reason):
        """Sets the offer_reply_reason of this EntryApplicationItem.

        Offer Reply Reason  # noqa: E501

        :param offer_reply_reason: The offer_reply_reason of this EntryApplicationItem.  # noqa: E501
        :type: str
        """
        if offer_reply_reason is not None and len(offer_reply_reason) > 30:
            raise ValueError("Invalid value for `offer_reply_reason`, length must be less than or equal to `30`")  # noqa: E501

        self._offer_reply_reason = offer_reply_reason

    @property
    def contract_signed_date(self):
        """Gets the contract_signed_date of this EntryApplicationItem.  # noqa: E501

        Contract Signed Date  # noqa: E501

        :return: The contract_signed_date of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._contract_signed_date

    @contract_signed_date.setter
    def contract_signed_date(self, contract_signed_date):
        """Sets the contract_signed_date of this EntryApplicationItem.

        Contract Signed Date  # noqa: E501

        :param contract_signed_date: The contract_signed_date of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._contract_signed_date = contract_signed_date

    @property
    def preference_comments(self):
        """Gets the preference_comments of this EntryApplicationItem.  # noqa: E501

        Preference Comments  # noqa: E501

        :return: The preference_comments of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._preference_comments

    @preference_comments.setter
    def preference_comments(self, preference_comments):
        """Sets the preference_comments of this EntryApplicationItem.

        Preference Comments  # noqa: E501

        :param preference_comments: The preference_comments of this EntryApplicationItem.  # noqa: E501
        :type: str
        """
        if preference_comments is not None and len(preference_comments) > 500:
            raise ValueError("Invalid value for `preference_comments`, length must be less than or equal to `500`")  # noqa: E501

        self._preference_comments = preference_comments

    @property
    def room_preference_comments(self):
        """Gets the room_preference_comments of this EntryApplicationItem.  # noqa: E501

        Room Preference Comments  # noqa: E501

        :return: The room_preference_comments of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._room_preference_comments

    @room_preference_comments.setter
    def room_preference_comments(self, room_preference_comments):
        """Sets the room_preference_comments of this EntryApplicationItem.

        Room Preference Comments  # noqa: E501

        :param room_preference_comments: The room_preference_comments of this EntryApplicationItem.  # noqa: E501
        :type: str
        """
        if room_preference_comments is not None and len(room_preference_comments) > 500:
            raise ValueError("Invalid value for `room_preference_comments`, length must be less than or equal to `500`")  # noqa: E501

        self._room_preference_comments = room_preference_comments

    @property
    def comments(self):
        """Gets the comments of this EntryApplicationItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EntryApplicationItem.

        Comments  # noqa: E501

        :param comments: The comments of this EntryApplicationItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 5000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `5000`")  # noqa: E501

        self._comments = comments

    @property
    def comments_internal(self):
        """Gets the comments_internal of this EntryApplicationItem.  # noqa: E501

        Comments Internal  # noqa: E501

        :return: The comments_internal of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._comments_internal

    @comments_internal.setter
    def comments_internal(self, comments_internal):
        """Sets the comments_internal of this EntryApplicationItem.

        Comments Internal  # noqa: E501

        :param comments_internal: The comments_internal of this EntryApplicationItem.  # noqa: E501
        :type: str
        """
        if comments_internal is not None and len(comments_internal) > 500:
            raise ValueError("Invalid value for `comments_internal`, length must be less than or equal to `500`")  # noqa: E501

        self._comments_internal = comments_internal

    @property
    def web(self):
        """Gets the web of this EntryApplicationItem.  # noqa: E501

        Web  # noqa: E501

        :return: The web of this EntryApplicationItem.  # noqa: E501
        :rtype: bool
        """
        return self._web

    @web.setter
    def web(self, web):
        """Sets the web of this EntryApplicationItem.

        Web  # noqa: E501

        :param web: The web of this EntryApplicationItem.  # noqa: E501
        :type: bool
        """

        self._web = web

    @property
    def room_selection_timeslot(self):
        """Gets the room_selection_timeslot of this EntryApplicationItem.  # noqa: E501

        Room Selection Timeslot  # noqa: E501

        :return: The room_selection_timeslot of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._room_selection_timeslot

    @room_selection_timeslot.setter
    def room_selection_timeslot(self, room_selection_timeslot):
        """Sets the room_selection_timeslot of this EntryApplicationItem.

        Room Selection Timeslot  # noqa: E501

        :param room_selection_timeslot: The room_selection_timeslot of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._room_selection_timeslot = room_selection_timeslot

    @property
    def room_selection_number(self):
        """Gets the room_selection_number of this EntryApplicationItem.  # noqa: E501

        Room Selection Number  # noqa: E501

        :return: The room_selection_number of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._room_selection_number

    @room_selection_number.setter
    def room_selection_number(self, room_selection_number):
        """Sets the room_selection_number of this EntryApplicationItem.

        Room Selection Number  # noqa: E501

        :param room_selection_number: The room_selection_number of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._room_selection_number = room_selection_number

    @property
    def roommate_group_id(self):
        """Gets the roommate_group_id of this EntryApplicationItem.  # noqa: E501

        Roommate Group  # noqa: E501

        :return: The roommate_group_id of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._roommate_group_id

    @roommate_group_id.setter
    def roommate_group_id(self, roommate_group_id):
        """Sets the roommate_group_id of this EntryApplicationItem.

        Roommate Group  # noqa: E501

        :param roommate_group_id: The roommate_group_id of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._roommate_group_id = roommate_group_id

    @property
    def room_mate_group_sort_order(self):
        """Gets the room_mate_group_sort_order of this EntryApplicationItem.  # noqa: E501

        Room Mate Group Sort Order  # noqa: E501

        :return: The room_mate_group_sort_order of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._room_mate_group_sort_order

    @room_mate_group_sort_order.setter
    def room_mate_group_sort_order(self, room_mate_group_sort_order):
        """Sets the room_mate_group_sort_order of this EntryApplicationItem.

        Room Mate Group Sort Order  # noqa: E501

        :param room_mate_group_sort_order: The room_mate_group_sort_order of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._room_mate_group_sort_order = room_mate_group_sort_order

    @property
    def room_mate_show_in_search(self):
        """Gets the room_mate_show_in_search of this EntryApplicationItem.  # noqa: E501

        Room Mate Show In Search  # noqa: E501

        :return: The room_mate_show_in_search of this EntryApplicationItem.  # noqa: E501
        :rtype: bool
        """
        return self._room_mate_show_in_search

    @room_mate_show_in_search.setter
    def room_mate_show_in_search(self, room_mate_show_in_search):
        """Sets the room_mate_show_in_search of this EntryApplicationItem.

        Room Mate Show In Search  # noqa: E501

        :param room_mate_show_in_search: The room_mate_show_in_search of this EntryApplicationItem.  # noqa: E501
        :type: bool
        """

        self._room_mate_show_in_search = room_mate_show_in_search

    @property
    def room_mate_description(self):
        """Gets the room_mate_description of this EntryApplicationItem.  # noqa: E501

        Room Mate Description  # noqa: E501

        :return: The room_mate_description of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._room_mate_description

    @room_mate_description.setter
    def room_mate_description(self, room_mate_description):
        """Sets the room_mate_description of this EntryApplicationItem.

        Room Mate Description  # noqa: E501

        :param room_mate_description: The room_mate_description of this EntryApplicationItem.  # noqa: E501
        :type: str
        """
        if room_mate_description is not None and len(room_mate_description) > 500:
            raise ValueError("Invalid value for `room_mate_description`, length must be less than or equal to `500`")  # noqa: E501

        self._room_mate_description = room_mate_description

    @property
    def allocate_option_enum(self):
        """Gets the allocate_option_enum of this EntryApplicationItem.  # noqa: E501

        Allocate Option  # noqa: E501

        :return: The allocate_option_enum of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._allocate_option_enum

    @allocate_option_enum.setter
    def allocate_option_enum(self, allocate_option_enum):
        """Sets the allocate_option_enum of this EntryApplicationItem.

        Allocate Option  # noqa: E501

        :param allocate_option_enum: The allocate_option_enum of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._allocate_option_enum = allocate_option_enum

    @property
    def portal_tracking_only(self):
        """Gets the portal_tracking_only of this EntryApplicationItem.  # noqa: E501

        Portal Tracking Only  # noqa: E501

        :return: The portal_tracking_only of this EntryApplicationItem.  # noqa: E501
        :rtype: bool
        """
        return self._portal_tracking_only

    @portal_tracking_only.setter
    def portal_tracking_only(self, portal_tracking_only):
        """Sets the portal_tracking_only of this EntryApplicationItem.

        Portal Tracking Only  # noqa: E501

        :param portal_tracking_only: The portal_tracking_only of this EntryApplicationItem.  # noqa: E501
        :type: bool
        """

        self._portal_tracking_only = portal_tracking_only

    @property
    def table_id(self):
        """Gets the table_id of this EntryApplicationItem.  # noqa: E501

        Table  # noqa: E501

        :return: The table_id of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this EntryApplicationItem.

        Table  # noqa: E501

        :param table_id: The table_id of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._table_id = table_id

    @property
    def table_name(self):
        """Gets the table_name of this EntryApplicationItem.  # noqa: E501

        Table Name  # noqa: E501

        :return: The table_name of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this EntryApplicationItem.

        Table Name  # noqa: E501

        :param table_name: The table_name of this EntryApplicationItem.  # noqa: E501
        :type: str
        """
        if table_name is not None and len(table_name) > 100:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `100`")  # noqa: E501

        self._table_name = table_name

    @property
    def custom_bit1(self):
        """Gets the custom_bit1 of this EntryApplicationItem.  # noqa: E501

        Custom Flag 1  # noqa: E501

        :return: The custom_bit1 of this EntryApplicationItem.  # noqa: E501
        :rtype: bool
        """
        return self._custom_bit1

    @custom_bit1.setter
    def custom_bit1(self, custom_bit1):
        """Sets the custom_bit1 of this EntryApplicationItem.

        Custom Flag 1  # noqa: E501

        :param custom_bit1: The custom_bit1 of this EntryApplicationItem.  # noqa: E501
        :type: bool
        """

        self._custom_bit1 = custom_bit1

    @property
    def custom_bit2(self):
        """Gets the custom_bit2 of this EntryApplicationItem.  # noqa: E501

        Custom Flag 2  # noqa: E501

        :return: The custom_bit2 of this EntryApplicationItem.  # noqa: E501
        :rtype: bool
        """
        return self._custom_bit2

    @custom_bit2.setter
    def custom_bit2(self, custom_bit2):
        """Sets the custom_bit2 of this EntryApplicationItem.

        Custom Flag 2  # noqa: E501

        :param custom_bit2: The custom_bit2 of this EntryApplicationItem.  # noqa: E501
        :type: bool
        """

        self._custom_bit2 = custom_bit2

    @property
    def custom_bit3(self):
        """Gets the custom_bit3 of this EntryApplicationItem.  # noqa: E501

        Custom Flag 3  # noqa: E501

        :return: The custom_bit3 of this EntryApplicationItem.  # noqa: E501
        :rtype: bool
        """
        return self._custom_bit3

    @custom_bit3.setter
    def custom_bit3(self, custom_bit3):
        """Sets the custom_bit3 of this EntryApplicationItem.

        Custom Flag 3  # noqa: E501

        :param custom_bit3: The custom_bit3 of this EntryApplicationItem.  # noqa: E501
        :type: bool
        """

        self._custom_bit3 = custom_bit3

    @property
    def custom_bit4(self):
        """Gets the custom_bit4 of this EntryApplicationItem.  # noqa: E501

        Custom Flag 4  # noqa: E501

        :return: The custom_bit4 of this EntryApplicationItem.  # noqa: E501
        :rtype: bool
        """
        return self._custom_bit4

    @custom_bit4.setter
    def custom_bit4(self, custom_bit4):
        """Sets the custom_bit4 of this EntryApplicationItem.

        Custom Flag 4  # noqa: E501

        :param custom_bit4: The custom_bit4 of this EntryApplicationItem.  # noqa: E501
        :type: bool
        """

        self._custom_bit4 = custom_bit4

    @property
    def custom_date1(self):
        """Gets the custom_date1 of this EntryApplicationItem.  # noqa: E501

        Added to Waitlist  # noqa: E501

        :return: The custom_date1 of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_date1

    @custom_date1.setter
    def custom_date1(self, custom_date1):
        """Sets the custom_date1 of this EntryApplicationItem.

        Added to Waitlist  # noqa: E501

        :param custom_date1: The custom_date1 of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._custom_date1 = custom_date1

    @property
    def custom_date2(self):
        """Gets the custom_date2 of this EntryApplicationItem.  # noqa: E501

        Custom Date 2  # noqa: E501

        :return: The custom_date2 of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_date2

    @custom_date2.setter
    def custom_date2(self, custom_date2):
        """Sets the custom_date2 of this EntryApplicationItem.

        Custom Date 2  # noqa: E501

        :param custom_date2: The custom_date2 of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._custom_date2 = custom_date2

    @property
    def custom_date3(self):
        """Gets the custom_date3 of this EntryApplicationItem.  # noqa: E501

        Custom Date 3  # noqa: E501

        :return: The custom_date3 of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_date3

    @custom_date3.setter
    def custom_date3(self, custom_date3):
        """Sets the custom_date3 of this EntryApplicationItem.

        Custom Date 3  # noqa: E501

        :param custom_date3: The custom_date3 of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._custom_date3 = custom_date3

    @property
    def custom_date4(self):
        """Gets the custom_date4 of this EntryApplicationItem.  # noqa: E501

        Custom Date 4  # noqa: E501

        :return: The custom_date4 of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_date4

    @custom_date4.setter
    def custom_date4(self, custom_date4):
        """Sets the custom_date4 of this EntryApplicationItem.

        Custom Date 4  # noqa: E501

        :param custom_date4: The custom_date4 of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._custom_date4 = custom_date4

    @property
    def security_user_id(self):
        """Gets the security_user_id of this EntryApplicationItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this EntryApplicationItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this EntryApplicationItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this EntryApplicationItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this EntryApplicationItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this EntryApplicationItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this EntryApplicationItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this EntryApplicationItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def timestamp(self):
        """Gets the timestamp of this EntryApplicationItem.  # noqa: E501

        Timestamp  # noqa: E501

        :return: The timestamp of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this EntryApplicationItem.

        Timestamp  # noqa: E501

        :param timestamp: The timestamp of this EntryApplicationItem.  # noqa: E501
        :type: str
        """
        if timestamp is not None and len(timestamp) > 8:
            raise ValueError("Invalid value for `timestamp`, length must be less than or equal to `8`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def date_modified(self):
        """Gets the date_modified of this EntryApplicationItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EntryApplicationItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntryApplicationItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EntryApplicationItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryApplicationItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
