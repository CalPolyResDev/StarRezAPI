# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WorkflowHistoryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workflow_history_id': 'int',
        'table_name': 'str',
        'table_id': 'int',
        'from_workflow_step_id': 'int',
        'to_workflow_step_id': 'int',
        'from_security_user_id': 'int',
        'to_security_user_id': 'int',
        'template_id': 'int',
        'comments': 'str',
        'reason': 'str',
        'security_user_id': 'int',
        'date_created': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'workflow_history_id': 'WorkflowHistoryID',
        'table_name': 'TableName',
        'table_id': 'TableID',
        'from_workflow_step_id': 'From_WorkflowStepID',
        'to_workflow_step_id': 'To_WorkflowStepID',
        'from_security_user_id': 'From_SecurityUserID',
        'to_security_user_id': 'To_SecurityUserID',
        'template_id': 'TemplateID',
        'comments': 'Comments',
        'reason': 'Reason',
        'security_user_id': 'SecurityUserID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, workflow_history_id=None, table_name=None, table_id=None, from_workflow_step_id=None, to_workflow_step_id=None, from_security_user_id=None, to_security_user_id=None, template_id=None, comments=None, reason=None, security_user_id=None, date_created=None, date_modified=None):  # noqa: E501
        """WorkflowHistoryItem - a model defined in Swagger"""  # noqa: E501

        self._workflow_history_id = None
        self._table_name = None
        self._table_id = None
        self._from_workflow_step_id = None
        self._to_workflow_step_id = None
        self._from_security_user_id = None
        self._to_security_user_id = None
        self._template_id = None
        self._comments = None
        self._reason = None
        self._security_user_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if workflow_history_id is not None:
            self.workflow_history_id = workflow_history_id
        if table_name is not None:
            self.table_name = table_name
        if table_id is not None:
            self.table_id = table_id
        if from_workflow_step_id is not None:
            self.from_workflow_step_id = from_workflow_step_id
        if to_workflow_step_id is not None:
            self.to_workflow_step_id = to_workflow_step_id
        if from_security_user_id is not None:
            self.from_security_user_id = from_security_user_id
        if to_security_user_id is not None:
            self.to_security_user_id = to_security_user_id
        if template_id is not None:
            self.template_id = template_id
        if comments is not None:
            self.comments = comments
        if reason is not None:
            self.reason = reason
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def workflow_history_id(self):
        """Gets the workflow_history_id of this WorkflowHistoryItem.  # noqa: E501

        Workflow History  # noqa: E501

        :return: The workflow_history_id of this WorkflowHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._workflow_history_id

    @workflow_history_id.setter
    def workflow_history_id(self, workflow_history_id):
        """Sets the workflow_history_id of this WorkflowHistoryItem.

        Workflow History  # noqa: E501

        :param workflow_history_id: The workflow_history_id of this WorkflowHistoryItem.  # noqa: E501
        :type: int
        """

        self._workflow_history_id = workflow_history_id

    @property
    def table_name(self):
        """Gets the table_name of this WorkflowHistoryItem.  # noqa: E501

        Table Name  # noqa: E501

        :return: The table_name of this WorkflowHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this WorkflowHistoryItem.

        Table Name  # noqa: E501

        :param table_name: The table_name of this WorkflowHistoryItem.  # noqa: E501
        :type: str
        """
        if table_name is not None and len(table_name) > 25:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `25`")  # noqa: E501

        self._table_name = table_name

    @property
    def table_id(self):
        """Gets the table_id of this WorkflowHistoryItem.  # noqa: E501

        Table  # noqa: E501

        :return: The table_id of this WorkflowHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this WorkflowHistoryItem.

        Table  # noqa: E501

        :param table_id: The table_id of this WorkflowHistoryItem.  # noqa: E501
        :type: int
        """

        self._table_id = table_id

    @property
    def from_workflow_step_id(self):
        """Gets the from_workflow_step_id of this WorkflowHistoryItem.  # noqa: E501

        From Workflow Step  # noqa: E501

        :return: The from_workflow_step_id of this WorkflowHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._from_workflow_step_id

    @from_workflow_step_id.setter
    def from_workflow_step_id(self, from_workflow_step_id):
        """Sets the from_workflow_step_id of this WorkflowHistoryItem.

        From Workflow Step  # noqa: E501

        :param from_workflow_step_id: The from_workflow_step_id of this WorkflowHistoryItem.  # noqa: E501
        :type: int
        """

        self._from_workflow_step_id = from_workflow_step_id

    @property
    def to_workflow_step_id(self):
        """Gets the to_workflow_step_id of this WorkflowHistoryItem.  # noqa: E501

        To Workflow Step  # noqa: E501

        :return: The to_workflow_step_id of this WorkflowHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._to_workflow_step_id

    @to_workflow_step_id.setter
    def to_workflow_step_id(self, to_workflow_step_id):
        """Sets the to_workflow_step_id of this WorkflowHistoryItem.

        To Workflow Step  # noqa: E501

        :param to_workflow_step_id: The to_workflow_step_id of this WorkflowHistoryItem.  # noqa: E501
        :type: int
        """

        self._to_workflow_step_id = to_workflow_step_id

    @property
    def from_security_user_id(self):
        """Gets the from_security_user_id of this WorkflowHistoryItem.  # noqa: E501

        From Security User  # noqa: E501

        :return: The from_security_user_id of this WorkflowHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._from_security_user_id

    @from_security_user_id.setter
    def from_security_user_id(self, from_security_user_id):
        """Sets the from_security_user_id of this WorkflowHistoryItem.

        From Security User  # noqa: E501

        :param from_security_user_id: The from_security_user_id of this WorkflowHistoryItem.  # noqa: E501
        :type: int
        """

        self._from_security_user_id = from_security_user_id

    @property
    def to_security_user_id(self):
        """Gets the to_security_user_id of this WorkflowHistoryItem.  # noqa: E501

        To Security User  # noqa: E501

        :return: The to_security_user_id of this WorkflowHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._to_security_user_id

    @to_security_user_id.setter
    def to_security_user_id(self, to_security_user_id):
        """Sets the to_security_user_id of this WorkflowHistoryItem.

        To Security User  # noqa: E501

        :param to_security_user_id: The to_security_user_id of this WorkflowHistoryItem.  # noqa: E501
        :type: int
        """

        self._to_security_user_id = to_security_user_id

    @property
    def template_id(self):
        """Gets the template_id of this WorkflowHistoryItem.  # noqa: E501

        Template  # noqa: E501

        :return: The template_id of this WorkflowHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this WorkflowHistoryItem.

        Template  # noqa: E501

        :param template_id: The template_id of this WorkflowHistoryItem.  # noqa: E501
        :type: int
        """

        self._template_id = template_id

    @property
    def comments(self):
        """Gets the comments of this WorkflowHistoryItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this WorkflowHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WorkflowHistoryItem.

        Comments  # noqa: E501

        :param comments: The comments of this WorkflowHistoryItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 200:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `200`")  # noqa: E501

        self._comments = comments

    @property
    def reason(self):
        """Gets the reason of this WorkflowHistoryItem.  # noqa: E501

        Reason  # noqa: E501

        :return: The reason of this WorkflowHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this WorkflowHistoryItem.

        Reason  # noqa: E501

        :param reason: The reason of this WorkflowHistoryItem.  # noqa: E501
        :type: str
        """
        if reason is not None and len(reason) > 200:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `200`")  # noqa: E501

        self._reason = reason

    @property
    def security_user_id(self):
        """Gets the security_user_id of this WorkflowHistoryItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this WorkflowHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this WorkflowHistoryItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this WorkflowHistoryItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this WorkflowHistoryItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this WorkflowHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this WorkflowHistoryItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this WorkflowHistoryItem.  # noqa: E501
        :type: str
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this WorkflowHistoryItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this WorkflowHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this WorkflowHistoryItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this WorkflowHistoryItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowHistoryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
