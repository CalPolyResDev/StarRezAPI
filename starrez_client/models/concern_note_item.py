# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConcernNoteItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'concern_note_id': 'int',
        'concern_id': 'int',
        'directory_flag': 'bool',
        'note_date': 'datetime',
        'date_created': 'datetime',
        'security_user_id': 'int',
        'created_by_security_user_id': 'int',
        'note_type': 'str',
        'notes': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'concern_note_id': 'ConcernNoteID',
        'concern_id': 'ConcernID',
        'directory_flag': 'DirectoryFlag',
        'note_date': 'NoteDate',
        'date_created': 'DateCreated',
        'security_user_id': 'SecurityUserID',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'note_type': 'NoteType',
        'notes': 'Notes',
        'date_modified': 'DateModified'
    }

    def __init__(self, concern_note_id=None, concern_id=None, directory_flag=None, note_date=None, date_created=None, security_user_id=None, created_by_security_user_id=None, note_type=None, notes=None, date_modified=None):  # noqa: E501
        """ConcernNoteItem - a model defined in Swagger"""  # noqa: E501

        self._concern_note_id = None
        self._concern_id = None
        self._directory_flag = None
        self._note_date = None
        self._date_created = None
        self._security_user_id = None
        self._created_by_security_user_id = None
        self._note_type = None
        self._notes = None
        self._date_modified = None
        self.discriminator = None

        if concern_note_id is not None:
            self.concern_note_id = concern_note_id
        if concern_id is not None:
            self.concern_id = concern_id
        if directory_flag is not None:
            self.directory_flag = directory_flag
        if note_date is not None:
            self.note_date = note_date
        if date_created is not None:
            self.date_created = date_created
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if note_type is not None:
            self.note_type = note_type
        if notes is not None:
            self.notes = notes
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def concern_note_id(self):
        """Gets the concern_note_id of this ConcernNoteItem.  # noqa: E501

        Concern Note  # noqa: E501

        :return: The concern_note_id of this ConcernNoteItem.  # noqa: E501
        :rtype: int
        """
        return self._concern_note_id

    @concern_note_id.setter
    def concern_note_id(self, concern_note_id):
        """Sets the concern_note_id of this ConcernNoteItem.

        Concern Note  # noqa: E501

        :param concern_note_id: The concern_note_id of this ConcernNoteItem.  # noqa: E501
        :type: int
        """

        self._concern_note_id = concern_note_id

    @property
    def concern_id(self):
        """Gets the concern_id of this ConcernNoteItem.  # noqa: E501

        Concern  # noqa: E501

        :return: The concern_id of this ConcernNoteItem.  # noqa: E501
        :rtype: int
        """
        return self._concern_id

    @concern_id.setter
    def concern_id(self, concern_id):
        """Sets the concern_id of this ConcernNoteItem.

        Concern  # noqa: E501

        :param concern_id: The concern_id of this ConcernNoteItem.  # noqa: E501
        :type: int
        """

        self._concern_id = concern_id

    @property
    def directory_flag(self):
        """Gets the directory_flag of this ConcernNoteItem.  # noqa: E501

        Directory Flag  # noqa: E501

        :return: The directory_flag of this ConcernNoteItem.  # noqa: E501
        :rtype: bool
        """
        return self._directory_flag

    @directory_flag.setter
    def directory_flag(self, directory_flag):
        """Sets the directory_flag of this ConcernNoteItem.

        Directory Flag  # noqa: E501

        :param directory_flag: The directory_flag of this ConcernNoteItem.  # noqa: E501
        :type: bool
        """

        self._directory_flag = directory_flag

    @property
    def note_date(self):
        """Gets the note_date of this ConcernNoteItem.  # noqa: E501

        Note Date  # noqa: E501

        :return: The note_date of this ConcernNoteItem.  # noqa: E501
        :rtype: datetime
        """
        return self._note_date

    @note_date.setter
    def note_date(self, note_date):
        """Sets the note_date of this ConcernNoteItem.

        Note Date  # noqa: E501

        :param note_date: The note_date of this ConcernNoteItem.  # noqa: E501
        :type: datetime
        """

        self._note_date = note_date

    @property
    def date_created(self):
        """Gets the date_created of this ConcernNoteItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this ConcernNoteItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ConcernNoteItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this ConcernNoteItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def security_user_id(self):
        """Gets the security_user_id of this ConcernNoteItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this ConcernNoteItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this ConcernNoteItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this ConcernNoteItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this ConcernNoteItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this ConcernNoteItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this ConcernNoteItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this ConcernNoteItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def note_type(self):
        """Gets the note_type of this ConcernNoteItem.  # noqa: E501

        Note Type  # noqa: E501

        :return: The note_type of this ConcernNoteItem.  # noqa: E501
        :rtype: str
        """
        return self._note_type

    @note_type.setter
    def note_type(self, note_type):
        """Sets the note_type of this ConcernNoteItem.

        Note Type  # noqa: E501

        :param note_type: The note_type of this ConcernNoteItem.  # noqa: E501
        :type: str
        """
        if note_type is not None and len(note_type) > 50:
            raise ValueError("Invalid value for `note_type`, length must be less than or equal to `50`")  # noqa: E501

        self._note_type = note_type

    @property
    def notes(self):
        """Gets the notes of this ConcernNoteItem.  # noqa: E501

        Notes  # noqa: E501

        :return: The notes of this ConcernNoteItem.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ConcernNoteItem.

        Notes  # noqa: E501

        :param notes: The notes of this ConcernNoteItem.  # noqa: E501
        :type: str
        """
        if notes is not None and len(notes) > 5000:
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `5000`")  # noqa: E501

        self._notes = notes

    @property
    def date_modified(self):
        """Gets the date_modified of this ConcernNoteItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this ConcernNoteItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ConcernNoteItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this ConcernNoteItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConcernNoteItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
