# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VMMessageItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vm_message_id': 'int',
        'vm_mail_box_id': 'int',
        'vm_message_date': 'str',
        'duration': 'int',
        'vm_group_message_id': 'int',
        'filename': 'str',
        'subject': 'str',
        'sender': 'str',
        'sender_number': 'str',
        'priority': 'str',
        'status': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'vm_message_id': 'VMMessageID',
        'vm_mail_box_id': 'VMMailBoxID',
        'vm_message_date': 'VMMessageDate',
        'duration': 'Duration',
        'vm_group_message_id': 'VMGroupMessageID',
        'filename': 'Filename',
        'subject': 'Subject',
        'sender': 'Sender',
        'sender_number': 'SenderNumber',
        'priority': 'Priority',
        'status': 'Status',
        'date_modified': 'DateModified'
    }

    def __init__(self, vm_message_id=None, vm_mail_box_id=None, vm_message_date=None, duration=None, vm_group_message_id=None, filename=None, subject=None, sender=None, sender_number=None, priority=None, status=None, date_modified=None):  # noqa: E501
        """VMMessageItem - a model defined in Swagger"""  # noqa: E501

        self._vm_message_id = None
        self._vm_mail_box_id = None
        self._vm_message_date = None
        self._duration = None
        self._vm_group_message_id = None
        self._filename = None
        self._subject = None
        self._sender = None
        self._sender_number = None
        self._priority = None
        self._status = None
        self._date_modified = None
        self.discriminator = None

        if vm_message_id is not None:
            self.vm_message_id = vm_message_id
        if vm_mail_box_id is not None:
            self.vm_mail_box_id = vm_mail_box_id
        if vm_message_date is not None:
            self.vm_message_date = vm_message_date
        if duration is not None:
            self.duration = duration
        if vm_group_message_id is not None:
            self.vm_group_message_id = vm_group_message_id
        if filename is not None:
            self.filename = filename
        if subject is not None:
            self.subject = subject
        if sender is not None:
            self.sender = sender
        if sender_number is not None:
            self.sender_number = sender_number
        if priority is not None:
            self.priority = priority
        if status is not None:
            self.status = status
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def vm_message_id(self):
        """Gets the vm_message_id of this VMMessageItem.  # noqa: E501

        VM Message  # noqa: E501

        :return: The vm_message_id of this VMMessageItem.  # noqa: E501
        :rtype: int
        """
        return self._vm_message_id

    @vm_message_id.setter
    def vm_message_id(self, vm_message_id):
        """Sets the vm_message_id of this VMMessageItem.

        VM Message  # noqa: E501

        :param vm_message_id: The vm_message_id of this VMMessageItem.  # noqa: E501
        :type: int
        """

        self._vm_message_id = vm_message_id

    @property
    def vm_mail_box_id(self):
        """Gets the vm_mail_box_id of this VMMessageItem.  # noqa: E501

        VM Mail Box  # noqa: E501

        :return: The vm_mail_box_id of this VMMessageItem.  # noqa: E501
        :rtype: int
        """
        return self._vm_mail_box_id

    @vm_mail_box_id.setter
    def vm_mail_box_id(self, vm_mail_box_id):
        """Sets the vm_mail_box_id of this VMMessageItem.

        VM Mail Box  # noqa: E501

        :param vm_mail_box_id: The vm_mail_box_id of this VMMessageItem.  # noqa: E501
        :type: int
        """

        self._vm_mail_box_id = vm_mail_box_id

    @property
    def vm_message_date(self):
        """Gets the vm_message_date of this VMMessageItem.  # noqa: E501

        VM Message Date  # noqa: E501

        :return: The vm_message_date of this VMMessageItem.  # noqa: E501
        :rtype: str
        """
        return self._vm_message_date

    @vm_message_date.setter
    def vm_message_date(self, vm_message_date):
        """Sets the vm_message_date of this VMMessageItem.

        VM Message Date  # noqa: E501

        :param vm_message_date: The vm_message_date of this VMMessageItem.  # noqa: E501
        :type: str
        """

        self._vm_message_date = vm_message_date

    @property
    def duration(self):
        """Gets the duration of this VMMessageItem.  # noqa: E501

        Duration  # noqa: E501

        :return: The duration of this VMMessageItem.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VMMessageItem.

        Duration  # noqa: E501

        :param duration: The duration of this VMMessageItem.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def vm_group_message_id(self):
        """Gets the vm_group_message_id of this VMMessageItem.  # noqa: E501

        VM Group Message  # noqa: E501

        :return: The vm_group_message_id of this VMMessageItem.  # noqa: E501
        :rtype: int
        """
        return self._vm_group_message_id

    @vm_group_message_id.setter
    def vm_group_message_id(self, vm_group_message_id):
        """Sets the vm_group_message_id of this VMMessageItem.

        VM Group Message  # noqa: E501

        :param vm_group_message_id: The vm_group_message_id of this VMMessageItem.  # noqa: E501
        :type: int
        """

        self._vm_group_message_id = vm_group_message_id

    @property
    def filename(self):
        """Gets the filename of this VMMessageItem.  # noqa: E501

        Filename  # noqa: E501

        :return: The filename of this VMMessageItem.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this VMMessageItem.

        Filename  # noqa: E501

        :param filename: The filename of this VMMessageItem.  # noqa: E501
        :type: str
        """
        if filename is not None and len(filename) > 500:
            raise ValueError("Invalid value for `filename`, length must be less than or equal to `500`")  # noqa: E501

        self._filename = filename

    @property
    def subject(self):
        """Gets the subject of this VMMessageItem.  # noqa: E501

        Subject  # noqa: E501

        :return: The subject of this VMMessageItem.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this VMMessageItem.

        Subject  # noqa: E501

        :param subject: The subject of this VMMessageItem.  # noqa: E501
        :type: str
        """
        if subject is not None and len(subject) > 30:
            raise ValueError("Invalid value for `subject`, length must be less than or equal to `30`")  # noqa: E501

        self._subject = subject

    @property
    def sender(self):
        """Gets the sender of this VMMessageItem.  # noqa: E501

        Sender  # noqa: E501

        :return: The sender of this VMMessageItem.  # noqa: E501
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this VMMessageItem.

        Sender  # noqa: E501

        :param sender: The sender of this VMMessageItem.  # noqa: E501
        :type: str
        """
        if sender is not None and len(sender) > 30:
            raise ValueError("Invalid value for `sender`, length must be less than or equal to `30`")  # noqa: E501

        self._sender = sender

    @property
    def sender_number(self):
        """Gets the sender_number of this VMMessageItem.  # noqa: E501

        Sender Number  # noqa: E501

        :return: The sender_number of this VMMessageItem.  # noqa: E501
        :rtype: str
        """
        return self._sender_number

    @sender_number.setter
    def sender_number(self, sender_number):
        """Sets the sender_number of this VMMessageItem.

        Sender Number  # noqa: E501

        :param sender_number: The sender_number of this VMMessageItem.  # noqa: E501
        :type: str
        """
        if sender_number is not None and len(sender_number) > 30:
            raise ValueError("Invalid value for `sender_number`, length must be less than or equal to `30`")  # noqa: E501

        self._sender_number = sender_number

    @property
    def priority(self):
        """Gets the priority of this VMMessageItem.  # noqa: E501

        Priority  # noqa: E501

        :return: The priority of this VMMessageItem.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this VMMessageItem.

        Priority  # noqa: E501

        :param priority: The priority of this VMMessageItem.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def status(self):
        """Gets the status of this VMMessageItem.  # noqa: E501

        Status  # noqa: E501

        :return: The status of this VMMessageItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VMMessageItem.

        Status  # noqa: E501

        :param status: The status of this VMMessageItem.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def date_modified(self):
        """Gets the date_modified of this VMMessageItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this VMMessageItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this VMMessageItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this VMMessageItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VMMessageItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
