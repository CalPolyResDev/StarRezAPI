# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RoomProfileItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'room_profile_id': 'int',
        'room_id': 'int',
        'profile_item_id': 'int'
    }

    attribute_map = {
        'room_profile_id': 'RoomProfileID',
        'room_id': 'RoomID',
        'profile_item_id': 'ProfileItemID'
    }

    def __init__(self, room_profile_id=None, room_id=None, profile_item_id=None):  # noqa: E501
        """RoomProfileItem - a model defined in Swagger"""  # noqa: E501

        self._room_profile_id = None
        self._room_id = None
        self._profile_item_id = None
        self.discriminator = None

        if room_profile_id is not None:
            self.room_profile_id = room_profile_id
        if room_id is not None:
            self.room_id = room_id
        if profile_item_id is not None:
            self.profile_item_id = profile_item_id

    @property
    def room_profile_id(self):
        """Gets the room_profile_id of this RoomProfileItem.  # noqa: E501

        Room Profile  # noqa: E501

        :return: The room_profile_id of this RoomProfileItem.  # noqa: E501
        :rtype: int
        """
        return self._room_profile_id

    @room_profile_id.setter
    def room_profile_id(self, room_profile_id):
        """Sets the room_profile_id of this RoomProfileItem.

        Room Profile  # noqa: E501

        :param room_profile_id: The room_profile_id of this RoomProfileItem.  # noqa: E501
        :type: int
        """

        self._room_profile_id = room_profile_id

    @property
    def room_id(self):
        """Gets the room_id of this RoomProfileItem.  # noqa: E501

        Room  # noqa: E501

        :return: The room_id of this RoomProfileItem.  # noqa: E501
        :rtype: int
        """
        return self._room_id

    @room_id.setter
    def room_id(self, room_id):
        """Sets the room_id of this RoomProfileItem.

        Room  # noqa: E501

        :param room_id: The room_id of this RoomProfileItem.  # noqa: E501
        :type: int
        """

        self._room_id = room_id

    @property
    def profile_item_id(self):
        """Gets the profile_item_id of this RoomProfileItem.  # noqa: E501

        Profile Item  # noqa: E501

        :return: The profile_item_id of this RoomProfileItem.  # noqa: E501
        :rtype: int
        """
        return self._profile_item_id

    @profile_item_id.setter
    def profile_item_id(self, profile_item_id):
        """Sets the profile_item_id of this RoomProfileItem.

        Profile Item  # noqa: E501

        :param profile_item_id: The profile_item_id of this RoomProfileItem.  # noqa: E501
        :type: int
        """

        self._profile_item_id = profile_item_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomProfileItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
