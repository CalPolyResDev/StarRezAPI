# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntryVisitorItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_visitor_id': 'int',
        'entry_id': 'int',
        'visitor_id': 'int',
        'visitor_status_enum': 'str',
        'term_session_id': 'int',
        'arrival_date': 'datetime',
        'departure_date': 'datetime',
        'visitor_type_id': 'int',
        'security_user_id': 'int',
        'created_by_security_user_id': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'entry_visitor_id': 'EntryVisitorID',
        'entry_id': 'EntryID',
        'visitor_id': 'VisitorID',
        'visitor_status_enum': 'VisitorStatusEnum',
        'term_session_id': 'TermSessionID',
        'arrival_date': 'ArrivalDate',
        'departure_date': 'DepartureDate',
        'visitor_type_id': 'VisitorTypeID',
        'security_user_id': 'SecurityUserID',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, entry_visitor_id=None, entry_id=None, visitor_id=None, visitor_status_enum=None, term_session_id=None, arrival_date=None, departure_date=None, visitor_type_id=None, security_user_id=None, created_by_security_user_id=None, date_created=None, date_modified=None):  # noqa: E501
        """EntryVisitorItem - a model defined in Swagger"""  # noqa: E501

        self._entry_visitor_id = None
        self._entry_id = None
        self._visitor_id = None
        self._visitor_status_enum = None
        self._term_session_id = None
        self._arrival_date = None
        self._departure_date = None
        self._visitor_type_id = None
        self._security_user_id = None
        self._created_by_security_user_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if entry_visitor_id is not None:
            self.entry_visitor_id = entry_visitor_id
        if entry_id is not None:
            self.entry_id = entry_id
        if visitor_id is not None:
            self.visitor_id = visitor_id
        if visitor_status_enum is not None:
            self.visitor_status_enum = visitor_status_enum
        if term_session_id is not None:
            self.term_session_id = term_session_id
        if arrival_date is not None:
            self.arrival_date = arrival_date
        if departure_date is not None:
            self.departure_date = departure_date
        if visitor_type_id is not None:
            self.visitor_type_id = visitor_type_id
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def entry_visitor_id(self):
        """Gets the entry_visitor_id of this EntryVisitorItem.  # noqa: E501

        Entry Visitor  # noqa: E501

        :return: The entry_visitor_id of this EntryVisitorItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_visitor_id

    @entry_visitor_id.setter
    def entry_visitor_id(self, entry_visitor_id):
        """Sets the entry_visitor_id of this EntryVisitorItem.

        Entry Visitor  # noqa: E501

        :param entry_visitor_id: The entry_visitor_id of this EntryVisitorItem.  # noqa: E501
        :type: int
        """

        self._entry_visitor_id = entry_visitor_id

    @property
    def entry_id(self):
        """Gets the entry_id of this EntryVisitorItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this EntryVisitorItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this EntryVisitorItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this EntryVisitorItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def visitor_id(self):
        """Gets the visitor_id of this EntryVisitorItem.  # noqa: E501

        Visitor  # noqa: E501

        :return: The visitor_id of this EntryVisitorItem.  # noqa: E501
        :rtype: int
        """
        return self._visitor_id

    @visitor_id.setter
    def visitor_id(self, visitor_id):
        """Sets the visitor_id of this EntryVisitorItem.

        Visitor  # noqa: E501

        :param visitor_id: The visitor_id of this EntryVisitorItem.  # noqa: E501
        :type: int
        """

        self._visitor_id = visitor_id

    @property
    def visitor_status_enum(self):
        """Gets the visitor_status_enum of this EntryVisitorItem.  # noqa: E501

        Visitor Status  # noqa: E501

        :return: The visitor_status_enum of this EntryVisitorItem.  # noqa: E501
        :rtype: str
        """
        return self._visitor_status_enum

    @visitor_status_enum.setter
    def visitor_status_enum(self, visitor_status_enum):
        """Sets the visitor_status_enum of this EntryVisitorItem.

        Visitor Status  # noqa: E501

        :param visitor_status_enum: The visitor_status_enum of this EntryVisitorItem.  # noqa: E501
        :type: str
        """

        self._visitor_status_enum = visitor_status_enum

    @property
    def term_session_id(self):
        """Gets the term_session_id of this EntryVisitorItem.  # noqa: E501

        Term Session  # noqa: E501

        :return: The term_session_id of this EntryVisitorItem.  # noqa: E501
        :rtype: int
        """
        return self._term_session_id

    @term_session_id.setter
    def term_session_id(self, term_session_id):
        """Sets the term_session_id of this EntryVisitorItem.

        Term Session  # noqa: E501

        :param term_session_id: The term_session_id of this EntryVisitorItem.  # noqa: E501
        :type: int
        """

        self._term_session_id = term_session_id

    @property
    def arrival_date(self):
        """Gets the arrival_date of this EntryVisitorItem.  # noqa: E501

        Arrival Date  # noqa: E501

        :return: The arrival_date of this EntryVisitorItem.  # noqa: E501
        :rtype: datetime
        """
        return self._arrival_date

    @arrival_date.setter
    def arrival_date(self, arrival_date):
        """Sets the arrival_date of this EntryVisitorItem.

        Arrival Date  # noqa: E501

        :param arrival_date: The arrival_date of this EntryVisitorItem.  # noqa: E501
        :type: datetime
        """

        self._arrival_date = arrival_date

    @property
    def departure_date(self):
        """Gets the departure_date of this EntryVisitorItem.  # noqa: E501

        Departure Date  # noqa: E501

        :return: The departure_date of this EntryVisitorItem.  # noqa: E501
        :rtype: datetime
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """Sets the departure_date of this EntryVisitorItem.

        Departure Date  # noqa: E501

        :param departure_date: The departure_date of this EntryVisitorItem.  # noqa: E501
        :type: datetime
        """

        self._departure_date = departure_date

    @property
    def visitor_type_id(self):
        """Gets the visitor_type_id of this EntryVisitorItem.  # noqa: E501

        Visitor Type  # noqa: E501

        :return: The visitor_type_id of this EntryVisitorItem.  # noqa: E501
        :rtype: int
        """
        return self._visitor_type_id

    @visitor_type_id.setter
    def visitor_type_id(self, visitor_type_id):
        """Sets the visitor_type_id of this EntryVisitorItem.

        Visitor Type  # noqa: E501

        :param visitor_type_id: The visitor_type_id of this EntryVisitorItem.  # noqa: E501
        :type: int
        """

        self._visitor_type_id = visitor_type_id

    @property
    def security_user_id(self):
        """Gets the security_user_id of this EntryVisitorItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this EntryVisitorItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this EntryVisitorItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this EntryVisitorItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this EntryVisitorItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this EntryVisitorItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this EntryVisitorItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this EntryVisitorItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this EntryVisitorItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this EntryVisitorItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this EntryVisitorItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this EntryVisitorItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this EntryVisitorItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EntryVisitorItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntryVisitorItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EntryVisitorItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryVisitorItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
