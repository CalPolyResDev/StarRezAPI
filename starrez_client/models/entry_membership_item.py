# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntryMembershipItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_membership_id': 'int',
        'entry_id': 'int',
        'membership_type_id': 'int',
        'description': 'str',
        'membership_number': 'str',
        'membership_status': 'str',
        'membership_action': 'str',
        'membership_date_start': 'str',
        'membership_date_end': 'str',
        'amount_paid': 'str',
        'comments': 'str',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'entry_membership_id': 'EntryMembershipID',
        'entry_id': 'EntryID',
        'membership_type_id': 'MembershipTypeID',
        'description': 'Description',
        'membership_number': 'MembershipNumber',
        'membership_status': 'MembershipStatus',
        'membership_action': 'MembershipAction',
        'membership_date_start': 'MembershipDateStart',
        'membership_date_end': 'MembershipDateEnd',
        'amount_paid': 'AmountPaid',
        'comments': 'Comments',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, entry_membership_id=None, entry_id=None, membership_type_id=None, description=None, membership_number=None, membership_status=None, membership_action=None, membership_date_start=None, membership_date_end=None, amount_paid=None, comments=None, date_created=None, date_modified=None):  # noqa: E501
        """EntryMembershipItem - a model defined in Swagger"""  # noqa: E501

        self._entry_membership_id = None
        self._entry_id = None
        self._membership_type_id = None
        self._description = None
        self._membership_number = None
        self._membership_status = None
        self._membership_action = None
        self._membership_date_start = None
        self._membership_date_end = None
        self._amount_paid = None
        self._comments = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if entry_membership_id is not None:
            self.entry_membership_id = entry_membership_id
        if entry_id is not None:
            self.entry_id = entry_id
        if membership_type_id is not None:
            self.membership_type_id = membership_type_id
        if description is not None:
            self.description = description
        if membership_number is not None:
            self.membership_number = membership_number
        if membership_status is not None:
            self.membership_status = membership_status
        if membership_action is not None:
            self.membership_action = membership_action
        if membership_date_start is not None:
            self.membership_date_start = membership_date_start
        if membership_date_end is not None:
            self.membership_date_end = membership_date_end
        if amount_paid is not None:
            self.amount_paid = amount_paid
        if comments is not None:
            self.comments = comments
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def entry_membership_id(self):
        """Gets the entry_membership_id of this EntryMembershipItem.  # noqa: E501

        Entry Membership  # noqa: E501

        :return: The entry_membership_id of this EntryMembershipItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_membership_id

    @entry_membership_id.setter
    def entry_membership_id(self, entry_membership_id):
        """Sets the entry_membership_id of this EntryMembershipItem.

        Entry Membership  # noqa: E501

        :param entry_membership_id: The entry_membership_id of this EntryMembershipItem.  # noqa: E501
        :type: int
        """

        self._entry_membership_id = entry_membership_id

    @property
    def entry_id(self):
        """Gets the entry_id of this EntryMembershipItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this EntryMembershipItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this EntryMembershipItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this EntryMembershipItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def membership_type_id(self):
        """Gets the membership_type_id of this EntryMembershipItem.  # noqa: E501

        Membership Type  # noqa: E501

        :return: The membership_type_id of this EntryMembershipItem.  # noqa: E501
        :rtype: int
        """
        return self._membership_type_id

    @membership_type_id.setter
    def membership_type_id(self, membership_type_id):
        """Sets the membership_type_id of this EntryMembershipItem.

        Membership Type  # noqa: E501

        :param membership_type_id: The membership_type_id of this EntryMembershipItem.  # noqa: E501
        :type: int
        """

        self._membership_type_id = membership_type_id

    @property
    def description(self):
        """Gets the description of this EntryMembershipItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this EntryMembershipItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EntryMembershipItem.

        Description  # noqa: E501

        :param description: The description of this EntryMembershipItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def membership_number(self):
        """Gets the membership_number of this EntryMembershipItem.  # noqa: E501

        Membership Number  # noqa: E501

        :return: The membership_number of this EntryMembershipItem.  # noqa: E501
        :rtype: str
        """
        return self._membership_number

    @membership_number.setter
    def membership_number(self, membership_number):
        """Sets the membership_number of this EntryMembershipItem.

        Membership Number  # noqa: E501

        :param membership_number: The membership_number of this EntryMembershipItem.  # noqa: E501
        :type: str
        """
        if membership_number is not None and len(membership_number) > 20:
            raise ValueError("Invalid value for `membership_number`, length must be less than or equal to `20`")  # noqa: E501

        self._membership_number = membership_number

    @property
    def membership_status(self):
        """Gets the membership_status of this EntryMembershipItem.  # noqa: E501

        Membership Status  # noqa: E501

        :return: The membership_status of this EntryMembershipItem.  # noqa: E501
        :rtype: str
        """
        return self._membership_status

    @membership_status.setter
    def membership_status(self, membership_status):
        """Sets the membership_status of this EntryMembershipItem.

        Membership Status  # noqa: E501

        :param membership_status: The membership_status of this EntryMembershipItem.  # noqa: E501
        :type: str
        """
        if membership_status is not None and len(membership_status) > 50:
            raise ValueError("Invalid value for `membership_status`, length must be less than or equal to `50`")  # noqa: E501

        self._membership_status = membership_status

    @property
    def membership_action(self):
        """Gets the membership_action of this EntryMembershipItem.  # noqa: E501

        Membership Action  # noqa: E501

        :return: The membership_action of this EntryMembershipItem.  # noqa: E501
        :rtype: str
        """
        return self._membership_action

    @membership_action.setter
    def membership_action(self, membership_action):
        """Sets the membership_action of this EntryMembershipItem.

        Membership Action  # noqa: E501

        :param membership_action: The membership_action of this EntryMembershipItem.  # noqa: E501
        :type: str
        """
        if membership_action is not None and len(membership_action) > 30:
            raise ValueError("Invalid value for `membership_action`, length must be less than or equal to `30`")  # noqa: E501

        self._membership_action = membership_action

    @property
    def membership_date_start(self):
        """Gets the membership_date_start of this EntryMembershipItem.  # noqa: E501

        Membership Date Start  # noqa: E501

        :return: The membership_date_start of this EntryMembershipItem.  # noqa: E501
        :rtype: str
        """
        return self._membership_date_start

    @membership_date_start.setter
    def membership_date_start(self, membership_date_start):
        """Sets the membership_date_start of this EntryMembershipItem.

        Membership Date Start  # noqa: E501

        :param membership_date_start: The membership_date_start of this EntryMembershipItem.  # noqa: E501
        :type: str
        """

        self._membership_date_start = membership_date_start

    @property
    def membership_date_end(self):
        """Gets the membership_date_end of this EntryMembershipItem.  # noqa: E501

        Membership Date End  # noqa: E501

        :return: The membership_date_end of this EntryMembershipItem.  # noqa: E501
        :rtype: str
        """
        return self._membership_date_end

    @membership_date_end.setter
    def membership_date_end(self, membership_date_end):
        """Sets the membership_date_end of this EntryMembershipItem.

        Membership Date End  # noqa: E501

        :param membership_date_end: The membership_date_end of this EntryMembershipItem.  # noqa: E501
        :type: str
        """

        self._membership_date_end = membership_date_end

    @property
    def amount_paid(self):
        """Gets the amount_paid of this EntryMembershipItem.  # noqa: E501

        Amount Paid  # noqa: E501

        :return: The amount_paid of this EntryMembershipItem.  # noqa: E501
        :rtype: str
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this EntryMembershipItem.

        Amount Paid  # noqa: E501

        :param amount_paid: The amount_paid of this EntryMembershipItem.  # noqa: E501
        :type: str
        """

        self._amount_paid = amount_paid

    @property
    def comments(self):
        """Gets the comments of this EntryMembershipItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this EntryMembershipItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EntryMembershipItem.

        Comments  # noqa: E501

        :param comments: The comments of this EntryMembershipItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 500:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `500`")  # noqa: E501

        self._comments = comments

    @property
    def date_created(self):
        """Gets the date_created of this EntryMembershipItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this EntryMembershipItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this EntryMembershipItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this EntryMembershipItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this EntryMembershipItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EntryMembershipItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntryMembershipItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EntryMembershipItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryMembershipItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
