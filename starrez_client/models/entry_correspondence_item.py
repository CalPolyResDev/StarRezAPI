# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntryCorrespondenceItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_id': 'int',
        'from_entry_id': 'int',
        'entry_correspondence_id': 'int',
        'correspondence_source_id': 'int',
        'correspondence_date': 'str',
        'description': 'str',
        'comments': 'str',
        'document_path': 'str',
        'from_email': 'str',
        'security_user_id': 'int',
        'created_by_security_user_id': 'int',
        'view_on_web': 'bool',
        'viewed_date': 'str',
        'correspondence_status_enum': 'str',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'entry_id': 'EntryID',
        'from_entry_id': 'From_EntryID',
        'entry_correspondence_id': 'EntryCorrespondenceID',
        'correspondence_source_id': 'CorrespondenceSourceID',
        'correspondence_date': 'CorrespondenceDate',
        'description': 'Description',
        'comments': 'Comments',
        'document_path': 'DocumentPath',
        'from_email': 'FromEmail',
        'security_user_id': 'SecurityUserID',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'view_on_web': 'ViewOnWeb',
        'viewed_date': 'ViewedDate',
        'correspondence_status_enum': 'CorrespondenceStatusEnum',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, entry_id=None, from_entry_id=None, entry_correspondence_id=None, correspondence_source_id=None, correspondence_date=None, description=None, comments=None, document_path=None, from_email=None, security_user_id=None, created_by_security_user_id=None, view_on_web=None, viewed_date=None, correspondence_status_enum=None, date_created=None, date_modified=None):  # noqa: E501
        """EntryCorrespondenceItem - a model defined in Swagger"""  # noqa: E501

        self._entry_id = None
        self._from_entry_id = None
        self._entry_correspondence_id = None
        self._correspondence_source_id = None
        self._correspondence_date = None
        self._description = None
        self._comments = None
        self._document_path = None
        self._from_email = None
        self._security_user_id = None
        self._created_by_security_user_id = None
        self._view_on_web = None
        self._viewed_date = None
        self._correspondence_status_enum = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if entry_id is not None:
            self.entry_id = entry_id
        if from_entry_id is not None:
            self.from_entry_id = from_entry_id
        if entry_correspondence_id is not None:
            self.entry_correspondence_id = entry_correspondence_id
        if correspondence_source_id is not None:
            self.correspondence_source_id = correspondence_source_id
        if correspondence_date is not None:
            self.correspondence_date = correspondence_date
        if description is not None:
            self.description = description
        if comments is not None:
            self.comments = comments
        if document_path is not None:
            self.document_path = document_path
        if from_email is not None:
            self.from_email = from_email
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if view_on_web is not None:
            self.view_on_web = view_on_web
        if viewed_date is not None:
            self.viewed_date = viewed_date
        if correspondence_status_enum is not None:
            self.correspondence_status_enum = correspondence_status_enum
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def entry_id(self):
        """Gets the entry_id of this EntryCorrespondenceItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this EntryCorrespondenceItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this EntryCorrespondenceItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def from_entry_id(self):
        """Gets the from_entry_id of this EntryCorrespondenceItem.  # noqa: E501

        From Entry  # noqa: E501

        :return: The from_entry_id of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: int
        """
        return self._from_entry_id

    @from_entry_id.setter
    def from_entry_id(self, from_entry_id):
        """Sets the from_entry_id of this EntryCorrespondenceItem.

        From Entry  # noqa: E501

        :param from_entry_id: The from_entry_id of this EntryCorrespondenceItem.  # noqa: E501
        :type: int
        """

        self._from_entry_id = from_entry_id

    @property
    def entry_correspondence_id(self):
        """Gets the entry_correspondence_id of this EntryCorrespondenceItem.  # noqa: E501

        Entry Correspondence  # noqa: E501

        :return: The entry_correspondence_id of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_correspondence_id

    @entry_correspondence_id.setter
    def entry_correspondence_id(self, entry_correspondence_id):
        """Sets the entry_correspondence_id of this EntryCorrespondenceItem.

        Entry Correspondence  # noqa: E501

        :param entry_correspondence_id: The entry_correspondence_id of this EntryCorrespondenceItem.  # noqa: E501
        :type: int
        """

        self._entry_correspondence_id = entry_correspondence_id

    @property
    def correspondence_source_id(self):
        """Gets the correspondence_source_id of this EntryCorrespondenceItem.  # noqa: E501

        Correspondence Source  # noqa: E501

        :return: The correspondence_source_id of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: int
        """
        return self._correspondence_source_id

    @correspondence_source_id.setter
    def correspondence_source_id(self, correspondence_source_id):
        """Sets the correspondence_source_id of this EntryCorrespondenceItem.

        Correspondence Source  # noqa: E501

        :param correspondence_source_id: The correspondence_source_id of this EntryCorrespondenceItem.  # noqa: E501
        :type: int
        """

        self._correspondence_source_id = correspondence_source_id

    @property
    def correspondence_date(self):
        """Gets the correspondence_date of this EntryCorrespondenceItem.  # noqa: E501

        Correspondence Date  # noqa: E501

        :return: The correspondence_date of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: str
        """
        return self._correspondence_date

    @correspondence_date.setter
    def correspondence_date(self, correspondence_date):
        """Sets the correspondence_date of this EntryCorrespondenceItem.

        Correspondence Date  # noqa: E501

        :param correspondence_date: The correspondence_date of this EntryCorrespondenceItem.  # noqa: E501
        :type: str
        """

        self._correspondence_date = correspondence_date

    @property
    def description(self):
        """Gets the description of this EntryCorrespondenceItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EntryCorrespondenceItem.

        Description  # noqa: E501

        :param description: The description of this EntryCorrespondenceItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def comments(self):
        """Gets the comments of this EntryCorrespondenceItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EntryCorrespondenceItem.

        Comments  # noqa: E501

        :param comments: The comments of this EntryCorrespondenceItem.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def document_path(self):
        """Gets the document_path of this EntryCorrespondenceItem.  # noqa: E501

        Document Path  # noqa: E501

        :return: The document_path of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: str
        """
        return self._document_path

    @document_path.setter
    def document_path(self, document_path):
        """Sets the document_path of this EntryCorrespondenceItem.

        Document Path  # noqa: E501

        :param document_path: The document_path of this EntryCorrespondenceItem.  # noqa: E501
        :type: str
        """
        if document_path is not None and len(document_path) > 1000:
            raise ValueError("Invalid value for `document_path`, length must be less than or equal to `1000`")  # noqa: E501

        self._document_path = document_path

    @property
    def from_email(self):
        """Gets the from_email of this EntryCorrespondenceItem.  # noqa: E501

        From Email  # noqa: E501

        :return: The from_email of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: str
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this EntryCorrespondenceItem.

        From Email  # noqa: E501

        :param from_email: The from_email of this EntryCorrespondenceItem.  # noqa: E501
        :type: str
        """
        if from_email is not None and len(from_email) > 100:
            raise ValueError("Invalid value for `from_email`, length must be less than or equal to `100`")  # noqa: E501

        self._from_email = from_email

    @property
    def security_user_id(self):
        """Gets the security_user_id of this EntryCorrespondenceItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this EntryCorrespondenceItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this EntryCorrespondenceItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this EntryCorrespondenceItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this EntryCorrespondenceItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this EntryCorrespondenceItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def view_on_web(self):
        """Gets the view_on_web of this EntryCorrespondenceItem.  # noqa: E501

        View On Web  # noqa: E501

        :return: The view_on_web of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: bool
        """
        return self._view_on_web

    @view_on_web.setter
    def view_on_web(self, view_on_web):
        """Sets the view_on_web of this EntryCorrespondenceItem.

        View On Web  # noqa: E501

        :param view_on_web: The view_on_web of this EntryCorrespondenceItem.  # noqa: E501
        :type: bool
        """

        self._view_on_web = view_on_web

    @property
    def viewed_date(self):
        """Gets the viewed_date of this EntryCorrespondenceItem.  # noqa: E501

        Viewed Date  # noqa: E501

        :return: The viewed_date of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: str
        """
        return self._viewed_date

    @viewed_date.setter
    def viewed_date(self, viewed_date):
        """Sets the viewed_date of this EntryCorrespondenceItem.

        Viewed Date  # noqa: E501

        :param viewed_date: The viewed_date of this EntryCorrespondenceItem.  # noqa: E501
        :type: str
        """

        self._viewed_date = viewed_date

    @property
    def correspondence_status_enum(self):
        """Gets the correspondence_status_enum of this EntryCorrespondenceItem.  # noqa: E501

        Correspondence Status  # noqa: E501

        :return: The correspondence_status_enum of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: str
        """
        return self._correspondence_status_enum

    @correspondence_status_enum.setter
    def correspondence_status_enum(self, correspondence_status_enum):
        """Sets the correspondence_status_enum of this EntryCorrespondenceItem.

        Correspondence Status  # noqa: E501

        :param correspondence_status_enum: The correspondence_status_enum of this EntryCorrespondenceItem.  # noqa: E501
        :type: str
        """

        self._correspondence_status_enum = correspondence_status_enum

    @property
    def date_created(self):
        """Gets the date_created of this EntryCorrespondenceItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this EntryCorrespondenceItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this EntryCorrespondenceItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this EntryCorrespondenceItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EntryCorrespondenceItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntryCorrespondenceItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EntryCorrespondenceItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryCorrespondenceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
