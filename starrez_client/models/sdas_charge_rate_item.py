# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SDASChargeRateItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sdas_charge_rate_id': 'int',
        'record_type_enum': 'str',
        'description': 'str',
        'comments': 'str',
        'charge_per_mb': 'str',
        'charge_minimum': 'str',
        'monthly_allowance': 'str',
        'access_level': 'str',
        'is_plan': 'bool',
        'charge_item_id': 'int',
        'transaction_template_id': 'int',
        'plan_allowance': 'str',
        'resident_selectable': 'bool',
        'date_modified': 'str'
    }

    attribute_map = {
        'sdas_charge_rate_id': 'SDASChargeRateID',
        'record_type_enum': 'RecordTypeEnum',
        'description': 'Description',
        'comments': 'Comments',
        'charge_per_mb': 'ChargePerMb',
        'charge_minimum': 'ChargeMinimum',
        'monthly_allowance': 'MonthlyAllowance',
        'access_level': 'AccessLevel',
        'is_plan': 'IsPlan',
        'charge_item_id': 'ChargeItemID',
        'transaction_template_id': 'TransactionTemplateID',
        'plan_allowance': 'PlanAllowance',
        'resident_selectable': 'ResidentSelectable',
        'date_modified': 'DateModified'
    }

    def __init__(self, sdas_charge_rate_id=None, record_type_enum=None, description=None, comments=None, charge_per_mb=None, charge_minimum=None, monthly_allowance=None, access_level=None, is_plan=None, charge_item_id=None, transaction_template_id=None, plan_allowance=None, resident_selectable=None, date_modified=None):  # noqa: E501
        """SDASChargeRateItem - a model defined in Swagger"""  # noqa: E501

        self._sdas_charge_rate_id = None
        self._record_type_enum = None
        self._description = None
        self._comments = None
        self._charge_per_mb = None
        self._charge_minimum = None
        self._monthly_allowance = None
        self._access_level = None
        self._is_plan = None
        self._charge_item_id = None
        self._transaction_template_id = None
        self._plan_allowance = None
        self._resident_selectable = None
        self._date_modified = None
        self.discriminator = None

        if sdas_charge_rate_id is not None:
            self.sdas_charge_rate_id = sdas_charge_rate_id
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if description is not None:
            self.description = description
        if comments is not None:
            self.comments = comments
        if charge_per_mb is not None:
            self.charge_per_mb = charge_per_mb
        if charge_minimum is not None:
            self.charge_minimum = charge_minimum
        if monthly_allowance is not None:
            self.monthly_allowance = monthly_allowance
        if access_level is not None:
            self.access_level = access_level
        if is_plan is not None:
            self.is_plan = is_plan
        if charge_item_id is not None:
            self.charge_item_id = charge_item_id
        if transaction_template_id is not None:
            self.transaction_template_id = transaction_template_id
        if plan_allowance is not None:
            self.plan_allowance = plan_allowance
        if resident_selectable is not None:
            self.resident_selectable = resident_selectable
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def sdas_charge_rate_id(self):
        """Gets the sdas_charge_rate_id of this SDASChargeRateItem.  # noqa: E501

        SDAS Charge Rate  # noqa: E501

        :return: The sdas_charge_rate_id of this SDASChargeRateItem.  # noqa: E501
        :rtype: int
        """
        return self._sdas_charge_rate_id

    @sdas_charge_rate_id.setter
    def sdas_charge_rate_id(self, sdas_charge_rate_id):
        """Sets the sdas_charge_rate_id of this SDASChargeRateItem.

        SDAS Charge Rate  # noqa: E501

        :param sdas_charge_rate_id: The sdas_charge_rate_id of this SDASChargeRateItem.  # noqa: E501
        :type: int
        """

        self._sdas_charge_rate_id = sdas_charge_rate_id

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this SDASChargeRateItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this SDASChargeRateItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this SDASChargeRateItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this SDASChargeRateItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def description(self):
        """Gets the description of this SDASChargeRateItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this SDASChargeRateItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SDASChargeRateItem.

        Description  # noqa: E501

        :param description: The description of this SDASChargeRateItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 20:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `20`")  # noqa: E501

        self._description = description

    @property
    def comments(self):
        """Gets the comments of this SDASChargeRateItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this SDASChargeRateItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this SDASChargeRateItem.

        Comments  # noqa: E501

        :param comments: The comments of this SDASChargeRateItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 100:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `100`")  # noqa: E501

        self._comments = comments

    @property
    def charge_per_mb(self):
        """Gets the charge_per_mb of this SDASChargeRateItem.  # noqa: E501

        Charge Per Mb  # noqa: E501

        :return: The charge_per_mb of this SDASChargeRateItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_per_mb

    @charge_per_mb.setter
    def charge_per_mb(self, charge_per_mb):
        """Sets the charge_per_mb of this SDASChargeRateItem.

        Charge Per Mb  # noqa: E501

        :param charge_per_mb: The charge_per_mb of this SDASChargeRateItem.  # noqa: E501
        :type: str
        """

        self._charge_per_mb = charge_per_mb

    @property
    def charge_minimum(self):
        """Gets the charge_minimum of this SDASChargeRateItem.  # noqa: E501

        Charge Minimum  # noqa: E501

        :return: The charge_minimum of this SDASChargeRateItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_minimum

    @charge_minimum.setter
    def charge_minimum(self, charge_minimum):
        """Sets the charge_minimum of this SDASChargeRateItem.

        Charge Minimum  # noqa: E501

        :param charge_minimum: The charge_minimum of this SDASChargeRateItem.  # noqa: E501
        :type: str
        """

        self._charge_minimum = charge_minimum

    @property
    def monthly_allowance(self):
        """Gets the monthly_allowance of this SDASChargeRateItem.  # noqa: E501

        Monthly Allowance  # noqa: E501

        :return: The monthly_allowance of this SDASChargeRateItem.  # noqa: E501
        :rtype: str
        """
        return self._monthly_allowance

    @monthly_allowance.setter
    def monthly_allowance(self, monthly_allowance):
        """Sets the monthly_allowance of this SDASChargeRateItem.

        Monthly Allowance  # noqa: E501

        :param monthly_allowance: The monthly_allowance of this SDASChargeRateItem.  # noqa: E501
        :type: str
        """

        self._monthly_allowance = monthly_allowance

    @property
    def access_level(self):
        """Gets the access_level of this SDASChargeRateItem.  # noqa: E501

        Access Level  # noqa: E501

        :return: The access_level of this SDASChargeRateItem.  # noqa: E501
        :rtype: str
        """
        return self._access_level

    @access_level.setter
    def access_level(self, access_level):
        """Sets the access_level of this SDASChargeRateItem.

        Access Level  # noqa: E501

        :param access_level: The access_level of this SDASChargeRateItem.  # noqa: E501
        :type: str
        """

        self._access_level = access_level

    @property
    def is_plan(self):
        """Gets the is_plan of this SDASChargeRateItem.  # noqa: E501

        Is Plan  # noqa: E501

        :return: The is_plan of this SDASChargeRateItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_plan

    @is_plan.setter
    def is_plan(self, is_plan):
        """Sets the is_plan of this SDASChargeRateItem.

        Is Plan  # noqa: E501

        :param is_plan: The is_plan of this SDASChargeRateItem.  # noqa: E501
        :type: bool
        """

        self._is_plan = is_plan

    @property
    def charge_item_id(self):
        """Gets the charge_item_id of this SDASChargeRateItem.  # noqa: E501

        Charge Item  # noqa: E501

        :return: The charge_item_id of this SDASChargeRateItem.  # noqa: E501
        :rtype: int
        """
        return self._charge_item_id

    @charge_item_id.setter
    def charge_item_id(self, charge_item_id):
        """Sets the charge_item_id of this SDASChargeRateItem.

        Charge Item  # noqa: E501

        :param charge_item_id: The charge_item_id of this SDASChargeRateItem.  # noqa: E501
        :type: int
        """

        self._charge_item_id = charge_item_id

    @property
    def transaction_template_id(self):
        """Gets the transaction_template_id of this SDASChargeRateItem.  # noqa: E501

        Transaction Template  # noqa: E501

        :return: The transaction_template_id of this SDASChargeRateItem.  # noqa: E501
        :rtype: int
        """
        return self._transaction_template_id

    @transaction_template_id.setter
    def transaction_template_id(self, transaction_template_id):
        """Sets the transaction_template_id of this SDASChargeRateItem.

        Transaction Template  # noqa: E501

        :param transaction_template_id: The transaction_template_id of this SDASChargeRateItem.  # noqa: E501
        :type: int
        """

        self._transaction_template_id = transaction_template_id

    @property
    def plan_allowance(self):
        """Gets the plan_allowance of this SDASChargeRateItem.  # noqa: E501

        Plan Allowance  # noqa: E501

        :return: The plan_allowance of this SDASChargeRateItem.  # noqa: E501
        :rtype: str
        """
        return self._plan_allowance

    @plan_allowance.setter
    def plan_allowance(self, plan_allowance):
        """Sets the plan_allowance of this SDASChargeRateItem.

        Plan Allowance  # noqa: E501

        :param plan_allowance: The plan_allowance of this SDASChargeRateItem.  # noqa: E501
        :type: str
        """

        self._plan_allowance = plan_allowance

    @property
    def resident_selectable(self):
        """Gets the resident_selectable of this SDASChargeRateItem.  # noqa: E501

        Resident Selectable  # noqa: E501

        :return: The resident_selectable of this SDASChargeRateItem.  # noqa: E501
        :rtype: bool
        """
        return self._resident_selectable

    @resident_selectable.setter
    def resident_selectable(self, resident_selectable):
        """Sets the resident_selectable of this SDASChargeRateItem.

        Resident Selectable  # noqa: E501

        :param resident_selectable: The resident_selectable of this SDASChargeRateItem.  # noqa: E501
        :type: bool
        """

        self._resident_selectable = resident_selectable

    @property
    def date_modified(self):
        """Gets the date_modified of this SDASChargeRateItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this SDASChargeRateItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this SDASChargeRateItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this SDASChargeRateItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SDASChargeRateItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
