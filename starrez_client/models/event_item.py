# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EventItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_id': 'int',
        'event_status_enum': 'str',
        'event_code': 'str',
        'description': 'str',
        'event_type_id': 'int',
        'contact_id': 'int',
        'category_id': 'int',
        'term_session_id': 'int',
        'date_start': 'datetime',
        'date_end': 'datetime',
        'active_date_start': 'str',
        'active_date_end': 'str',
        'attendee_guarantee': 'str',
        'attendee_estimate': 'str',
        'attendee_maximum': 'str',
        'group_id': 'int',
        'deposit': 'str',
        'deposit_due_date': 'datetime',
        'deposit_paid': 'bool',
        'deposit_transaction_id': 'int',
        'charge_comments': 'str',
        'assigned_security_user_id': 'int',
        'comments': 'str',
        'view_on_web': 'bool',
        'web_description': 'str',
        'web_order': 'int',
        'web_comments': 'str',
        'conference_full_message': 'str',
        'web_header': 'str',
        'default_function_duration': 'str',
        'minimum_night_stay': 'int',
        'minimum_check_in_date': 'str',
        'maximum_check_in_date': 'str',
        'minimum_check_out_date': 'str',
        'maximum_check_out_date': 'str',
        'register_via_portal': 'bool',
        'register_via_admin_upload': 'bool',
        'require_functions': 'bool',
        'require_housing': 'bool',
        'require_meal_plans': 'bool',
        'require_deposit': 'bool',
        'require_attendees': 'bool',
        'require_tasks': 'bool',
        'security_user_id': 'int',
        'created_by_security_user_id': 'int',
        'date_created': 'datetime',
        'timestamp': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'event_id': 'EventID',
        'event_status_enum': 'EventStatusEnum',
        'event_code': 'EventCode',
        'description': 'Description',
        'event_type_id': 'EventTypeID',
        'contact_id': 'ContactID',
        'category_id': 'CategoryID',
        'term_session_id': 'TermSessionID',
        'date_start': 'DateStart',
        'date_end': 'DateEnd',
        'active_date_start': 'ActiveDateStart',
        'active_date_end': 'ActiveDateEnd',
        'attendee_guarantee': 'AttendeeGuarantee',
        'attendee_estimate': 'AttendeeEstimate',
        'attendee_maximum': 'AttendeeMaximum',
        'group_id': 'GroupID',
        'deposit': 'Deposit',
        'deposit_due_date': 'DepositDueDate',
        'deposit_paid': 'DepositPaid',
        'deposit_transaction_id': 'Deposit_TransactionID',
        'charge_comments': 'ChargeComments',
        'assigned_security_user_id': 'Assigned_SecurityUserID',
        'comments': 'Comments',
        'view_on_web': 'ViewOnWeb',
        'web_description': 'WebDescription',
        'web_order': 'WebOrder',
        'web_comments': 'WebComments',
        'conference_full_message': 'ConferenceFullMessage',
        'web_header': 'WebHeader',
        'default_function_duration': 'DefaultFunctionDuration',
        'minimum_night_stay': 'MinimumNightStay',
        'minimum_check_in_date': 'MinimumCheckInDate',
        'maximum_check_in_date': 'MaximumCheckInDate',
        'minimum_check_out_date': 'MinimumCheckOutDate',
        'maximum_check_out_date': 'MaximumCheckOutDate',
        'register_via_portal': 'RegisterViaPortal',
        'register_via_admin_upload': 'RegisterViaAdminUpload',
        'require_functions': 'RequireFunctions',
        'require_housing': 'RequireHousing',
        'require_meal_plans': 'RequireMealPlans',
        'require_deposit': 'RequireDeposit',
        'require_attendees': 'RequireAttendees',
        'require_tasks': 'RequireTasks',
        'security_user_id': 'SecurityUserID',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'date_created': 'DateCreated',
        'timestamp': 'timestamp',
        'date_modified': 'DateModified'
    }

    def __init__(self, event_id=None, event_status_enum=None, event_code=None, description=None, event_type_id=None, contact_id=None, category_id=None, term_session_id=None, date_start=None, date_end=None, active_date_start=None, active_date_end=None, attendee_guarantee=None, attendee_estimate=None, attendee_maximum=None, group_id=None, deposit=None, deposit_due_date=None, deposit_paid=None, deposit_transaction_id=None, charge_comments=None, assigned_security_user_id=None, comments=None, view_on_web=None, web_description=None, web_order=None, web_comments=None, conference_full_message=None, web_header=None, default_function_duration=None, minimum_night_stay=None, minimum_check_in_date=None, maximum_check_in_date=None, minimum_check_out_date=None, maximum_check_out_date=None, register_via_portal=None, register_via_admin_upload=None, require_functions=None, require_housing=None, require_meal_plans=None, require_deposit=None, require_attendees=None, require_tasks=None, security_user_id=None, created_by_security_user_id=None, date_created=None, timestamp=None, date_modified=None):  # noqa: E501
        """EventItem - a model defined in Swagger"""  # noqa: E501

        self._event_id = None
        self._event_status_enum = None
        self._event_code = None
        self._description = None
        self._event_type_id = None
        self._contact_id = None
        self._category_id = None
        self._term_session_id = None
        self._date_start = None
        self._date_end = None
        self._active_date_start = None
        self._active_date_end = None
        self._attendee_guarantee = None
        self._attendee_estimate = None
        self._attendee_maximum = None
        self._group_id = None
        self._deposit = None
        self._deposit_due_date = None
        self._deposit_paid = None
        self._deposit_transaction_id = None
        self._charge_comments = None
        self._assigned_security_user_id = None
        self._comments = None
        self._view_on_web = None
        self._web_description = None
        self._web_order = None
        self._web_comments = None
        self._conference_full_message = None
        self._web_header = None
        self._default_function_duration = None
        self._minimum_night_stay = None
        self._minimum_check_in_date = None
        self._maximum_check_in_date = None
        self._minimum_check_out_date = None
        self._maximum_check_out_date = None
        self._register_via_portal = None
        self._register_via_admin_upload = None
        self._require_functions = None
        self._require_housing = None
        self._require_meal_plans = None
        self._require_deposit = None
        self._require_attendees = None
        self._require_tasks = None
        self._security_user_id = None
        self._created_by_security_user_id = None
        self._date_created = None
        self._timestamp = None
        self._date_modified = None
        self.discriminator = None

        if event_id is not None:
            self.event_id = event_id
        if event_status_enum is not None:
            self.event_status_enum = event_status_enum
        if event_code is not None:
            self.event_code = event_code
        if description is not None:
            self.description = description
        if event_type_id is not None:
            self.event_type_id = event_type_id
        if contact_id is not None:
            self.contact_id = contact_id
        if category_id is not None:
            self.category_id = category_id
        if term_session_id is not None:
            self.term_session_id = term_session_id
        if date_start is not None:
            self.date_start = date_start
        if date_end is not None:
            self.date_end = date_end
        if active_date_start is not None:
            self.active_date_start = active_date_start
        if active_date_end is not None:
            self.active_date_end = active_date_end
        if attendee_guarantee is not None:
            self.attendee_guarantee = attendee_guarantee
        if attendee_estimate is not None:
            self.attendee_estimate = attendee_estimate
        if attendee_maximum is not None:
            self.attendee_maximum = attendee_maximum
        if group_id is not None:
            self.group_id = group_id
        if deposit is not None:
            self.deposit = deposit
        if deposit_due_date is not None:
            self.deposit_due_date = deposit_due_date
        if deposit_paid is not None:
            self.deposit_paid = deposit_paid
        if deposit_transaction_id is not None:
            self.deposit_transaction_id = deposit_transaction_id
        if charge_comments is not None:
            self.charge_comments = charge_comments
        if assigned_security_user_id is not None:
            self.assigned_security_user_id = assigned_security_user_id
        if comments is not None:
            self.comments = comments
        if view_on_web is not None:
            self.view_on_web = view_on_web
        if web_description is not None:
            self.web_description = web_description
        if web_order is not None:
            self.web_order = web_order
        if web_comments is not None:
            self.web_comments = web_comments
        if conference_full_message is not None:
            self.conference_full_message = conference_full_message
        if web_header is not None:
            self.web_header = web_header
        if default_function_duration is not None:
            self.default_function_duration = default_function_duration
        if minimum_night_stay is not None:
            self.minimum_night_stay = minimum_night_stay
        if minimum_check_in_date is not None:
            self.minimum_check_in_date = minimum_check_in_date
        if maximum_check_in_date is not None:
            self.maximum_check_in_date = maximum_check_in_date
        if minimum_check_out_date is not None:
            self.minimum_check_out_date = minimum_check_out_date
        if maximum_check_out_date is not None:
            self.maximum_check_out_date = maximum_check_out_date
        if register_via_portal is not None:
            self.register_via_portal = register_via_portal
        if register_via_admin_upload is not None:
            self.register_via_admin_upload = register_via_admin_upload
        if require_functions is not None:
            self.require_functions = require_functions
        if require_housing is not None:
            self.require_housing = require_housing
        if require_meal_plans is not None:
            self.require_meal_plans = require_meal_plans
        if require_deposit is not None:
            self.require_deposit = require_deposit
        if require_attendees is not None:
            self.require_attendees = require_attendees
        if require_tasks is not None:
            self.require_tasks = require_tasks
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if date_created is not None:
            self.date_created = date_created
        if timestamp is not None:
            self.timestamp = timestamp
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def event_id(self):
        """Gets the event_id of this EventItem.  # noqa: E501

        Event  # noqa: E501

        :return: The event_id of this EventItem.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this EventItem.

        Event  # noqa: E501

        :param event_id: The event_id of this EventItem.  # noqa: E501
        :type: int
        """

        self._event_id = event_id

    @property
    def event_status_enum(self):
        """Gets the event_status_enum of this EventItem.  # noqa: E501

        Event Status  # noqa: E501

        :return: The event_status_enum of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._event_status_enum

    @event_status_enum.setter
    def event_status_enum(self, event_status_enum):
        """Sets the event_status_enum of this EventItem.

        Event Status  # noqa: E501

        :param event_status_enum: The event_status_enum of this EventItem.  # noqa: E501
        :type: str
        """

        self._event_status_enum = event_status_enum

    @property
    def event_code(self):
        """Gets the event_code of this EventItem.  # noqa: E501

        Event Code  # noqa: E501

        :return: The event_code of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._event_code

    @event_code.setter
    def event_code(self, event_code):
        """Sets the event_code of this EventItem.

        Event Code  # noqa: E501

        :param event_code: The event_code of this EventItem.  # noqa: E501
        :type: str
        """
        if event_code is not None and len(event_code) > 50:
            raise ValueError("Invalid value for `event_code`, length must be less than or equal to `50`")  # noqa: E501

        self._event_code = event_code

    @property
    def description(self):
        """Gets the description of this EventItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventItem.

        Description  # noqa: E501

        :param description: The description of this EventItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def event_type_id(self):
        """Gets the event_type_id of this EventItem.  # noqa: E501

        Event Type  # noqa: E501

        :return: The event_type_id of this EventItem.  # noqa: E501
        :rtype: int
        """
        return self._event_type_id

    @event_type_id.setter
    def event_type_id(self, event_type_id):
        """Sets the event_type_id of this EventItem.

        Event Type  # noqa: E501

        :param event_type_id: The event_type_id of this EventItem.  # noqa: E501
        :type: int
        """

        self._event_type_id = event_type_id

    @property
    def contact_id(self):
        """Gets the contact_id of this EventItem.  # noqa: E501

        Contact  # noqa: E501

        :return: The contact_id of this EventItem.  # noqa: E501
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this EventItem.

        Contact  # noqa: E501

        :param contact_id: The contact_id of this EventItem.  # noqa: E501
        :type: int
        """

        self._contact_id = contact_id

    @property
    def category_id(self):
        """Gets the category_id of this EventItem.  # noqa: E501

        Category  # noqa: E501

        :return: The category_id of this EventItem.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this EventItem.

        Category  # noqa: E501

        :param category_id: The category_id of this EventItem.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def term_session_id(self):
        """Gets the term_session_id of this EventItem.  # noqa: E501

        Term Session  # noqa: E501

        :return: The term_session_id of this EventItem.  # noqa: E501
        :rtype: int
        """
        return self._term_session_id

    @term_session_id.setter
    def term_session_id(self, term_session_id):
        """Sets the term_session_id of this EventItem.

        Term Session  # noqa: E501

        :param term_session_id: The term_session_id of this EventItem.  # noqa: E501
        :type: int
        """

        self._term_session_id = term_session_id

    @property
    def date_start(self):
        """Gets the date_start of this EventItem.  # noqa: E501

        Date Start  # noqa: E501

        :return: The date_start of this EventItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this EventItem.

        Date Start  # noqa: E501

        :param date_start: The date_start of this EventItem.  # noqa: E501
        :type: datetime
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this EventItem.  # noqa: E501

        Date End  # noqa: E501

        :return: The date_end of this EventItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this EventItem.

        Date End  # noqa: E501

        :param date_end: The date_end of this EventItem.  # noqa: E501
        :type: datetime
        """

        self._date_end = date_end

    @property
    def active_date_start(self):
        """Gets the active_date_start of this EventItem.  # noqa: E501

        Active Date Start  # noqa: E501

        :return: The active_date_start of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._active_date_start

    @active_date_start.setter
    def active_date_start(self, active_date_start):
        """Sets the active_date_start of this EventItem.

        Active Date Start  # noqa: E501

        :param active_date_start: The active_date_start of this EventItem.  # noqa: E501
        :type: str
        """

        self._active_date_start = active_date_start

    @property
    def active_date_end(self):
        """Gets the active_date_end of this EventItem.  # noqa: E501

        Active Date End  # noqa: E501

        :return: The active_date_end of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._active_date_end

    @active_date_end.setter
    def active_date_end(self, active_date_end):
        """Sets the active_date_end of this EventItem.

        Active Date End  # noqa: E501

        :param active_date_end: The active_date_end of this EventItem.  # noqa: E501
        :type: str
        """

        self._active_date_end = active_date_end

    @property
    def attendee_guarantee(self):
        """Gets the attendee_guarantee of this EventItem.  # noqa: E501

        Attendee Guarantee  # noqa: E501

        :return: The attendee_guarantee of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._attendee_guarantee

    @attendee_guarantee.setter
    def attendee_guarantee(self, attendee_guarantee):
        """Sets the attendee_guarantee of this EventItem.

        Attendee Guarantee  # noqa: E501

        :param attendee_guarantee: The attendee_guarantee of this EventItem.  # noqa: E501
        :type: str
        """

        self._attendee_guarantee = attendee_guarantee

    @property
    def attendee_estimate(self):
        """Gets the attendee_estimate of this EventItem.  # noqa: E501

        Attendee Estimate  # noqa: E501

        :return: The attendee_estimate of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._attendee_estimate

    @attendee_estimate.setter
    def attendee_estimate(self, attendee_estimate):
        """Sets the attendee_estimate of this EventItem.

        Attendee Estimate  # noqa: E501

        :param attendee_estimate: The attendee_estimate of this EventItem.  # noqa: E501
        :type: str
        """

        self._attendee_estimate = attendee_estimate

    @property
    def attendee_maximum(self):
        """Gets the attendee_maximum of this EventItem.  # noqa: E501

        Attendee Maximum  # noqa: E501

        :return: The attendee_maximum of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._attendee_maximum

    @attendee_maximum.setter
    def attendee_maximum(self, attendee_maximum):
        """Sets the attendee_maximum of this EventItem.

        Attendee Maximum  # noqa: E501

        :param attendee_maximum: The attendee_maximum of this EventItem.  # noqa: E501
        :type: str
        """

        self._attendee_maximum = attendee_maximum

    @property
    def group_id(self):
        """Gets the group_id of this EventItem.  # noqa: E501

        Group  # noqa: E501

        :return: The group_id of this EventItem.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this EventItem.

        Group  # noqa: E501

        :param group_id: The group_id of this EventItem.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def deposit(self):
        """Gets the deposit of this EventItem.  # noqa: E501

        Deposit  # noqa: E501

        :return: The deposit of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._deposit

    @deposit.setter
    def deposit(self, deposit):
        """Sets the deposit of this EventItem.

        Deposit  # noqa: E501

        :param deposit: The deposit of this EventItem.  # noqa: E501
        :type: str
        """

        self._deposit = deposit

    @property
    def deposit_due_date(self):
        """Gets the deposit_due_date of this EventItem.  # noqa: E501

        Deposit Due Date  # noqa: E501

        :return: The deposit_due_date of this EventItem.  # noqa: E501
        :rtype: datetime
        """
        return self._deposit_due_date

    @deposit_due_date.setter
    def deposit_due_date(self, deposit_due_date):
        """Sets the deposit_due_date of this EventItem.

        Deposit Due Date  # noqa: E501

        :param deposit_due_date: The deposit_due_date of this EventItem.  # noqa: E501
        :type: datetime
        """

        self._deposit_due_date = deposit_due_date

    @property
    def deposit_paid(self):
        """Gets the deposit_paid of this EventItem.  # noqa: E501

        Deposit Paid  # noqa: E501

        :return: The deposit_paid of this EventItem.  # noqa: E501
        :rtype: bool
        """
        return self._deposit_paid

    @deposit_paid.setter
    def deposit_paid(self, deposit_paid):
        """Sets the deposit_paid of this EventItem.

        Deposit Paid  # noqa: E501

        :param deposit_paid: The deposit_paid of this EventItem.  # noqa: E501
        :type: bool
        """

        self._deposit_paid = deposit_paid

    @property
    def deposit_transaction_id(self):
        """Gets the deposit_transaction_id of this EventItem.  # noqa: E501

        Deposit Transaction  # noqa: E501

        :return: The deposit_transaction_id of this EventItem.  # noqa: E501
        :rtype: int
        """
        return self._deposit_transaction_id

    @deposit_transaction_id.setter
    def deposit_transaction_id(self, deposit_transaction_id):
        """Sets the deposit_transaction_id of this EventItem.

        Deposit Transaction  # noqa: E501

        :param deposit_transaction_id: The deposit_transaction_id of this EventItem.  # noqa: E501
        :type: int
        """

        self._deposit_transaction_id = deposit_transaction_id

    @property
    def charge_comments(self):
        """Gets the charge_comments of this EventItem.  # noqa: E501

        Charge Comments  # noqa: E501

        :return: The charge_comments of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_comments

    @charge_comments.setter
    def charge_comments(self, charge_comments):
        """Sets the charge_comments of this EventItem.

        Charge Comments  # noqa: E501

        :param charge_comments: The charge_comments of this EventItem.  # noqa: E501
        :type: str
        """
        if charge_comments is not None and len(charge_comments) > 500:
            raise ValueError("Invalid value for `charge_comments`, length must be less than or equal to `500`")  # noqa: E501

        self._charge_comments = charge_comments

    @property
    def assigned_security_user_id(self):
        """Gets the assigned_security_user_id of this EventItem.  # noqa: E501

        Assigned Security User  # noqa: E501

        :return: The assigned_security_user_id of this EventItem.  # noqa: E501
        :rtype: int
        """
        return self._assigned_security_user_id

    @assigned_security_user_id.setter
    def assigned_security_user_id(self, assigned_security_user_id):
        """Sets the assigned_security_user_id of this EventItem.

        Assigned Security User  # noqa: E501

        :param assigned_security_user_id: The assigned_security_user_id of this EventItem.  # noqa: E501
        :type: int
        """

        self._assigned_security_user_id = assigned_security_user_id

    @property
    def comments(self):
        """Gets the comments of this EventItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EventItem.

        Comments  # noqa: E501

        :param comments: The comments of this EventItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 1000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `1000`")  # noqa: E501

        self._comments = comments

    @property
    def view_on_web(self):
        """Gets the view_on_web of this EventItem.  # noqa: E501

        View On Web  # noqa: E501

        :return: The view_on_web of this EventItem.  # noqa: E501
        :rtype: bool
        """
        return self._view_on_web

    @view_on_web.setter
    def view_on_web(self, view_on_web):
        """Sets the view_on_web of this EventItem.

        View On Web  # noqa: E501

        :param view_on_web: The view_on_web of this EventItem.  # noqa: E501
        :type: bool
        """

        self._view_on_web = view_on_web

    @property
    def web_description(self):
        """Gets the web_description of this EventItem.  # noqa: E501

        Web Description  # noqa: E501

        :return: The web_description of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._web_description

    @web_description.setter
    def web_description(self, web_description):
        """Sets the web_description of this EventItem.

        Web Description  # noqa: E501

        :param web_description: The web_description of this EventItem.  # noqa: E501
        :type: str
        """
        if web_description is not None and len(web_description) > 1000:
            raise ValueError("Invalid value for `web_description`, length must be less than or equal to `1000`")  # noqa: E501

        self._web_description = web_description

    @property
    def web_order(self):
        """Gets the web_order of this EventItem.  # noqa: E501

        Web Order  # noqa: E501

        :return: The web_order of this EventItem.  # noqa: E501
        :rtype: int
        """
        return self._web_order

    @web_order.setter
    def web_order(self, web_order):
        """Sets the web_order of this EventItem.

        Web Order  # noqa: E501

        :param web_order: The web_order of this EventItem.  # noqa: E501
        :type: int
        """

        self._web_order = web_order

    @property
    def web_comments(self):
        """Gets the web_comments of this EventItem.  # noqa: E501

        Web Comments  # noqa: E501

        :return: The web_comments of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._web_comments

    @web_comments.setter
    def web_comments(self, web_comments):
        """Sets the web_comments of this EventItem.

        Web Comments  # noqa: E501

        :param web_comments: The web_comments of this EventItem.  # noqa: E501
        :type: str
        """

        self._web_comments = web_comments

    @property
    def conference_full_message(self):
        """Gets the conference_full_message of this EventItem.  # noqa: E501

        Conference Full Message  # noqa: E501

        :return: The conference_full_message of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._conference_full_message

    @conference_full_message.setter
    def conference_full_message(self, conference_full_message):
        """Sets the conference_full_message of this EventItem.

        Conference Full Message  # noqa: E501

        :param conference_full_message: The conference_full_message of this EventItem.  # noqa: E501
        :type: str
        """
        if conference_full_message is not None and len(conference_full_message) > 500:
            raise ValueError("Invalid value for `conference_full_message`, length must be less than or equal to `500`")  # noqa: E501

        self._conference_full_message = conference_full_message

    @property
    def web_header(self):
        """Gets the web_header of this EventItem.  # noqa: E501

        Web Header  # noqa: E501

        :return: The web_header of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._web_header

    @web_header.setter
    def web_header(self, web_header):
        """Sets the web_header of this EventItem.

        Web Header  # noqa: E501

        :param web_header: The web_header of this EventItem.  # noqa: E501
        :type: str
        """

        self._web_header = web_header

    @property
    def default_function_duration(self):
        """Gets the default_function_duration of this EventItem.  # noqa: E501

        Default Function Duration  # noqa: E501

        :return: The default_function_duration of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._default_function_duration

    @default_function_duration.setter
    def default_function_duration(self, default_function_duration):
        """Sets the default_function_duration of this EventItem.

        Default Function Duration  # noqa: E501

        :param default_function_duration: The default_function_duration of this EventItem.  # noqa: E501
        :type: str
        """

        self._default_function_duration = default_function_duration

    @property
    def minimum_night_stay(self):
        """Gets the minimum_night_stay of this EventItem.  # noqa: E501

        Minimum Night Stay  # noqa: E501

        :return: The minimum_night_stay of this EventItem.  # noqa: E501
        :rtype: int
        """
        return self._minimum_night_stay

    @minimum_night_stay.setter
    def minimum_night_stay(self, minimum_night_stay):
        """Sets the minimum_night_stay of this EventItem.

        Minimum Night Stay  # noqa: E501

        :param minimum_night_stay: The minimum_night_stay of this EventItem.  # noqa: E501
        :type: int
        """

        self._minimum_night_stay = minimum_night_stay

    @property
    def minimum_check_in_date(self):
        """Gets the minimum_check_in_date of this EventItem.  # noqa: E501

        Minimum Check In Date  # noqa: E501

        :return: The minimum_check_in_date of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._minimum_check_in_date

    @minimum_check_in_date.setter
    def minimum_check_in_date(self, minimum_check_in_date):
        """Sets the minimum_check_in_date of this EventItem.

        Minimum Check In Date  # noqa: E501

        :param minimum_check_in_date: The minimum_check_in_date of this EventItem.  # noqa: E501
        :type: str
        """

        self._minimum_check_in_date = minimum_check_in_date

    @property
    def maximum_check_in_date(self):
        """Gets the maximum_check_in_date of this EventItem.  # noqa: E501

        Maximum Check In Date  # noqa: E501

        :return: The maximum_check_in_date of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._maximum_check_in_date

    @maximum_check_in_date.setter
    def maximum_check_in_date(self, maximum_check_in_date):
        """Sets the maximum_check_in_date of this EventItem.

        Maximum Check In Date  # noqa: E501

        :param maximum_check_in_date: The maximum_check_in_date of this EventItem.  # noqa: E501
        :type: str
        """

        self._maximum_check_in_date = maximum_check_in_date

    @property
    def minimum_check_out_date(self):
        """Gets the minimum_check_out_date of this EventItem.  # noqa: E501

        Minimum Check Out Date  # noqa: E501

        :return: The minimum_check_out_date of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._minimum_check_out_date

    @minimum_check_out_date.setter
    def minimum_check_out_date(self, minimum_check_out_date):
        """Sets the minimum_check_out_date of this EventItem.

        Minimum Check Out Date  # noqa: E501

        :param minimum_check_out_date: The minimum_check_out_date of this EventItem.  # noqa: E501
        :type: str
        """

        self._minimum_check_out_date = minimum_check_out_date

    @property
    def maximum_check_out_date(self):
        """Gets the maximum_check_out_date of this EventItem.  # noqa: E501

        Maximum Check Out Date  # noqa: E501

        :return: The maximum_check_out_date of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._maximum_check_out_date

    @maximum_check_out_date.setter
    def maximum_check_out_date(self, maximum_check_out_date):
        """Sets the maximum_check_out_date of this EventItem.

        Maximum Check Out Date  # noqa: E501

        :param maximum_check_out_date: The maximum_check_out_date of this EventItem.  # noqa: E501
        :type: str
        """

        self._maximum_check_out_date = maximum_check_out_date

    @property
    def register_via_portal(self):
        """Gets the register_via_portal of this EventItem.  # noqa: E501

        Register Via Portal  # noqa: E501

        :return: The register_via_portal of this EventItem.  # noqa: E501
        :rtype: bool
        """
        return self._register_via_portal

    @register_via_portal.setter
    def register_via_portal(self, register_via_portal):
        """Sets the register_via_portal of this EventItem.

        Register Via Portal  # noqa: E501

        :param register_via_portal: The register_via_portal of this EventItem.  # noqa: E501
        :type: bool
        """

        self._register_via_portal = register_via_portal

    @property
    def register_via_admin_upload(self):
        """Gets the register_via_admin_upload of this EventItem.  # noqa: E501

        Register Via Admin Upload  # noqa: E501

        :return: The register_via_admin_upload of this EventItem.  # noqa: E501
        :rtype: bool
        """
        return self._register_via_admin_upload

    @register_via_admin_upload.setter
    def register_via_admin_upload(self, register_via_admin_upload):
        """Sets the register_via_admin_upload of this EventItem.

        Register Via Admin Upload  # noqa: E501

        :param register_via_admin_upload: The register_via_admin_upload of this EventItem.  # noqa: E501
        :type: bool
        """

        self._register_via_admin_upload = register_via_admin_upload

    @property
    def require_functions(self):
        """Gets the require_functions of this EventItem.  # noqa: E501

        Require Functions  # noqa: E501

        :return: The require_functions of this EventItem.  # noqa: E501
        :rtype: bool
        """
        return self._require_functions

    @require_functions.setter
    def require_functions(self, require_functions):
        """Sets the require_functions of this EventItem.

        Require Functions  # noqa: E501

        :param require_functions: The require_functions of this EventItem.  # noqa: E501
        :type: bool
        """

        self._require_functions = require_functions

    @property
    def require_housing(self):
        """Gets the require_housing of this EventItem.  # noqa: E501

        Require Housing  # noqa: E501

        :return: The require_housing of this EventItem.  # noqa: E501
        :rtype: bool
        """
        return self._require_housing

    @require_housing.setter
    def require_housing(self, require_housing):
        """Sets the require_housing of this EventItem.

        Require Housing  # noqa: E501

        :param require_housing: The require_housing of this EventItem.  # noqa: E501
        :type: bool
        """

        self._require_housing = require_housing

    @property
    def require_meal_plans(self):
        """Gets the require_meal_plans of this EventItem.  # noqa: E501

        Require Meal Plans  # noqa: E501

        :return: The require_meal_plans of this EventItem.  # noqa: E501
        :rtype: bool
        """
        return self._require_meal_plans

    @require_meal_plans.setter
    def require_meal_plans(self, require_meal_plans):
        """Sets the require_meal_plans of this EventItem.

        Require Meal Plans  # noqa: E501

        :param require_meal_plans: The require_meal_plans of this EventItem.  # noqa: E501
        :type: bool
        """

        self._require_meal_plans = require_meal_plans

    @property
    def require_deposit(self):
        """Gets the require_deposit of this EventItem.  # noqa: E501

        Require Deposit  # noqa: E501

        :return: The require_deposit of this EventItem.  # noqa: E501
        :rtype: bool
        """
        return self._require_deposit

    @require_deposit.setter
    def require_deposit(self, require_deposit):
        """Sets the require_deposit of this EventItem.

        Require Deposit  # noqa: E501

        :param require_deposit: The require_deposit of this EventItem.  # noqa: E501
        :type: bool
        """

        self._require_deposit = require_deposit

    @property
    def require_attendees(self):
        """Gets the require_attendees of this EventItem.  # noqa: E501

        Require Attendees  # noqa: E501

        :return: The require_attendees of this EventItem.  # noqa: E501
        :rtype: bool
        """
        return self._require_attendees

    @require_attendees.setter
    def require_attendees(self, require_attendees):
        """Sets the require_attendees of this EventItem.

        Require Attendees  # noqa: E501

        :param require_attendees: The require_attendees of this EventItem.  # noqa: E501
        :type: bool
        """

        self._require_attendees = require_attendees

    @property
    def require_tasks(self):
        """Gets the require_tasks of this EventItem.  # noqa: E501

        Require Tasks  # noqa: E501

        :return: The require_tasks of this EventItem.  # noqa: E501
        :rtype: bool
        """
        return self._require_tasks

    @require_tasks.setter
    def require_tasks(self, require_tasks):
        """Sets the require_tasks of this EventItem.

        Require Tasks  # noqa: E501

        :param require_tasks: The require_tasks of this EventItem.  # noqa: E501
        :type: bool
        """

        self._require_tasks = require_tasks

    @property
    def security_user_id(self):
        """Gets the security_user_id of this EventItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this EventItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this EventItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this EventItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this EventItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this EventItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this EventItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this EventItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this EventItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this EventItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this EventItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this EventItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def timestamp(self):
        """Gets the timestamp of this EventItem.  # noqa: E501

        Timestamp  # noqa: E501

        :return: The timestamp of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this EventItem.

        Timestamp  # noqa: E501

        :param timestamp: The timestamp of this EventItem.  # noqa: E501
        :type: str
        """
        if timestamp is not None and len(timestamp) > 8:
            raise ValueError("Invalid value for `timestamp`, length must be less than or equal to `8`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def date_modified(self):
        """Gets the date_modified of this EventItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EventItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EventItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EventItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
