# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebSectionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'web_section_id': 'int',
        'web_menu_id': 'int',
        'section_name': 'str',
        'description': 'str',
        'section_order': 'int',
        'source': 'str',
        'parent_id': 'int',
        'multi_use_enum': 'str',
        'date_dependent': 'bool',
        'next_web_section_id': 'int',
        'visible': 'bool',
        'room_selection_timeslot_applies': 'bool',
        'required': 'bool',
        'access_roles': 'str',
        'comments': 'str',
        'security_user_id': 'int',
        'source_web_section_id': 'int',
        'section_name_sub_text': 'str',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'web_section_id': 'WebSectionID',
        'web_menu_id': 'WebMenuID',
        'section_name': 'SectionName',
        'description': 'Description',
        'section_order': 'SectionOrder',
        'source': 'Source',
        'parent_id': 'ParentID',
        'multi_use_enum': 'MultiUseEnum',
        'date_dependent': 'DateDependent',
        'next_web_section_id': 'Next_WebSectionID',
        'visible': 'Visible',
        'room_selection_timeslot_applies': 'RoomSelectionTimeslotApplies',
        'required': 'Required',
        'access_roles': 'AccessRoles',
        'comments': 'Comments',
        'security_user_id': 'SecurityUserID',
        'source_web_section_id': 'Source_WebSectionID',
        'section_name_sub_text': 'SectionNameSubText',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, web_section_id=None, web_menu_id=None, section_name=None, description=None, section_order=None, source=None, parent_id=None, multi_use_enum=None, date_dependent=None, next_web_section_id=None, visible=None, room_selection_timeslot_applies=None, required=None, access_roles=None, comments=None, security_user_id=None, source_web_section_id=None, section_name_sub_text=None, date_created=None, date_modified=None):  # noqa: E501
        """WebSectionItem - a model defined in Swagger"""  # noqa: E501

        self._web_section_id = None
        self._web_menu_id = None
        self._section_name = None
        self._description = None
        self._section_order = None
        self._source = None
        self._parent_id = None
        self._multi_use_enum = None
        self._date_dependent = None
        self._next_web_section_id = None
        self._visible = None
        self._room_selection_timeslot_applies = None
        self._required = None
        self._access_roles = None
        self._comments = None
        self._security_user_id = None
        self._source_web_section_id = None
        self._section_name_sub_text = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if web_section_id is not None:
            self.web_section_id = web_section_id
        if web_menu_id is not None:
            self.web_menu_id = web_menu_id
        if section_name is not None:
            self.section_name = section_name
        if description is not None:
            self.description = description
        if section_order is not None:
            self.section_order = section_order
        if source is not None:
            self.source = source
        if parent_id is not None:
            self.parent_id = parent_id
        if multi_use_enum is not None:
            self.multi_use_enum = multi_use_enum
        if date_dependent is not None:
            self.date_dependent = date_dependent
        if next_web_section_id is not None:
            self.next_web_section_id = next_web_section_id
        if visible is not None:
            self.visible = visible
        if room_selection_timeslot_applies is not None:
            self.room_selection_timeslot_applies = room_selection_timeslot_applies
        if required is not None:
            self.required = required
        if access_roles is not None:
            self.access_roles = access_roles
        if comments is not None:
            self.comments = comments
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if source_web_section_id is not None:
            self.source_web_section_id = source_web_section_id
        if section_name_sub_text is not None:
            self.section_name_sub_text = section_name_sub_text
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def web_section_id(self):
        """Gets the web_section_id of this WebSectionItem.  # noqa: E501

        Web Section  # noqa: E501

        :return: The web_section_id of this WebSectionItem.  # noqa: E501
        :rtype: int
        """
        return self._web_section_id

    @web_section_id.setter
    def web_section_id(self, web_section_id):
        """Sets the web_section_id of this WebSectionItem.

        Web Section  # noqa: E501

        :param web_section_id: The web_section_id of this WebSectionItem.  # noqa: E501
        :type: int
        """

        self._web_section_id = web_section_id

    @property
    def web_menu_id(self):
        """Gets the web_menu_id of this WebSectionItem.  # noqa: E501

        Web Menu  # noqa: E501

        :return: The web_menu_id of this WebSectionItem.  # noqa: E501
        :rtype: int
        """
        return self._web_menu_id

    @web_menu_id.setter
    def web_menu_id(self, web_menu_id):
        """Sets the web_menu_id of this WebSectionItem.

        Web Menu  # noqa: E501

        :param web_menu_id: The web_menu_id of this WebSectionItem.  # noqa: E501
        :type: int
        """

        self._web_menu_id = web_menu_id

    @property
    def section_name(self):
        """Gets the section_name of this WebSectionItem.  # noqa: E501

        Section Name  # noqa: E501

        :return: The section_name of this WebSectionItem.  # noqa: E501
        :rtype: str
        """
        return self._section_name

    @section_name.setter
    def section_name(self, section_name):
        """Sets the section_name of this WebSectionItem.

        Section Name  # noqa: E501

        :param section_name: The section_name of this WebSectionItem.  # noqa: E501
        :type: str
        """
        if section_name is not None and len(section_name) > 100:
            raise ValueError("Invalid value for `section_name`, length must be less than or equal to `100`")  # noqa: E501

        self._section_name = section_name

    @property
    def description(self):
        """Gets the description of this WebSectionItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this WebSectionItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebSectionItem.

        Description  # noqa: E501

        :param description: The description of this WebSectionItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def section_order(self):
        """Gets the section_order of this WebSectionItem.  # noqa: E501

        Section Order  # noqa: E501

        :return: The section_order of this WebSectionItem.  # noqa: E501
        :rtype: int
        """
        return self._section_order

    @section_order.setter
    def section_order(self, section_order):
        """Sets the section_order of this WebSectionItem.

        Section Order  # noqa: E501

        :param section_order: The section_order of this WebSectionItem.  # noqa: E501
        :type: int
        """

        self._section_order = section_order

    @property
    def source(self):
        """Gets the source of this WebSectionItem.  # noqa: E501

        Source  # noqa: E501

        :return: The source of this WebSectionItem.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this WebSectionItem.

        Source  # noqa: E501

        :param source: The source of this WebSectionItem.  # noqa: E501
        :type: str
        """
        if source is not None and len(source) > 200:
            raise ValueError("Invalid value for `source`, length must be less than or equal to `200`")  # noqa: E501

        self._source = source

    @property
    def parent_id(self):
        """Gets the parent_id of this WebSectionItem.  # noqa: E501

        Parent  # noqa: E501

        :return: The parent_id of this WebSectionItem.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this WebSectionItem.

        Parent  # noqa: E501

        :param parent_id: The parent_id of this WebSectionItem.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def multi_use_enum(self):
        """Gets the multi_use_enum of this WebSectionItem.  # noqa: E501

        Multi Use  # noqa: E501

        :return: The multi_use_enum of this WebSectionItem.  # noqa: E501
        :rtype: str
        """
        return self._multi_use_enum

    @multi_use_enum.setter
    def multi_use_enum(self, multi_use_enum):
        """Sets the multi_use_enum of this WebSectionItem.

        Multi Use  # noqa: E501

        :param multi_use_enum: The multi_use_enum of this WebSectionItem.  # noqa: E501
        :type: str
        """

        self._multi_use_enum = multi_use_enum

    @property
    def date_dependent(self):
        """Gets the date_dependent of this WebSectionItem.  # noqa: E501

        Date Dependent  # noqa: E501

        :return: The date_dependent of this WebSectionItem.  # noqa: E501
        :rtype: bool
        """
        return self._date_dependent

    @date_dependent.setter
    def date_dependent(self, date_dependent):
        """Sets the date_dependent of this WebSectionItem.

        Date Dependent  # noqa: E501

        :param date_dependent: The date_dependent of this WebSectionItem.  # noqa: E501
        :type: bool
        """

        self._date_dependent = date_dependent

    @property
    def next_web_section_id(self):
        """Gets the next_web_section_id of this WebSectionItem.  # noqa: E501

        Next Web Section  # noqa: E501

        :return: The next_web_section_id of this WebSectionItem.  # noqa: E501
        :rtype: int
        """
        return self._next_web_section_id

    @next_web_section_id.setter
    def next_web_section_id(self, next_web_section_id):
        """Sets the next_web_section_id of this WebSectionItem.

        Next Web Section  # noqa: E501

        :param next_web_section_id: The next_web_section_id of this WebSectionItem.  # noqa: E501
        :type: int
        """

        self._next_web_section_id = next_web_section_id

    @property
    def visible(self):
        """Gets the visible of this WebSectionItem.  # noqa: E501

        Visible  # noqa: E501

        :return: The visible of this WebSectionItem.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this WebSectionItem.

        Visible  # noqa: E501

        :param visible: The visible of this WebSectionItem.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def room_selection_timeslot_applies(self):
        """Gets the room_selection_timeslot_applies of this WebSectionItem.  # noqa: E501

        Room Selection Timeslot Applies  # noqa: E501

        :return: The room_selection_timeslot_applies of this WebSectionItem.  # noqa: E501
        :rtype: bool
        """
        return self._room_selection_timeslot_applies

    @room_selection_timeslot_applies.setter
    def room_selection_timeslot_applies(self, room_selection_timeslot_applies):
        """Sets the room_selection_timeslot_applies of this WebSectionItem.

        Room Selection Timeslot Applies  # noqa: E501

        :param room_selection_timeslot_applies: The room_selection_timeslot_applies of this WebSectionItem.  # noqa: E501
        :type: bool
        """

        self._room_selection_timeslot_applies = room_selection_timeslot_applies

    @property
    def required(self):
        """Gets the required of this WebSectionItem.  # noqa: E501

        Required  # noqa: E501

        :return: The required of this WebSectionItem.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this WebSectionItem.

        Required  # noqa: E501

        :param required: The required of this WebSectionItem.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def access_roles(self):
        """Gets the access_roles of this WebSectionItem.  # noqa: E501

        Access Roles  # noqa: E501

        :return: The access_roles of this WebSectionItem.  # noqa: E501
        :rtype: str
        """
        return self._access_roles

    @access_roles.setter
    def access_roles(self, access_roles):
        """Sets the access_roles of this WebSectionItem.

        Access Roles  # noqa: E501

        :param access_roles: The access_roles of this WebSectionItem.  # noqa: E501
        :type: str
        """
        if access_roles is not None and len(access_roles) > 200:
            raise ValueError("Invalid value for `access_roles`, length must be less than or equal to `200`")  # noqa: E501

        self._access_roles = access_roles

    @property
    def comments(self):
        """Gets the comments of this WebSectionItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this WebSectionItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WebSectionItem.

        Comments  # noqa: E501

        :param comments: The comments of this WebSectionItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 2000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `2000`")  # noqa: E501

        self._comments = comments

    @property
    def security_user_id(self):
        """Gets the security_user_id of this WebSectionItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this WebSectionItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this WebSectionItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this WebSectionItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def source_web_section_id(self):
        """Gets the source_web_section_id of this WebSectionItem.  # noqa: E501

        Source Web Section  # noqa: E501

        :return: The source_web_section_id of this WebSectionItem.  # noqa: E501
        :rtype: int
        """
        return self._source_web_section_id

    @source_web_section_id.setter
    def source_web_section_id(self, source_web_section_id):
        """Sets the source_web_section_id of this WebSectionItem.

        Source Web Section  # noqa: E501

        :param source_web_section_id: The source_web_section_id of this WebSectionItem.  # noqa: E501
        :type: int
        """

        self._source_web_section_id = source_web_section_id

    @property
    def section_name_sub_text(self):
        """Gets the section_name_sub_text of this WebSectionItem.  # noqa: E501

        Section Name Sub Text  # noqa: E501

        :return: The section_name_sub_text of this WebSectionItem.  # noqa: E501
        :rtype: str
        """
        return self._section_name_sub_text

    @section_name_sub_text.setter
    def section_name_sub_text(self, section_name_sub_text):
        """Sets the section_name_sub_text of this WebSectionItem.

        Section Name Sub Text  # noqa: E501

        :param section_name_sub_text: The section_name_sub_text of this WebSectionItem.  # noqa: E501
        :type: str
        """
        if section_name_sub_text is not None and len(section_name_sub_text) > 150:
            raise ValueError("Invalid value for `section_name_sub_text`, length must be less than or equal to `150`")  # noqa: E501

        self._section_name_sub_text = section_name_sub_text

    @property
    def date_created(self):
        """Gets the date_created of this WebSectionItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this WebSectionItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this WebSectionItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this WebSectionItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this WebSectionItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this WebSectionItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this WebSectionItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this WebSectionItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebSectionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
