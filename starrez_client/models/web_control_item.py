# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebControlItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'web_control_id': 'int',
        'web_section_id': 'int',
        'control_title': 'str',
        'control_name': 'str',
        'control_order': 'int',
        'show_title': 'bool',
        'source': 'str',
        'pane': 'str',
        'access_roles': 'str',
        'security_user_id': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'web_control_id': 'WebControlID',
        'web_section_id': 'WebSectionID',
        'control_title': 'ControlTitle',
        'control_name': 'ControlName',
        'control_order': 'ControlOrder',
        'show_title': 'ShowTitle',
        'source': 'Source',
        'pane': 'Pane',
        'access_roles': 'AccessRoles',
        'security_user_id': 'SecurityUserID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, web_control_id=None, web_section_id=None, control_title=None, control_name=None, control_order=None, show_title=None, source=None, pane=None, access_roles=None, security_user_id=None, date_created=None, date_modified=None):  # noqa: E501
        """WebControlItem - a model defined in Swagger"""  # noqa: E501

        self._web_control_id = None
        self._web_section_id = None
        self._control_title = None
        self._control_name = None
        self._control_order = None
        self._show_title = None
        self._source = None
        self._pane = None
        self._access_roles = None
        self._security_user_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if web_control_id is not None:
            self.web_control_id = web_control_id
        if web_section_id is not None:
            self.web_section_id = web_section_id
        if control_title is not None:
            self.control_title = control_title
        if control_name is not None:
            self.control_name = control_name
        if control_order is not None:
            self.control_order = control_order
        if show_title is not None:
            self.show_title = show_title
        if source is not None:
            self.source = source
        if pane is not None:
            self.pane = pane
        if access_roles is not None:
            self.access_roles = access_roles
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def web_control_id(self):
        """Gets the web_control_id of this WebControlItem.  # noqa: E501

        Web Control  # noqa: E501

        :return: The web_control_id of this WebControlItem.  # noqa: E501
        :rtype: int
        """
        return self._web_control_id

    @web_control_id.setter
    def web_control_id(self, web_control_id):
        """Sets the web_control_id of this WebControlItem.

        Web Control  # noqa: E501

        :param web_control_id: The web_control_id of this WebControlItem.  # noqa: E501
        :type: int
        """

        self._web_control_id = web_control_id

    @property
    def web_section_id(self):
        """Gets the web_section_id of this WebControlItem.  # noqa: E501

        Web Section  # noqa: E501

        :return: The web_section_id of this WebControlItem.  # noqa: E501
        :rtype: int
        """
        return self._web_section_id

    @web_section_id.setter
    def web_section_id(self, web_section_id):
        """Sets the web_section_id of this WebControlItem.

        Web Section  # noqa: E501

        :param web_section_id: The web_section_id of this WebControlItem.  # noqa: E501
        :type: int
        """

        self._web_section_id = web_section_id

    @property
    def control_title(self):
        """Gets the control_title of this WebControlItem.  # noqa: E501

        Control Title  # noqa: E501

        :return: The control_title of this WebControlItem.  # noqa: E501
        :rtype: str
        """
        return self._control_title

    @control_title.setter
    def control_title(self, control_title):
        """Sets the control_title of this WebControlItem.

        Control Title  # noqa: E501

        :param control_title: The control_title of this WebControlItem.  # noqa: E501
        :type: str
        """
        if control_title is not None and len(control_title) > 100:
            raise ValueError("Invalid value for `control_title`, length must be less than or equal to `100`")  # noqa: E501

        self._control_title = control_title

    @property
    def control_name(self):
        """Gets the control_name of this WebControlItem.  # noqa: E501

        Control Name  # noqa: E501

        :return: The control_name of this WebControlItem.  # noqa: E501
        :rtype: str
        """
        return self._control_name

    @control_name.setter
    def control_name(self, control_name):
        """Sets the control_name of this WebControlItem.

        Control Name  # noqa: E501

        :param control_name: The control_name of this WebControlItem.  # noqa: E501
        :type: str
        """
        if control_name is not None and len(control_name) > 100:
            raise ValueError("Invalid value for `control_name`, length must be less than or equal to `100`")  # noqa: E501

        self._control_name = control_name

    @property
    def control_order(self):
        """Gets the control_order of this WebControlItem.  # noqa: E501

        Control Order  # noqa: E501

        :return: The control_order of this WebControlItem.  # noqa: E501
        :rtype: int
        """
        return self._control_order

    @control_order.setter
    def control_order(self, control_order):
        """Sets the control_order of this WebControlItem.

        Control Order  # noqa: E501

        :param control_order: The control_order of this WebControlItem.  # noqa: E501
        :type: int
        """

        self._control_order = control_order

    @property
    def show_title(self):
        """Gets the show_title of this WebControlItem.  # noqa: E501

        Show Title  # noqa: E501

        :return: The show_title of this WebControlItem.  # noqa: E501
        :rtype: bool
        """
        return self._show_title

    @show_title.setter
    def show_title(self, show_title):
        """Sets the show_title of this WebControlItem.

        Show Title  # noqa: E501

        :param show_title: The show_title of this WebControlItem.  # noqa: E501
        :type: bool
        """

        self._show_title = show_title

    @property
    def source(self):
        """Gets the source of this WebControlItem.  # noqa: E501

        Source  # noqa: E501

        :return: The source of this WebControlItem.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this WebControlItem.

        Source  # noqa: E501

        :param source: The source of this WebControlItem.  # noqa: E501
        :type: str
        """
        if source is not None and len(source) > 200:
            raise ValueError("Invalid value for `source`, length must be less than or equal to `200`")  # noqa: E501

        self._source = source

    @property
    def pane(self):
        """Gets the pane of this WebControlItem.  # noqa: E501

        Pane  # noqa: E501

        :return: The pane of this WebControlItem.  # noqa: E501
        :rtype: str
        """
        return self._pane

    @pane.setter
    def pane(self, pane):
        """Sets the pane of this WebControlItem.

        Pane  # noqa: E501

        :param pane: The pane of this WebControlItem.  # noqa: E501
        :type: str
        """
        if pane is not None and len(pane) > 200:
            raise ValueError("Invalid value for `pane`, length must be less than or equal to `200`")  # noqa: E501

        self._pane = pane

    @property
    def access_roles(self):
        """Gets the access_roles of this WebControlItem.  # noqa: E501

        Access Roles  # noqa: E501

        :return: The access_roles of this WebControlItem.  # noqa: E501
        :rtype: str
        """
        return self._access_roles

    @access_roles.setter
    def access_roles(self, access_roles):
        """Sets the access_roles of this WebControlItem.

        Access Roles  # noqa: E501

        :param access_roles: The access_roles of this WebControlItem.  # noqa: E501
        :type: str
        """
        if access_roles is not None and len(access_roles) > 200:
            raise ValueError("Invalid value for `access_roles`, length must be less than or equal to `200`")  # noqa: E501

        self._access_roles = access_roles

    @property
    def security_user_id(self):
        """Gets the security_user_id of this WebControlItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this WebControlItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this WebControlItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this WebControlItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this WebControlItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this WebControlItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this WebControlItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this WebControlItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this WebControlItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this WebControlItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this WebControlItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this WebControlItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebControlItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
