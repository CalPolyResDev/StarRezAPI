# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MailMergeItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mail_merge_id': 'int',
        'description': 'str',
        'parent_id': 'int',
        'folder': 'bool',
        'mail_merge_type': 'str',
        'document_name': 'str',
        'document_path': 'str',
        'merge_with_word_automation': 'bool',
        'report_id': 'int',
        'comments': 'str',
        'security_user_id': 'int',
        'date_created': 'datetime',
        'record_type_enum': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'mail_merge_id': 'MailMergeID',
        'description': 'Description',
        'parent_id': 'ParentID',
        'folder': 'Folder',
        'mail_merge_type': 'MailMergeType',
        'document_name': 'DocumentName',
        'document_path': 'DocumentPath',
        'merge_with_word_automation': 'MergeWithWordAutomation',
        'report_id': 'ReportID',
        'comments': 'Comments',
        'security_user_id': 'SecurityUserID',
        'date_created': 'DateCreated',
        'record_type_enum': 'RecordTypeEnum',
        'date_modified': 'DateModified'
    }

    def __init__(self, mail_merge_id=None, description=None, parent_id=None, folder=None, mail_merge_type=None, document_name=None, document_path=None, merge_with_word_automation=None, report_id=None, comments=None, security_user_id=None, date_created=None, record_type_enum=None, date_modified=None):  # noqa: E501
        """MailMergeItem - a model defined in Swagger"""  # noqa: E501

        self._mail_merge_id = None
        self._description = None
        self._parent_id = None
        self._folder = None
        self._mail_merge_type = None
        self._document_name = None
        self._document_path = None
        self._merge_with_word_automation = None
        self._report_id = None
        self._comments = None
        self._security_user_id = None
        self._date_created = None
        self._record_type_enum = None
        self._date_modified = None
        self.discriminator = None

        if mail_merge_id is not None:
            self.mail_merge_id = mail_merge_id
        if description is not None:
            self.description = description
        if parent_id is not None:
            self.parent_id = parent_id
        if folder is not None:
            self.folder = folder
        if mail_merge_type is not None:
            self.mail_merge_type = mail_merge_type
        if document_name is not None:
            self.document_name = document_name
        if document_path is not None:
            self.document_path = document_path
        if merge_with_word_automation is not None:
            self.merge_with_word_automation = merge_with_word_automation
        if report_id is not None:
            self.report_id = report_id
        if comments is not None:
            self.comments = comments
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if date_created is not None:
            self.date_created = date_created
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def mail_merge_id(self):
        """Gets the mail_merge_id of this MailMergeItem.  # noqa: E501

        Mail Merge  # noqa: E501

        :return: The mail_merge_id of this MailMergeItem.  # noqa: E501
        :rtype: int
        """
        return self._mail_merge_id

    @mail_merge_id.setter
    def mail_merge_id(self, mail_merge_id):
        """Sets the mail_merge_id of this MailMergeItem.

        Mail Merge  # noqa: E501

        :param mail_merge_id: The mail_merge_id of this MailMergeItem.  # noqa: E501
        :type: int
        """

        self._mail_merge_id = mail_merge_id

    @property
    def description(self):
        """Gets the description of this MailMergeItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this MailMergeItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MailMergeItem.

        Description  # noqa: E501

        :param description: The description of this MailMergeItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 50:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `50`")  # noqa: E501

        self._description = description

    @property
    def parent_id(self):
        """Gets the parent_id of this MailMergeItem.  # noqa: E501

        Parent  # noqa: E501

        :return: The parent_id of this MailMergeItem.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this MailMergeItem.

        Parent  # noqa: E501

        :param parent_id: The parent_id of this MailMergeItem.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def folder(self):
        """Gets the folder of this MailMergeItem.  # noqa: E501

        Folder  # noqa: E501

        :return: The folder of this MailMergeItem.  # noqa: E501
        :rtype: bool
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this MailMergeItem.

        Folder  # noqa: E501

        :param folder: The folder of this MailMergeItem.  # noqa: E501
        :type: bool
        """

        self._folder = folder

    @property
    def mail_merge_type(self):
        """Gets the mail_merge_type of this MailMergeItem.  # noqa: E501

        Mail Merge Type  # noqa: E501

        :return: The mail_merge_type of this MailMergeItem.  # noqa: E501
        :rtype: str
        """
        return self._mail_merge_type

    @mail_merge_type.setter
    def mail_merge_type(self, mail_merge_type):
        """Sets the mail_merge_type of this MailMergeItem.

        Mail Merge Type  # noqa: E501

        :param mail_merge_type: The mail_merge_type of this MailMergeItem.  # noqa: E501
        :type: str
        """

        self._mail_merge_type = mail_merge_type

    @property
    def document_name(self):
        """Gets the document_name of this MailMergeItem.  # noqa: E501

        Document Name  # noqa: E501

        :return: The document_name of this MailMergeItem.  # noqa: E501
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this MailMergeItem.

        Document Name  # noqa: E501

        :param document_name: The document_name of this MailMergeItem.  # noqa: E501
        :type: str
        """
        if document_name is not None and len(document_name) > 100:
            raise ValueError("Invalid value for `document_name`, length must be less than or equal to `100`")  # noqa: E501

        self._document_name = document_name

    @property
    def document_path(self):
        """Gets the document_path of this MailMergeItem.  # noqa: E501

        Document Path  # noqa: E501

        :return: The document_path of this MailMergeItem.  # noqa: E501
        :rtype: str
        """
        return self._document_path

    @document_path.setter
    def document_path(self, document_path):
        """Sets the document_path of this MailMergeItem.

        Document Path  # noqa: E501

        :param document_path: The document_path of this MailMergeItem.  # noqa: E501
        :type: str
        """
        if document_path is not None and len(document_path) > 500:
            raise ValueError("Invalid value for `document_path`, length must be less than or equal to `500`")  # noqa: E501

        self._document_path = document_path

    @property
    def merge_with_word_automation(self):
        """Gets the merge_with_word_automation of this MailMergeItem.  # noqa: E501

        Merge With Word Automation  # noqa: E501

        :return: The merge_with_word_automation of this MailMergeItem.  # noqa: E501
        :rtype: bool
        """
        return self._merge_with_word_automation

    @merge_with_word_automation.setter
    def merge_with_word_automation(self, merge_with_word_automation):
        """Sets the merge_with_word_automation of this MailMergeItem.

        Merge With Word Automation  # noqa: E501

        :param merge_with_word_automation: The merge_with_word_automation of this MailMergeItem.  # noqa: E501
        :type: bool
        """

        self._merge_with_word_automation = merge_with_word_automation

    @property
    def report_id(self):
        """Gets the report_id of this MailMergeItem.  # noqa: E501

        Report  # noqa: E501

        :return: The report_id of this MailMergeItem.  # noqa: E501
        :rtype: int
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this MailMergeItem.

        Report  # noqa: E501

        :param report_id: The report_id of this MailMergeItem.  # noqa: E501
        :type: int
        """

        self._report_id = report_id

    @property
    def comments(self):
        """Gets the comments of this MailMergeItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this MailMergeItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this MailMergeItem.

        Comments  # noqa: E501

        :param comments: The comments of this MailMergeItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 100:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `100`")  # noqa: E501

        self._comments = comments

    @property
    def security_user_id(self):
        """Gets the security_user_id of this MailMergeItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this MailMergeItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this MailMergeItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this MailMergeItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this MailMergeItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this MailMergeItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MailMergeItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this MailMergeItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this MailMergeItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this MailMergeItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this MailMergeItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this MailMergeItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def date_modified(self):
        """Gets the date_modified of this MailMergeItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this MailMergeItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this MailMergeItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this MailMergeItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailMergeItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
