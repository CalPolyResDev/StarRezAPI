# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_id': 'int',
        'parent_id': 'int',
        'folder': 'bool',
        'report_type_description': 'str',
        'description': 'str',
        'comments': 'str',
        'control_assembly_name': 'str',
        'control_type_name': 'str',
        'helper_assembly_name': 'str',
        'helper_type_name': 'str',
        'main_table_name': 'str',
        'display_in_detail_form': 'bool',
        'display_in_action_menu': 'bool',
        'security_user_id': 'int',
        'xsl_template': 'str',
        'last_ran_security_user_id': 'int',
        'last_ran_date': 'str',
        'record_type_enum': 'str',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'report_id': 'ReportID',
        'parent_id': 'ParentID',
        'folder': 'Folder',
        'report_type_description': 'ReportTypeDescription',
        'description': 'Description',
        'comments': 'Comments',
        'control_assembly_name': 'ControlAssemblyName',
        'control_type_name': 'ControlTypeName',
        'helper_assembly_name': 'HelperAssemblyName',
        'helper_type_name': 'HelperTypeName',
        'main_table_name': 'MainTableName',
        'display_in_detail_form': 'DisplayInDetailForm',
        'display_in_action_menu': 'DisplayInActionMenu',
        'security_user_id': 'SecurityUserID',
        'xsl_template': 'XslTemplate',
        'last_ran_security_user_id': 'LastRan_SecurityUserID',
        'last_ran_date': 'LastRanDate',
        'record_type_enum': 'RecordTypeEnum',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, report_id=None, parent_id=None, folder=None, report_type_description=None, description=None, comments=None, control_assembly_name=None, control_type_name=None, helper_assembly_name=None, helper_type_name=None, main_table_name=None, display_in_detail_form=None, display_in_action_menu=None, security_user_id=None, xsl_template=None, last_ran_security_user_id=None, last_ran_date=None, record_type_enum=None, date_created=None, date_modified=None):  # noqa: E501
        """ReportItem - a model defined in Swagger"""  # noqa: E501

        self._report_id = None
        self._parent_id = None
        self._folder = None
        self._report_type_description = None
        self._description = None
        self._comments = None
        self._control_assembly_name = None
        self._control_type_name = None
        self._helper_assembly_name = None
        self._helper_type_name = None
        self._main_table_name = None
        self._display_in_detail_form = None
        self._display_in_action_menu = None
        self._security_user_id = None
        self._xsl_template = None
        self._last_ran_security_user_id = None
        self._last_ran_date = None
        self._record_type_enum = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if report_id is not None:
            self.report_id = report_id
        if parent_id is not None:
            self.parent_id = parent_id
        if folder is not None:
            self.folder = folder
        if report_type_description is not None:
            self.report_type_description = report_type_description
        if description is not None:
            self.description = description
        if comments is not None:
            self.comments = comments
        if control_assembly_name is not None:
            self.control_assembly_name = control_assembly_name
        if control_type_name is not None:
            self.control_type_name = control_type_name
        if helper_assembly_name is not None:
            self.helper_assembly_name = helper_assembly_name
        if helper_type_name is not None:
            self.helper_type_name = helper_type_name
        if main_table_name is not None:
            self.main_table_name = main_table_name
        if display_in_detail_form is not None:
            self.display_in_detail_form = display_in_detail_form
        if display_in_action_menu is not None:
            self.display_in_action_menu = display_in_action_menu
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if xsl_template is not None:
            self.xsl_template = xsl_template
        if last_ran_security_user_id is not None:
            self.last_ran_security_user_id = last_ran_security_user_id
        if last_ran_date is not None:
            self.last_ran_date = last_ran_date
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def report_id(self):
        """Gets the report_id of this ReportItem.  # noqa: E501

        Report  # noqa: E501

        :return: The report_id of this ReportItem.  # noqa: E501
        :rtype: int
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this ReportItem.

        Report  # noqa: E501

        :param report_id: The report_id of this ReportItem.  # noqa: E501
        :type: int
        """

        self._report_id = report_id

    @property
    def parent_id(self):
        """Gets the parent_id of this ReportItem.  # noqa: E501

        Parent  # noqa: E501

        :return: The parent_id of this ReportItem.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ReportItem.

        Parent  # noqa: E501

        :param parent_id: The parent_id of this ReportItem.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def folder(self):
        """Gets the folder of this ReportItem.  # noqa: E501

        Folder  # noqa: E501

        :return: The folder of this ReportItem.  # noqa: E501
        :rtype: bool
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this ReportItem.

        Folder  # noqa: E501

        :param folder: The folder of this ReportItem.  # noqa: E501
        :type: bool
        """

        self._folder = folder

    @property
    def report_type_description(self):
        """Gets the report_type_description of this ReportItem.  # noqa: E501

        Report Type Description  # noqa: E501

        :return: The report_type_description of this ReportItem.  # noqa: E501
        :rtype: str
        """
        return self._report_type_description

    @report_type_description.setter
    def report_type_description(self, report_type_description):
        """Sets the report_type_description of this ReportItem.

        Report Type Description  # noqa: E501

        :param report_type_description: The report_type_description of this ReportItem.  # noqa: E501
        :type: str
        """
        if report_type_description is not None and len(report_type_description) > 60:
            raise ValueError("Invalid value for `report_type_description`, length must be less than or equal to `60`")  # noqa: E501

        self._report_type_description = report_type_description

    @property
    def description(self):
        """Gets the description of this ReportItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this ReportItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReportItem.

        Description  # noqa: E501

        :param description: The description of this ReportItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 60:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `60`")  # noqa: E501

        self._description = description

    @property
    def comments(self):
        """Gets the comments of this ReportItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this ReportItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ReportItem.

        Comments  # noqa: E501

        :param comments: The comments of this ReportItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 250:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `250`")  # noqa: E501

        self._comments = comments

    @property
    def control_assembly_name(self):
        """Gets the control_assembly_name of this ReportItem.  # noqa: E501

        Control Assembly Name  # noqa: E501

        :return: The control_assembly_name of this ReportItem.  # noqa: E501
        :rtype: str
        """
        return self._control_assembly_name

    @control_assembly_name.setter
    def control_assembly_name(self, control_assembly_name):
        """Sets the control_assembly_name of this ReportItem.

        Control Assembly Name  # noqa: E501

        :param control_assembly_name: The control_assembly_name of this ReportItem.  # noqa: E501
        :type: str
        """
        if control_assembly_name is not None and len(control_assembly_name) > 255:
            raise ValueError("Invalid value for `control_assembly_name`, length must be less than or equal to `255`")  # noqa: E501

        self._control_assembly_name = control_assembly_name

    @property
    def control_type_name(self):
        """Gets the control_type_name of this ReportItem.  # noqa: E501

        Control Type Name  # noqa: E501

        :return: The control_type_name of this ReportItem.  # noqa: E501
        :rtype: str
        """
        return self._control_type_name

    @control_type_name.setter
    def control_type_name(self, control_type_name):
        """Sets the control_type_name of this ReportItem.

        Control Type Name  # noqa: E501

        :param control_type_name: The control_type_name of this ReportItem.  # noqa: E501
        :type: str
        """
        if control_type_name is not None and len(control_type_name) > 255:
            raise ValueError("Invalid value for `control_type_name`, length must be less than or equal to `255`")  # noqa: E501

        self._control_type_name = control_type_name

    @property
    def helper_assembly_name(self):
        """Gets the helper_assembly_name of this ReportItem.  # noqa: E501

        Helper Assembly Name  # noqa: E501

        :return: The helper_assembly_name of this ReportItem.  # noqa: E501
        :rtype: str
        """
        return self._helper_assembly_name

    @helper_assembly_name.setter
    def helper_assembly_name(self, helper_assembly_name):
        """Sets the helper_assembly_name of this ReportItem.

        Helper Assembly Name  # noqa: E501

        :param helper_assembly_name: The helper_assembly_name of this ReportItem.  # noqa: E501
        :type: str
        """
        if helper_assembly_name is not None and len(helper_assembly_name) > 255:
            raise ValueError("Invalid value for `helper_assembly_name`, length must be less than or equal to `255`")  # noqa: E501

        self._helper_assembly_name = helper_assembly_name

    @property
    def helper_type_name(self):
        """Gets the helper_type_name of this ReportItem.  # noqa: E501

        Helper Type Name  # noqa: E501

        :return: The helper_type_name of this ReportItem.  # noqa: E501
        :rtype: str
        """
        return self._helper_type_name

    @helper_type_name.setter
    def helper_type_name(self, helper_type_name):
        """Sets the helper_type_name of this ReportItem.

        Helper Type Name  # noqa: E501

        :param helper_type_name: The helper_type_name of this ReportItem.  # noqa: E501
        :type: str
        """
        if helper_type_name is not None and len(helper_type_name) > 255:
            raise ValueError("Invalid value for `helper_type_name`, length must be less than or equal to `255`")  # noqa: E501

        self._helper_type_name = helper_type_name

    @property
    def main_table_name(self):
        """Gets the main_table_name of this ReportItem.  # noqa: E501

        Main Table Name  # noqa: E501

        :return: The main_table_name of this ReportItem.  # noqa: E501
        :rtype: str
        """
        return self._main_table_name

    @main_table_name.setter
    def main_table_name(self, main_table_name):
        """Sets the main_table_name of this ReportItem.

        Main Table Name  # noqa: E501

        :param main_table_name: The main_table_name of this ReportItem.  # noqa: E501
        :type: str
        """
        if main_table_name is not None and len(main_table_name) > 100:
            raise ValueError("Invalid value for `main_table_name`, length must be less than or equal to `100`")  # noqa: E501

        self._main_table_name = main_table_name

    @property
    def display_in_detail_form(self):
        """Gets the display_in_detail_form of this ReportItem.  # noqa: E501

        Display In Detail Form  # noqa: E501

        :return: The display_in_detail_form of this ReportItem.  # noqa: E501
        :rtype: bool
        """
        return self._display_in_detail_form

    @display_in_detail_form.setter
    def display_in_detail_form(self, display_in_detail_form):
        """Sets the display_in_detail_form of this ReportItem.

        Display In Detail Form  # noqa: E501

        :param display_in_detail_form: The display_in_detail_form of this ReportItem.  # noqa: E501
        :type: bool
        """

        self._display_in_detail_form = display_in_detail_form

    @property
    def display_in_action_menu(self):
        """Gets the display_in_action_menu of this ReportItem.  # noqa: E501

        Display In Action Menu  # noqa: E501

        :return: The display_in_action_menu of this ReportItem.  # noqa: E501
        :rtype: bool
        """
        return self._display_in_action_menu

    @display_in_action_menu.setter
    def display_in_action_menu(self, display_in_action_menu):
        """Sets the display_in_action_menu of this ReportItem.

        Display In Action Menu  # noqa: E501

        :param display_in_action_menu: The display_in_action_menu of this ReportItem.  # noqa: E501
        :type: bool
        """

        self._display_in_action_menu = display_in_action_menu

    @property
    def security_user_id(self):
        """Gets the security_user_id of this ReportItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this ReportItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this ReportItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this ReportItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def xsl_template(self):
        """Gets the xsl_template of this ReportItem.  # noqa: E501

        Xsl Template  # noqa: E501

        :return: The xsl_template of this ReportItem.  # noqa: E501
        :rtype: str
        """
        return self._xsl_template

    @xsl_template.setter
    def xsl_template(self, xsl_template):
        """Sets the xsl_template of this ReportItem.

        Xsl Template  # noqa: E501

        :param xsl_template: The xsl_template of this ReportItem.  # noqa: E501
        :type: str
        """

        self._xsl_template = xsl_template

    @property
    def last_ran_security_user_id(self):
        """Gets the last_ran_security_user_id of this ReportItem.  # noqa: E501

        Last Ran Security User  # noqa: E501

        :return: The last_ran_security_user_id of this ReportItem.  # noqa: E501
        :rtype: int
        """
        return self._last_ran_security_user_id

    @last_ran_security_user_id.setter
    def last_ran_security_user_id(self, last_ran_security_user_id):
        """Sets the last_ran_security_user_id of this ReportItem.

        Last Ran Security User  # noqa: E501

        :param last_ran_security_user_id: The last_ran_security_user_id of this ReportItem.  # noqa: E501
        :type: int
        """

        self._last_ran_security_user_id = last_ran_security_user_id

    @property
    def last_ran_date(self):
        """Gets the last_ran_date of this ReportItem.  # noqa: E501

        Last Ran Date  # noqa: E501

        :return: The last_ran_date of this ReportItem.  # noqa: E501
        :rtype: str
        """
        return self._last_ran_date

    @last_ran_date.setter
    def last_ran_date(self, last_ran_date):
        """Sets the last_ran_date of this ReportItem.

        Last Ran Date  # noqa: E501

        :param last_ran_date: The last_ran_date of this ReportItem.  # noqa: E501
        :type: str
        """

        self._last_ran_date = last_ran_date

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this ReportItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this ReportItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this ReportItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this ReportItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def date_created(self):
        """Gets the date_created of this ReportItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this ReportItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ReportItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this ReportItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this ReportItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this ReportItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ReportItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this ReportItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
