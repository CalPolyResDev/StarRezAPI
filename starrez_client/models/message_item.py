# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MessageItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_id': 'int',
        'message_action_id': 'int',
        'message_subscription_id': 'int',
        'message_date': 'str',
        'security_user_id': 'int',
        'machine_name': 'str',
        'class_name': 'str',
        'existing_data': 'str',
        'new_data': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'message_id': 'MessageID',
        'message_action_id': 'MessageActionID',
        'message_subscription_id': 'MessageSubscriptionID',
        'message_date': 'MessageDate',
        'security_user_id': 'SecurityUserID',
        'machine_name': 'MachineName',
        'class_name': 'ClassName',
        'existing_data': 'ExistingData',
        'new_data': 'NewData',
        'date_modified': 'DateModified'
    }

    def __init__(self, message_id=None, message_action_id=None, message_subscription_id=None, message_date=None, security_user_id=None, machine_name=None, class_name=None, existing_data=None, new_data=None, date_modified=None):  # noqa: E501
        """MessageItem - a model defined in Swagger"""  # noqa: E501

        self._message_id = None
        self._message_action_id = None
        self._message_subscription_id = None
        self._message_date = None
        self._security_user_id = None
        self._machine_name = None
        self._class_name = None
        self._existing_data = None
        self._new_data = None
        self._date_modified = None
        self.discriminator = None

        if message_id is not None:
            self.message_id = message_id
        if message_action_id is not None:
            self.message_action_id = message_action_id
        if message_subscription_id is not None:
            self.message_subscription_id = message_subscription_id
        if message_date is not None:
            self.message_date = message_date
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if machine_name is not None:
            self.machine_name = machine_name
        if class_name is not None:
            self.class_name = class_name
        if existing_data is not None:
            self.existing_data = existing_data
        if new_data is not None:
            self.new_data = new_data
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def message_id(self):
        """Gets the message_id of this MessageItem.  # noqa: E501

        Message  # noqa: E501

        :return: The message_id of this MessageItem.  # noqa: E501
        :rtype: int
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this MessageItem.

        Message  # noqa: E501

        :param message_id: The message_id of this MessageItem.  # noqa: E501
        :type: int
        """

        self._message_id = message_id

    @property
    def message_action_id(self):
        """Gets the message_action_id of this MessageItem.  # noqa: E501

        Message Action  # noqa: E501

        :return: The message_action_id of this MessageItem.  # noqa: E501
        :rtype: int
        """
        return self._message_action_id

    @message_action_id.setter
    def message_action_id(self, message_action_id):
        """Sets the message_action_id of this MessageItem.

        Message Action  # noqa: E501

        :param message_action_id: The message_action_id of this MessageItem.  # noqa: E501
        :type: int
        """

        self._message_action_id = message_action_id

    @property
    def message_subscription_id(self):
        """Gets the message_subscription_id of this MessageItem.  # noqa: E501

        Message Subscription  # noqa: E501

        :return: The message_subscription_id of this MessageItem.  # noqa: E501
        :rtype: int
        """
        return self._message_subscription_id

    @message_subscription_id.setter
    def message_subscription_id(self, message_subscription_id):
        """Sets the message_subscription_id of this MessageItem.

        Message Subscription  # noqa: E501

        :param message_subscription_id: The message_subscription_id of this MessageItem.  # noqa: E501
        :type: int
        """

        self._message_subscription_id = message_subscription_id

    @property
    def message_date(self):
        """Gets the message_date of this MessageItem.  # noqa: E501

        Message Date  # noqa: E501

        :return: The message_date of this MessageItem.  # noqa: E501
        :rtype: str
        """
        return self._message_date

    @message_date.setter
    def message_date(self, message_date):
        """Sets the message_date of this MessageItem.

        Message Date  # noqa: E501

        :param message_date: The message_date of this MessageItem.  # noqa: E501
        :type: str
        """

        self._message_date = message_date

    @property
    def security_user_id(self):
        """Gets the security_user_id of this MessageItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this MessageItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this MessageItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this MessageItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def machine_name(self):
        """Gets the machine_name of this MessageItem.  # noqa: E501

        Machine Name  # noqa: E501

        :return: The machine_name of this MessageItem.  # noqa: E501
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this MessageItem.

        Machine Name  # noqa: E501

        :param machine_name: The machine_name of this MessageItem.  # noqa: E501
        :type: str
        """
        if machine_name is not None and len(machine_name) > 30:
            raise ValueError("Invalid value for `machine_name`, length must be less than or equal to `30`")  # noqa: E501

        self._machine_name = machine_name

    @property
    def class_name(self):
        """Gets the class_name of this MessageItem.  # noqa: E501

        Class Name  # noqa: E501

        :return: The class_name of this MessageItem.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this MessageItem.

        Class Name  # noqa: E501

        :param class_name: The class_name of this MessageItem.  # noqa: E501
        :type: str
        """
        if class_name is not None and len(class_name) > 250:
            raise ValueError("Invalid value for `class_name`, length must be less than or equal to `250`")  # noqa: E501

        self._class_name = class_name

    @property
    def existing_data(self):
        """Gets the existing_data of this MessageItem.  # noqa: E501

        Existing Data  # noqa: E501

        :return: The existing_data of this MessageItem.  # noqa: E501
        :rtype: str
        """
        return self._existing_data

    @existing_data.setter
    def existing_data(self, existing_data):
        """Sets the existing_data of this MessageItem.

        Existing Data  # noqa: E501

        :param existing_data: The existing_data of this MessageItem.  # noqa: E501
        :type: str
        """

        self._existing_data = existing_data

    @property
    def new_data(self):
        """Gets the new_data of this MessageItem.  # noqa: E501

        New Data  # noqa: E501

        :return: The new_data of this MessageItem.  # noqa: E501
        :rtype: str
        """
        return self._new_data

    @new_data.setter
    def new_data(self, new_data):
        """Sets the new_data of this MessageItem.

        New Data  # noqa: E501

        :param new_data: The new_data of this MessageItem.  # noqa: E501
        :type: str
        """

        self._new_data = new_data

    @property
    def date_modified(self):
        """Gets the date_modified of this MessageItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this MessageItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this MessageItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this MessageItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
