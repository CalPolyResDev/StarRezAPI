# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IncidentItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'incident_id': 'int',
        'incident_status_id': 'int',
        'category_id': 'int',
        'incident_date': 'datetime',
        'view_on_web': 'bool',
        'title': 'str',
        'description': 'str',
        'report_number': 'str',
        'incident_manager_entry_id': 'int',
        'action_required': 'str',
        'room_location_id': 'int',
        'room_location_floor_suite_id': 'int',
        'room_base_id': 'int',
        'location_comments': 'str',
        'incident_clery_geography_id': 'int',
        'location_locked': 'bool',
        'property_damaged': 'bool',
        'property_stolen': 'bool',
        'victim': 'bool',
        'victim_perpetrator_known': 'bool',
        'victim_injured': 'bool',
        'victim_comments': 'str',
        'comments': 'str',
        'security_user_id': 'int',
        'created_by_security_user_id': 'int',
        'date_created': 'datetime',
        'incident_guid': 'str',
        'timestamp': 'str',
        'workflow_step_id': 'int',
        'assigned_to_security_user_id': 'int',
        'current_workflow_history_id': 'int',
        'previous_workflow_history_id': 'int',
        'date_modified': 'str'
    }

    attribute_map = {
        'incident_id': 'IncidentID',
        'incident_status_id': 'IncidentStatusID',
        'category_id': 'CategoryID',
        'incident_date': 'IncidentDate',
        'view_on_web': 'ViewOnWeb',
        'title': 'Title',
        'description': 'Description',
        'report_number': 'ReportNumber',
        'incident_manager_entry_id': 'IncidentManager_EntryID',
        'action_required': 'ActionRequired',
        'room_location_id': 'RoomLocationID',
        'room_location_floor_suite_id': 'RoomLocationFloorSuiteID',
        'room_base_id': 'RoomBaseID',
        'location_comments': 'LocationComments',
        'incident_clery_geography_id': 'IncidentCleryGeographyID',
        'location_locked': 'LocationLocked',
        'property_damaged': 'PropertyDamaged',
        'property_stolen': 'PropertyStolen',
        'victim': 'Victim',
        'victim_perpetrator_known': 'VictimPerpetratorKnown',
        'victim_injured': 'VictimInjured',
        'victim_comments': 'VictimComments',
        'comments': 'Comments',
        'security_user_id': 'SecurityUserID',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'date_created': 'DateCreated',
        'incident_guid': 'IncidentGUID',
        'timestamp': 'timestamp',
        'workflow_step_id': 'WorkflowStepID',
        'assigned_to_security_user_id': 'AssignedTo_SecurityUserID',
        'current_workflow_history_id': 'Current_WorkflowHistoryID',
        'previous_workflow_history_id': 'Previous_WorkflowHistoryID',
        'date_modified': 'DateModified'
    }

    def __init__(self, incident_id=None, incident_status_id=None, category_id=None, incident_date=None, view_on_web=None, title=None, description=None, report_number=None, incident_manager_entry_id=None, action_required=None, room_location_id=None, room_location_floor_suite_id=None, room_base_id=None, location_comments=None, incident_clery_geography_id=None, location_locked=None, property_damaged=None, property_stolen=None, victim=None, victim_perpetrator_known=None, victim_injured=None, victim_comments=None, comments=None, security_user_id=None, created_by_security_user_id=None, date_created=None, incident_guid=None, timestamp=None, workflow_step_id=None, assigned_to_security_user_id=None, current_workflow_history_id=None, previous_workflow_history_id=None, date_modified=None):  # noqa: E501
        """IncidentItem - a model defined in Swagger"""  # noqa: E501

        self._incident_id = None
        self._incident_status_id = None
        self._category_id = None
        self._incident_date = None
        self._view_on_web = None
        self._title = None
        self._description = None
        self._report_number = None
        self._incident_manager_entry_id = None
        self._action_required = None
        self._room_location_id = None
        self._room_location_floor_suite_id = None
        self._room_base_id = None
        self._location_comments = None
        self._incident_clery_geography_id = None
        self._location_locked = None
        self._property_damaged = None
        self._property_stolen = None
        self._victim = None
        self._victim_perpetrator_known = None
        self._victim_injured = None
        self._victim_comments = None
        self._comments = None
        self._security_user_id = None
        self._created_by_security_user_id = None
        self._date_created = None
        self._incident_guid = None
        self._timestamp = None
        self._workflow_step_id = None
        self._assigned_to_security_user_id = None
        self._current_workflow_history_id = None
        self._previous_workflow_history_id = None
        self._date_modified = None
        self.discriminator = None

        if incident_id is not None:
            self.incident_id = incident_id
        if incident_status_id is not None:
            self.incident_status_id = incident_status_id
        if category_id is not None:
            self.category_id = category_id
        if incident_date is not None:
            self.incident_date = incident_date
        if view_on_web is not None:
            self.view_on_web = view_on_web
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if report_number is not None:
            self.report_number = report_number
        if incident_manager_entry_id is not None:
            self.incident_manager_entry_id = incident_manager_entry_id
        if action_required is not None:
            self.action_required = action_required
        if room_location_id is not None:
            self.room_location_id = room_location_id
        if room_location_floor_suite_id is not None:
            self.room_location_floor_suite_id = room_location_floor_suite_id
        if room_base_id is not None:
            self.room_base_id = room_base_id
        if location_comments is not None:
            self.location_comments = location_comments
        if incident_clery_geography_id is not None:
            self.incident_clery_geography_id = incident_clery_geography_id
        if location_locked is not None:
            self.location_locked = location_locked
        if property_damaged is not None:
            self.property_damaged = property_damaged
        if property_stolen is not None:
            self.property_stolen = property_stolen
        if victim is not None:
            self.victim = victim
        if victim_perpetrator_known is not None:
            self.victim_perpetrator_known = victim_perpetrator_known
        if victim_injured is not None:
            self.victim_injured = victim_injured
        if victim_comments is not None:
            self.victim_comments = victim_comments
        if comments is not None:
            self.comments = comments
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if date_created is not None:
            self.date_created = date_created
        if incident_guid is not None:
            self.incident_guid = incident_guid
        if timestamp is not None:
            self.timestamp = timestamp
        if workflow_step_id is not None:
            self.workflow_step_id = workflow_step_id
        if assigned_to_security_user_id is not None:
            self.assigned_to_security_user_id = assigned_to_security_user_id
        if current_workflow_history_id is not None:
            self.current_workflow_history_id = current_workflow_history_id
        if previous_workflow_history_id is not None:
            self.previous_workflow_history_id = previous_workflow_history_id
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def incident_id(self):
        """Gets the incident_id of this IncidentItem.  # noqa: E501

        Incident  # noqa: E501

        :return: The incident_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_id

    @incident_id.setter
    def incident_id(self, incident_id):
        """Sets the incident_id of this IncidentItem.

        Incident  # noqa: E501

        :param incident_id: The incident_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._incident_id = incident_id

    @property
    def incident_status_id(self):
        """Gets the incident_status_id of this IncidentItem.  # noqa: E501

        Incident Status  # noqa: E501

        :return: The incident_status_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_status_id

    @incident_status_id.setter
    def incident_status_id(self, incident_status_id):
        """Sets the incident_status_id of this IncidentItem.

        Incident Status  # noqa: E501

        :param incident_status_id: The incident_status_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._incident_status_id = incident_status_id

    @property
    def category_id(self):
        """Gets the category_id of this IncidentItem.  # noqa: E501

        Category  # noqa: E501

        :return: The category_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this IncidentItem.

        Category  # noqa: E501

        :param category_id: The category_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def incident_date(self):
        """Gets the incident_date of this IncidentItem.  # noqa: E501

        Incident Date  # noqa: E501

        :return: The incident_date of this IncidentItem.  # noqa: E501
        :rtype: datetime
        """
        return self._incident_date

    @incident_date.setter
    def incident_date(self, incident_date):
        """Sets the incident_date of this IncidentItem.

        Incident Date  # noqa: E501

        :param incident_date: The incident_date of this IncidentItem.  # noqa: E501
        :type: datetime
        """

        self._incident_date = incident_date

    @property
    def view_on_web(self):
        """Gets the view_on_web of this IncidentItem.  # noqa: E501

        View On Web  # noqa: E501

        :return: The view_on_web of this IncidentItem.  # noqa: E501
        :rtype: bool
        """
        return self._view_on_web

    @view_on_web.setter
    def view_on_web(self, view_on_web):
        """Sets the view_on_web of this IncidentItem.

        View On Web  # noqa: E501

        :param view_on_web: The view_on_web of this IncidentItem.  # noqa: E501
        :type: bool
        """

        self._view_on_web = view_on_web

    @property
    def title(self):
        """Gets the title of this IncidentItem.  # noqa: E501

        Title  # noqa: E501

        :return: The title of this IncidentItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IncidentItem.

        Title  # noqa: E501

        :param title: The title of this IncidentItem.  # noqa: E501
        :type: str
        """
        if title is not None and len(title) > 100:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `100`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this IncidentItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this IncidentItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IncidentItem.

        Description  # noqa: E501

        :param description: The description of this IncidentItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def report_number(self):
        """Gets the report_number of this IncidentItem.  # noqa: E501

        Report Number  # noqa: E501

        :return: The report_number of this IncidentItem.  # noqa: E501
        :rtype: str
        """
        return self._report_number

    @report_number.setter
    def report_number(self, report_number):
        """Sets the report_number of this IncidentItem.

        Report Number  # noqa: E501

        :param report_number: The report_number of this IncidentItem.  # noqa: E501
        :type: str
        """
        if report_number is not None and len(report_number) > 50:
            raise ValueError("Invalid value for `report_number`, length must be less than or equal to `50`")  # noqa: E501

        self._report_number = report_number

    @property
    def incident_manager_entry_id(self):
        """Gets the incident_manager_entry_id of this IncidentItem.  # noqa: E501

        Incident Manager Entry  # noqa: E501

        :return: The incident_manager_entry_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_manager_entry_id

    @incident_manager_entry_id.setter
    def incident_manager_entry_id(self, incident_manager_entry_id):
        """Sets the incident_manager_entry_id of this IncidentItem.

        Incident Manager Entry  # noqa: E501

        :param incident_manager_entry_id: The incident_manager_entry_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._incident_manager_entry_id = incident_manager_entry_id

    @property
    def action_required(self):
        """Gets the action_required of this IncidentItem.  # noqa: E501

        Action Required  # noqa: E501

        :return: The action_required of this IncidentItem.  # noqa: E501
        :rtype: str
        """
        return self._action_required

    @action_required.setter
    def action_required(self, action_required):
        """Sets the action_required of this IncidentItem.

        Action Required  # noqa: E501

        :param action_required: The action_required of this IncidentItem.  # noqa: E501
        :type: str
        """
        if action_required is not None and len(action_required) > 100:
            raise ValueError("Invalid value for `action_required`, length must be less than or equal to `100`")  # noqa: E501

        self._action_required = action_required

    @property
    def room_location_id(self):
        """Gets the room_location_id of this IncidentItem.  # noqa: E501

        Room Location  # noqa: E501

        :return: The room_location_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._room_location_id

    @room_location_id.setter
    def room_location_id(self, room_location_id):
        """Sets the room_location_id of this IncidentItem.

        Room Location  # noqa: E501

        :param room_location_id: The room_location_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._room_location_id = room_location_id

    @property
    def room_location_floor_suite_id(self):
        """Gets the room_location_floor_suite_id of this IncidentItem.  # noqa: E501

        Room Location Floor Suite  # noqa: E501

        :return: The room_location_floor_suite_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._room_location_floor_suite_id

    @room_location_floor_suite_id.setter
    def room_location_floor_suite_id(self, room_location_floor_suite_id):
        """Sets the room_location_floor_suite_id of this IncidentItem.

        Room Location Floor Suite  # noqa: E501

        :param room_location_floor_suite_id: The room_location_floor_suite_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._room_location_floor_suite_id = room_location_floor_suite_id

    @property
    def room_base_id(self):
        """Gets the room_base_id of this IncidentItem.  # noqa: E501

        Room Base  # noqa: E501

        :return: The room_base_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._room_base_id

    @room_base_id.setter
    def room_base_id(self, room_base_id):
        """Sets the room_base_id of this IncidentItem.

        Room Base  # noqa: E501

        :param room_base_id: The room_base_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._room_base_id = room_base_id

    @property
    def location_comments(self):
        """Gets the location_comments of this IncidentItem.  # noqa: E501

        Location Comments  # noqa: E501

        :return: The location_comments of this IncidentItem.  # noqa: E501
        :rtype: str
        """
        return self._location_comments

    @location_comments.setter
    def location_comments(self, location_comments):
        """Sets the location_comments of this IncidentItem.

        Location Comments  # noqa: E501

        :param location_comments: The location_comments of this IncidentItem.  # noqa: E501
        :type: str
        """
        if location_comments is not None and len(location_comments) > 100:
            raise ValueError("Invalid value for `location_comments`, length must be less than or equal to `100`")  # noqa: E501

        self._location_comments = location_comments

    @property
    def incident_clery_geography_id(self):
        """Gets the incident_clery_geography_id of this IncidentItem.  # noqa: E501

        Incident Clery Geography  # noqa: E501

        :return: The incident_clery_geography_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_clery_geography_id

    @incident_clery_geography_id.setter
    def incident_clery_geography_id(self, incident_clery_geography_id):
        """Sets the incident_clery_geography_id of this IncidentItem.

        Incident Clery Geography  # noqa: E501

        :param incident_clery_geography_id: The incident_clery_geography_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._incident_clery_geography_id = incident_clery_geography_id

    @property
    def location_locked(self):
        """Gets the location_locked of this IncidentItem.  # noqa: E501

        Location Locked  # noqa: E501

        :return: The location_locked of this IncidentItem.  # noqa: E501
        :rtype: bool
        """
        return self._location_locked

    @location_locked.setter
    def location_locked(self, location_locked):
        """Sets the location_locked of this IncidentItem.

        Location Locked  # noqa: E501

        :param location_locked: The location_locked of this IncidentItem.  # noqa: E501
        :type: bool
        """

        self._location_locked = location_locked

    @property
    def property_damaged(self):
        """Gets the property_damaged of this IncidentItem.  # noqa: E501

        Property Damaged  # noqa: E501

        :return: The property_damaged of this IncidentItem.  # noqa: E501
        :rtype: bool
        """
        return self._property_damaged

    @property_damaged.setter
    def property_damaged(self, property_damaged):
        """Sets the property_damaged of this IncidentItem.

        Property Damaged  # noqa: E501

        :param property_damaged: The property_damaged of this IncidentItem.  # noqa: E501
        :type: bool
        """

        self._property_damaged = property_damaged

    @property
    def property_stolen(self):
        """Gets the property_stolen of this IncidentItem.  # noqa: E501

        Property Stolen  # noqa: E501

        :return: The property_stolen of this IncidentItem.  # noqa: E501
        :rtype: bool
        """
        return self._property_stolen

    @property_stolen.setter
    def property_stolen(self, property_stolen):
        """Sets the property_stolen of this IncidentItem.

        Property Stolen  # noqa: E501

        :param property_stolen: The property_stolen of this IncidentItem.  # noqa: E501
        :type: bool
        """

        self._property_stolen = property_stolen

    @property
    def victim(self):
        """Gets the victim of this IncidentItem.  # noqa: E501

        Victim  # noqa: E501

        :return: The victim of this IncidentItem.  # noqa: E501
        :rtype: bool
        """
        return self._victim

    @victim.setter
    def victim(self, victim):
        """Sets the victim of this IncidentItem.

        Victim  # noqa: E501

        :param victim: The victim of this IncidentItem.  # noqa: E501
        :type: bool
        """

        self._victim = victim

    @property
    def victim_perpetrator_known(self):
        """Gets the victim_perpetrator_known of this IncidentItem.  # noqa: E501

        Victim Perpetrator Known  # noqa: E501

        :return: The victim_perpetrator_known of this IncidentItem.  # noqa: E501
        :rtype: bool
        """
        return self._victim_perpetrator_known

    @victim_perpetrator_known.setter
    def victim_perpetrator_known(self, victim_perpetrator_known):
        """Sets the victim_perpetrator_known of this IncidentItem.

        Victim Perpetrator Known  # noqa: E501

        :param victim_perpetrator_known: The victim_perpetrator_known of this IncidentItem.  # noqa: E501
        :type: bool
        """

        self._victim_perpetrator_known = victim_perpetrator_known

    @property
    def victim_injured(self):
        """Gets the victim_injured of this IncidentItem.  # noqa: E501

        Victim Injured  # noqa: E501

        :return: The victim_injured of this IncidentItem.  # noqa: E501
        :rtype: bool
        """
        return self._victim_injured

    @victim_injured.setter
    def victim_injured(self, victim_injured):
        """Sets the victim_injured of this IncidentItem.

        Victim Injured  # noqa: E501

        :param victim_injured: The victim_injured of this IncidentItem.  # noqa: E501
        :type: bool
        """

        self._victim_injured = victim_injured

    @property
    def victim_comments(self):
        """Gets the victim_comments of this IncidentItem.  # noqa: E501

        Victim Comments  # noqa: E501

        :return: The victim_comments of this IncidentItem.  # noqa: E501
        :rtype: str
        """
        return self._victim_comments

    @victim_comments.setter
    def victim_comments(self, victim_comments):
        """Sets the victim_comments of this IncidentItem.

        Victim Comments  # noqa: E501

        :param victim_comments: The victim_comments of this IncidentItem.  # noqa: E501
        :type: str
        """
        if victim_comments is not None and len(victim_comments) > 500:
            raise ValueError("Invalid value for `victim_comments`, length must be less than or equal to `500`")  # noqa: E501

        self._victim_comments = victim_comments

    @property
    def comments(self):
        """Gets the comments of this IncidentItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this IncidentItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this IncidentItem.

        Comments  # noqa: E501

        :param comments: The comments of this IncidentItem.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def security_user_id(self):
        """Gets the security_user_id of this IncidentItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this IncidentItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this IncidentItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this IncidentItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this IncidentItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this IncidentItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this IncidentItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this IncidentItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def incident_guid(self):
        """Gets the incident_guid of this IncidentItem.  # noqa: E501

        Incident GUID  # noqa: E501

        :return: The incident_guid of this IncidentItem.  # noqa: E501
        :rtype: str
        """
        return self._incident_guid

    @incident_guid.setter
    def incident_guid(self, incident_guid):
        """Sets the incident_guid of this IncidentItem.

        Incident GUID  # noqa: E501

        :param incident_guid: The incident_guid of this IncidentItem.  # noqa: E501
        :type: str
        """

        self._incident_guid = incident_guid

    @property
    def timestamp(self):
        """Gets the timestamp of this IncidentItem.  # noqa: E501

        Timestamp  # noqa: E501

        :return: The timestamp of this IncidentItem.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this IncidentItem.

        Timestamp  # noqa: E501

        :param timestamp: The timestamp of this IncidentItem.  # noqa: E501
        :type: str
        """
        if timestamp is not None and len(timestamp) > 8:
            raise ValueError("Invalid value for `timestamp`, length must be less than or equal to `8`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def workflow_step_id(self):
        """Gets the workflow_step_id of this IncidentItem.  # noqa: E501

        Workflow Step  # noqa: E501

        :return: The workflow_step_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._workflow_step_id

    @workflow_step_id.setter
    def workflow_step_id(self, workflow_step_id):
        """Sets the workflow_step_id of this IncidentItem.

        Workflow Step  # noqa: E501

        :param workflow_step_id: The workflow_step_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._workflow_step_id = workflow_step_id

    @property
    def assigned_to_security_user_id(self):
        """Gets the assigned_to_security_user_id of this IncidentItem.  # noqa: E501

        Assigned To Security User  # noqa: E501

        :return: The assigned_to_security_user_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._assigned_to_security_user_id

    @assigned_to_security_user_id.setter
    def assigned_to_security_user_id(self, assigned_to_security_user_id):
        """Sets the assigned_to_security_user_id of this IncidentItem.

        Assigned To Security User  # noqa: E501

        :param assigned_to_security_user_id: The assigned_to_security_user_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._assigned_to_security_user_id = assigned_to_security_user_id

    @property
    def current_workflow_history_id(self):
        """Gets the current_workflow_history_id of this IncidentItem.  # noqa: E501

        Current Workflow History  # noqa: E501

        :return: The current_workflow_history_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._current_workflow_history_id

    @current_workflow_history_id.setter
    def current_workflow_history_id(self, current_workflow_history_id):
        """Sets the current_workflow_history_id of this IncidentItem.

        Current Workflow History  # noqa: E501

        :param current_workflow_history_id: The current_workflow_history_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._current_workflow_history_id = current_workflow_history_id

    @property
    def previous_workflow_history_id(self):
        """Gets the previous_workflow_history_id of this IncidentItem.  # noqa: E501

        Previous Workflow History  # noqa: E501

        :return: The previous_workflow_history_id of this IncidentItem.  # noqa: E501
        :rtype: int
        """
        return self._previous_workflow_history_id

    @previous_workflow_history_id.setter
    def previous_workflow_history_id(self, previous_workflow_history_id):
        """Sets the previous_workflow_history_id of this IncidentItem.

        Previous Workflow History  # noqa: E501

        :param previous_workflow_history_id: The previous_workflow_history_id of this IncidentItem.  # noqa: E501
        :type: int
        """

        self._previous_workflow_history_id = previous_workflow_history_id

    @property
    def date_modified(self):
        """Gets the date_modified of this IncidentItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this IncidentItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this IncidentItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this IncidentItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncidentItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
