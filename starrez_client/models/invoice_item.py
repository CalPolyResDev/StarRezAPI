# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InvoiceItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_id': 'int',
        'invoice_type_enum': 'str',
        'entry_id': 'int',
        'description': 'str',
        'invoice_from_date': 'str',
        'invoice_to_date': 'str',
        'invoice_date': 'str',
        'due_date': 'str',
        'previous_balance': 'str',
        'invoice_total': 'str',
        'invoice_tax_total': 'str',
        'invoice_balance': 'str',
        'discount_date': 'datetime',
        'discount_total': 'str',
        'charge_group_list': 'str',
        'entry_name': 'str',
        'category_description': 'str',
        'room_space_description': 'str',
        'electronic_identity': 'str',
        'account_code': 'str',
        'account_due_date': 'datetime',
        'account_due': 'bool',
        'id1': 'str',
        'address_salutation': 'str',
        'address_contact_name': 'str',
        'address_street': 'str',
        'address_street2': 'str',
        'address_city': 'str',
        'address_country': 'str',
        'address_state_province': 'str',
        'address_zip_postcode': 'str',
        'comments': 'str',
        'machine_name': 'str',
        'external_number': 'str',
        'security_user_id': 'int',
        'date_modified': 'str'
    }

    attribute_map = {
        'invoice_id': 'InvoiceID',
        'invoice_type_enum': 'InvoiceTypeEnum',
        'entry_id': 'EntryID',
        'description': 'Description',
        'invoice_from_date': 'InvoiceFromDate',
        'invoice_to_date': 'InvoiceToDate',
        'invoice_date': 'InvoiceDate',
        'due_date': 'DueDate',
        'previous_balance': 'PreviousBalance',
        'invoice_total': 'InvoiceTotal',
        'invoice_tax_total': 'InvoiceTaxTotal',
        'invoice_balance': 'InvoiceBalance',
        'discount_date': 'DiscountDate',
        'discount_total': 'DiscountTotal',
        'charge_group_list': 'ChargeGroupList',
        'entry_name': 'EntryName',
        'category_description': 'Category_Description',
        'room_space_description': 'RoomSpace_Description',
        'electronic_identity': 'ElectronicIdentity',
        'account_code': 'AccountCode',
        'account_due_date': 'AccountDueDate',
        'account_due': 'AccountDue',
        'id1': 'ID1',
        'address_salutation': 'AddressSalutation',
        'address_contact_name': 'AddressContactName',
        'address_street': 'AddressStreet',
        'address_street2': 'AddressStreet2',
        'address_city': 'AddressCity',
        'address_country': 'AddressCountry',
        'address_state_province': 'AddressStateProvince',
        'address_zip_postcode': 'AddressZipPostcode',
        'comments': 'Comments',
        'machine_name': 'MachineName',
        'external_number': 'ExternalNumber',
        'security_user_id': 'SecurityUserID',
        'date_modified': 'DateModified'
    }

    def __init__(self, invoice_id=None, invoice_type_enum=None, entry_id=None, description=None, invoice_from_date=None, invoice_to_date=None, invoice_date=None, due_date=None, previous_balance=None, invoice_total=None, invoice_tax_total=None, invoice_balance=None, discount_date=None, discount_total=None, charge_group_list=None, entry_name=None, category_description=None, room_space_description=None, electronic_identity=None, account_code=None, account_due_date=None, account_due=None, id1=None, address_salutation=None, address_contact_name=None, address_street=None, address_street2=None, address_city=None, address_country=None, address_state_province=None, address_zip_postcode=None, comments=None, machine_name=None, external_number=None, security_user_id=None, date_modified=None):  # noqa: E501
        """InvoiceItem - a model defined in Swagger"""  # noqa: E501

        self._invoice_id = None
        self._invoice_type_enum = None
        self._entry_id = None
        self._description = None
        self._invoice_from_date = None
        self._invoice_to_date = None
        self._invoice_date = None
        self._due_date = None
        self._previous_balance = None
        self._invoice_total = None
        self._invoice_tax_total = None
        self._invoice_balance = None
        self._discount_date = None
        self._discount_total = None
        self._charge_group_list = None
        self._entry_name = None
        self._category_description = None
        self._room_space_description = None
        self._electronic_identity = None
        self._account_code = None
        self._account_due_date = None
        self._account_due = None
        self._id1 = None
        self._address_salutation = None
        self._address_contact_name = None
        self._address_street = None
        self._address_street2 = None
        self._address_city = None
        self._address_country = None
        self._address_state_province = None
        self._address_zip_postcode = None
        self._comments = None
        self._machine_name = None
        self._external_number = None
        self._security_user_id = None
        self._date_modified = None
        self.discriminator = None

        if invoice_id is not None:
            self.invoice_id = invoice_id
        if invoice_type_enum is not None:
            self.invoice_type_enum = invoice_type_enum
        if entry_id is not None:
            self.entry_id = entry_id
        if description is not None:
            self.description = description
        if invoice_from_date is not None:
            self.invoice_from_date = invoice_from_date
        if invoice_to_date is not None:
            self.invoice_to_date = invoice_to_date
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if due_date is not None:
            self.due_date = due_date
        if previous_balance is not None:
            self.previous_balance = previous_balance
        if invoice_total is not None:
            self.invoice_total = invoice_total
        if invoice_tax_total is not None:
            self.invoice_tax_total = invoice_tax_total
        if invoice_balance is not None:
            self.invoice_balance = invoice_balance
        if discount_date is not None:
            self.discount_date = discount_date
        if discount_total is not None:
            self.discount_total = discount_total
        if charge_group_list is not None:
            self.charge_group_list = charge_group_list
        if entry_name is not None:
            self.entry_name = entry_name
        if category_description is not None:
            self.category_description = category_description
        if room_space_description is not None:
            self.room_space_description = room_space_description
        if electronic_identity is not None:
            self.electronic_identity = electronic_identity
        if account_code is not None:
            self.account_code = account_code
        if account_due_date is not None:
            self.account_due_date = account_due_date
        if account_due is not None:
            self.account_due = account_due
        if id1 is not None:
            self.id1 = id1
        if address_salutation is not None:
            self.address_salutation = address_salutation
        if address_contact_name is not None:
            self.address_contact_name = address_contact_name
        if address_street is not None:
            self.address_street = address_street
        if address_street2 is not None:
            self.address_street2 = address_street2
        if address_city is not None:
            self.address_city = address_city
        if address_country is not None:
            self.address_country = address_country
        if address_state_province is not None:
            self.address_state_province = address_state_province
        if address_zip_postcode is not None:
            self.address_zip_postcode = address_zip_postcode
        if comments is not None:
            self.comments = comments
        if machine_name is not None:
            self.machine_name = machine_name
        if external_number is not None:
            self.external_number = external_number
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def invoice_id(self):
        """Gets the invoice_id of this InvoiceItem.  # noqa: E501

        Invoice  # noqa: E501

        :return: The invoice_id of this InvoiceItem.  # noqa: E501
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this InvoiceItem.

        Invoice  # noqa: E501

        :param invoice_id: The invoice_id of this InvoiceItem.  # noqa: E501
        :type: int
        """

        self._invoice_id = invoice_id

    @property
    def invoice_type_enum(self):
        """Gets the invoice_type_enum of this InvoiceItem.  # noqa: E501

        Invoice Type  # noqa: E501

        :return: The invoice_type_enum of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_type_enum

    @invoice_type_enum.setter
    def invoice_type_enum(self, invoice_type_enum):
        """Sets the invoice_type_enum of this InvoiceItem.

        Invoice Type  # noqa: E501

        :param invoice_type_enum: The invoice_type_enum of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._invoice_type_enum = invoice_type_enum

    @property
    def entry_id(self):
        """Gets the entry_id of this InvoiceItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this InvoiceItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this InvoiceItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this InvoiceItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def description(self):
        """Gets the description of this InvoiceItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvoiceItem.

        Description  # noqa: E501

        :param description: The description of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def invoice_from_date(self):
        """Gets the invoice_from_date of this InvoiceItem.  # noqa: E501

        Invoice From Date  # noqa: E501

        :return: The invoice_from_date of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_from_date

    @invoice_from_date.setter
    def invoice_from_date(self, invoice_from_date):
        """Sets the invoice_from_date of this InvoiceItem.

        Invoice From Date  # noqa: E501

        :param invoice_from_date: The invoice_from_date of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._invoice_from_date = invoice_from_date

    @property
    def invoice_to_date(self):
        """Gets the invoice_to_date of this InvoiceItem.  # noqa: E501

        Invoice To Date  # noqa: E501

        :return: The invoice_to_date of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_to_date

    @invoice_to_date.setter
    def invoice_to_date(self, invoice_to_date):
        """Sets the invoice_to_date of this InvoiceItem.

        Invoice To Date  # noqa: E501

        :param invoice_to_date: The invoice_to_date of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._invoice_to_date = invoice_to_date

    @property
    def invoice_date(self):
        """Gets the invoice_date of this InvoiceItem.  # noqa: E501

        Invoice Date  # noqa: E501

        :return: The invoice_date of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this InvoiceItem.

        Invoice Date  # noqa: E501

        :param invoice_date: The invoice_date of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._invoice_date = invoice_date

    @property
    def due_date(self):
        """Gets the due_date of this InvoiceItem.  # noqa: E501

        Due Date  # noqa: E501

        :return: The due_date of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this InvoiceItem.

        Due Date  # noqa: E501

        :param due_date: The due_date of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._due_date = due_date

    @property
    def previous_balance(self):
        """Gets the previous_balance of this InvoiceItem.  # noqa: E501

        Previous Balance  # noqa: E501

        :return: The previous_balance of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._previous_balance

    @previous_balance.setter
    def previous_balance(self, previous_balance):
        """Sets the previous_balance of this InvoiceItem.

        Previous Balance  # noqa: E501

        :param previous_balance: The previous_balance of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._previous_balance = previous_balance

    @property
    def invoice_total(self):
        """Gets the invoice_total of this InvoiceItem.  # noqa: E501

        Invoice Total  # noqa: E501

        :return: The invoice_total of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_total

    @invoice_total.setter
    def invoice_total(self, invoice_total):
        """Sets the invoice_total of this InvoiceItem.

        Invoice Total  # noqa: E501

        :param invoice_total: The invoice_total of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._invoice_total = invoice_total

    @property
    def invoice_tax_total(self):
        """Gets the invoice_tax_total of this InvoiceItem.  # noqa: E501

        Invoice Tax Total  # noqa: E501

        :return: The invoice_tax_total of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_tax_total

    @invoice_tax_total.setter
    def invoice_tax_total(self, invoice_tax_total):
        """Sets the invoice_tax_total of this InvoiceItem.

        Invoice Tax Total  # noqa: E501

        :param invoice_tax_total: The invoice_tax_total of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._invoice_tax_total = invoice_tax_total

    @property
    def invoice_balance(self):
        """Gets the invoice_balance of this InvoiceItem.  # noqa: E501

        Invoice Balance  # noqa: E501

        :return: The invoice_balance of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_balance

    @invoice_balance.setter
    def invoice_balance(self, invoice_balance):
        """Sets the invoice_balance of this InvoiceItem.

        Invoice Balance  # noqa: E501

        :param invoice_balance: The invoice_balance of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._invoice_balance = invoice_balance

    @property
    def discount_date(self):
        """Gets the discount_date of this InvoiceItem.  # noqa: E501

        Discount Date  # noqa: E501

        :return: The discount_date of this InvoiceItem.  # noqa: E501
        :rtype: datetime
        """
        return self._discount_date

    @discount_date.setter
    def discount_date(self, discount_date):
        """Sets the discount_date of this InvoiceItem.

        Discount Date  # noqa: E501

        :param discount_date: The discount_date of this InvoiceItem.  # noqa: E501
        :type: datetime
        """

        self._discount_date = discount_date

    @property
    def discount_total(self):
        """Gets the discount_total of this InvoiceItem.  # noqa: E501

        Discount Total  # noqa: E501

        :return: The discount_total of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._discount_total

    @discount_total.setter
    def discount_total(self, discount_total):
        """Sets the discount_total of this InvoiceItem.

        Discount Total  # noqa: E501

        :param discount_total: The discount_total of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._discount_total = discount_total

    @property
    def charge_group_list(self):
        """Gets the charge_group_list of this InvoiceItem.  # noqa: E501

        Charge Group List  # noqa: E501

        :return: The charge_group_list of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_group_list

    @charge_group_list.setter
    def charge_group_list(self, charge_group_list):
        """Sets the charge_group_list of this InvoiceItem.

        Charge Group List  # noqa: E501

        :param charge_group_list: The charge_group_list of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if charge_group_list is not None and len(charge_group_list) > 2000:
            raise ValueError("Invalid value for `charge_group_list`, length must be less than or equal to `2000`")  # noqa: E501

        self._charge_group_list = charge_group_list

    @property
    def entry_name(self):
        """Gets the entry_name of this InvoiceItem.  # noqa: E501

        Entry Name  # noqa: E501

        :return: The entry_name of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._entry_name

    @entry_name.setter
    def entry_name(self, entry_name):
        """Sets the entry_name of this InvoiceItem.

        Entry Name  # noqa: E501

        :param entry_name: The entry_name of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if entry_name is not None and len(entry_name) > 60:
            raise ValueError("Invalid value for `entry_name`, length must be less than or equal to `60`")  # noqa: E501

        self._entry_name = entry_name

    @property
    def category_description(self):
        """Gets the category_description of this InvoiceItem.  # noqa: E501

        Category Description  # noqa: E501

        :return: The category_description of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._category_description

    @category_description.setter
    def category_description(self, category_description):
        """Sets the category_description of this InvoiceItem.

        Category Description  # noqa: E501

        :param category_description: The category_description of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if category_description is not None and len(category_description) > 50:
            raise ValueError("Invalid value for `category_description`, length must be less than or equal to `50`")  # noqa: E501

        self._category_description = category_description

    @property
    def room_space_description(self):
        """Gets the room_space_description of this InvoiceItem.  # noqa: E501

        Room Space Description  # noqa: E501

        :return: The room_space_description of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._room_space_description

    @room_space_description.setter
    def room_space_description(self, room_space_description):
        """Sets the room_space_description of this InvoiceItem.

        Room Space Description  # noqa: E501

        :param room_space_description: The room_space_description of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if room_space_description is not None and len(room_space_description) > 20:
            raise ValueError("Invalid value for `room_space_description`, length must be less than or equal to `20`")  # noqa: E501

        self._room_space_description = room_space_description

    @property
    def electronic_identity(self):
        """Gets the electronic_identity of this InvoiceItem.  # noqa: E501

        Electronic Identity  # noqa: E501

        :return: The electronic_identity of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._electronic_identity

    @electronic_identity.setter
    def electronic_identity(self, electronic_identity):
        """Sets the electronic_identity of this InvoiceItem.

        Electronic Identity  # noqa: E501

        :param electronic_identity: The electronic_identity of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if electronic_identity is not None and len(electronic_identity) > 500:
            raise ValueError("Invalid value for `electronic_identity`, length must be less than or equal to `500`")  # noqa: E501

        self._electronic_identity = electronic_identity

    @property
    def account_code(self):
        """Gets the account_code of this InvoiceItem.  # noqa: E501

        Account Code  # noqa: E501

        :return: The account_code of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this InvoiceItem.

        Account Code  # noqa: E501

        :param account_code: The account_code of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if account_code is not None and len(account_code) > 20:
            raise ValueError("Invalid value for `account_code`, length must be less than or equal to `20`")  # noqa: E501

        self._account_code = account_code

    @property
    def account_due_date(self):
        """Gets the account_due_date of this InvoiceItem.  # noqa: E501

        Account Due Date  # noqa: E501

        :return: The account_due_date of this InvoiceItem.  # noqa: E501
        :rtype: datetime
        """
        return self._account_due_date

    @account_due_date.setter
    def account_due_date(self, account_due_date):
        """Sets the account_due_date of this InvoiceItem.

        Account Due Date  # noqa: E501

        :param account_due_date: The account_due_date of this InvoiceItem.  # noqa: E501
        :type: datetime
        """

        self._account_due_date = account_due_date

    @property
    def account_due(self):
        """Gets the account_due of this InvoiceItem.  # noqa: E501

        Account Due  # noqa: E501

        :return: The account_due of this InvoiceItem.  # noqa: E501
        :rtype: bool
        """
        return self._account_due

    @account_due.setter
    def account_due(self, account_due):
        """Sets the account_due of this InvoiceItem.

        Account Due  # noqa: E501

        :param account_due: The account_due of this InvoiceItem.  # noqa: E501
        :type: bool
        """

        self._account_due = account_due

    @property
    def id1(self):
        """Gets the id1 of this InvoiceItem.  # noqa: E501

        ID 1  # noqa: E501

        :return: The id1 of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._id1

    @id1.setter
    def id1(self, id1):
        """Sets the id1 of this InvoiceItem.

        ID 1  # noqa: E501

        :param id1: The id1 of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if id1 is not None and len(id1) > 30:
            raise ValueError("Invalid value for `id1`, length must be less than or equal to `30`")  # noqa: E501

        self._id1 = id1

    @property
    def address_salutation(self):
        """Gets the address_salutation of this InvoiceItem.  # noqa: E501

        Address Salutation  # noqa: E501

        :return: The address_salutation of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._address_salutation

    @address_salutation.setter
    def address_salutation(self, address_salutation):
        """Sets the address_salutation of this InvoiceItem.

        Address Salutation  # noqa: E501

        :param address_salutation: The address_salutation of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if address_salutation is not None and len(address_salutation) > 50:
            raise ValueError("Invalid value for `address_salutation`, length must be less than or equal to `50`")  # noqa: E501

        self._address_salutation = address_salutation

    @property
    def address_contact_name(self):
        """Gets the address_contact_name of this InvoiceItem.  # noqa: E501

        Address Contact Name  # noqa: E501

        :return: The address_contact_name of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._address_contact_name

    @address_contact_name.setter
    def address_contact_name(self, address_contact_name):
        """Sets the address_contact_name of this InvoiceItem.

        Address Contact Name  # noqa: E501

        :param address_contact_name: The address_contact_name of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if address_contact_name is not None and len(address_contact_name) > 50:
            raise ValueError("Invalid value for `address_contact_name`, length must be less than or equal to `50`")  # noqa: E501

        self._address_contact_name = address_contact_name

    @property
    def address_street(self):
        """Gets the address_street of this InvoiceItem.  # noqa: E501

        Address Street  # noqa: E501

        :return: The address_street of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._address_street

    @address_street.setter
    def address_street(self, address_street):
        """Sets the address_street of this InvoiceItem.

        Address Street  # noqa: E501

        :param address_street: The address_street of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if address_street is not None and len(address_street) > 50:
            raise ValueError("Invalid value for `address_street`, length must be less than or equal to `50`")  # noqa: E501

        self._address_street = address_street

    @property
    def address_street2(self):
        """Gets the address_street2 of this InvoiceItem.  # noqa: E501

        Address Street 2  # noqa: E501

        :return: The address_street2 of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._address_street2

    @address_street2.setter
    def address_street2(self, address_street2):
        """Sets the address_street2 of this InvoiceItem.

        Address Street 2  # noqa: E501

        :param address_street2: The address_street2 of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if address_street2 is not None and len(address_street2) > 50:
            raise ValueError("Invalid value for `address_street2`, length must be less than or equal to `50`")  # noqa: E501

        self._address_street2 = address_street2

    @property
    def address_city(self):
        """Gets the address_city of this InvoiceItem.  # noqa: E501

        Address City  # noqa: E501

        :return: The address_city of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this InvoiceItem.

        Address City  # noqa: E501

        :param address_city: The address_city of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if address_city is not None and len(address_city) > 40:
            raise ValueError("Invalid value for `address_city`, length must be less than or equal to `40`")  # noqa: E501

        self._address_city = address_city

    @property
    def address_country(self):
        """Gets the address_country of this InvoiceItem.  # noqa: E501

        Address Country  # noqa: E501

        :return: The address_country of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """Sets the address_country of this InvoiceItem.

        Address Country  # noqa: E501

        :param address_country: The address_country of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if address_country is not None and len(address_country) > 30:
            raise ValueError("Invalid value for `address_country`, length must be less than or equal to `30`")  # noqa: E501

        self._address_country = address_country

    @property
    def address_state_province(self):
        """Gets the address_state_province of this InvoiceItem.  # noqa: E501

        Address State Province  # noqa: E501

        :return: The address_state_province of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._address_state_province

    @address_state_province.setter
    def address_state_province(self, address_state_province):
        """Sets the address_state_province of this InvoiceItem.

        Address State Province  # noqa: E501

        :param address_state_province: The address_state_province of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if address_state_province is not None and len(address_state_province) > 20:
            raise ValueError("Invalid value for `address_state_province`, length must be less than or equal to `20`")  # noqa: E501

        self._address_state_province = address_state_province

    @property
    def address_zip_postcode(self):
        """Gets the address_zip_postcode of this InvoiceItem.  # noqa: E501

        Address Zip Postcode  # noqa: E501

        :return: The address_zip_postcode of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._address_zip_postcode

    @address_zip_postcode.setter
    def address_zip_postcode(self, address_zip_postcode):
        """Sets the address_zip_postcode of this InvoiceItem.

        Address Zip Postcode  # noqa: E501

        :param address_zip_postcode: The address_zip_postcode of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if address_zip_postcode is not None and len(address_zip_postcode) > 15:
            raise ValueError("Invalid value for `address_zip_postcode`, length must be less than or equal to `15`")  # noqa: E501

        self._address_zip_postcode = address_zip_postcode

    @property
    def comments(self):
        """Gets the comments of this InvoiceItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this InvoiceItem.

        Comments  # noqa: E501

        :param comments: The comments of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 500:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `500`")  # noqa: E501

        self._comments = comments

    @property
    def machine_name(self):
        """Gets the machine_name of this InvoiceItem.  # noqa: E501

        Machine Name  # noqa: E501

        :return: The machine_name of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this InvoiceItem.

        Machine Name  # noqa: E501

        :param machine_name: The machine_name of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if machine_name is not None and len(machine_name) > 30:
            raise ValueError("Invalid value for `machine_name`, length must be less than or equal to `30`")  # noqa: E501

        self._machine_name = machine_name

    @property
    def external_number(self):
        """Gets the external_number of this InvoiceItem.  # noqa: E501

        External Number  # noqa: E501

        :return: The external_number of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._external_number

    @external_number.setter
    def external_number(self, external_number):
        """Sets the external_number of this InvoiceItem.

        External Number  # noqa: E501

        :param external_number: The external_number of this InvoiceItem.  # noqa: E501
        :type: str
        """
        if external_number is not None and len(external_number) > 30:
            raise ValueError("Invalid value for `external_number`, length must be less than or equal to `30`")  # noqa: E501

        self._external_number = external_number

    @property
    def security_user_id(self):
        """Gets the security_user_id of this InvoiceItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this InvoiceItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this InvoiceItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this InvoiceItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def date_modified(self):
        """Gets the date_modified of this InvoiceItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this InvoiceItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
