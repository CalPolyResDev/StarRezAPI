# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PromoCodeItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'promo_code_id': 'int',
        'description': 'str',
        'code': 'str',
        'type': 'str',
        'active_date_start': 'str',
        'active_date_end': 'str',
        'usage_maximum': 'int',
        'table_name': 'str',
        'security_user_id': 'int',
        'date_modified': 'str'
    }

    attribute_map = {
        'promo_code_id': 'PromoCodeID',
        'description': 'Description',
        'code': 'Code',
        'type': 'Type',
        'active_date_start': 'ActiveDateStart',
        'active_date_end': 'ActiveDateEnd',
        'usage_maximum': 'UsageMaximum',
        'table_name': 'TableName',
        'security_user_id': 'SecurityUserID',
        'date_modified': 'DateModified'
    }

    def __init__(self, promo_code_id=None, description=None, code=None, type=None, active_date_start=None, active_date_end=None, usage_maximum=None, table_name=None, security_user_id=None, date_modified=None):  # noqa: E501
        """PromoCodeItem - a model defined in Swagger"""  # noqa: E501

        self._promo_code_id = None
        self._description = None
        self._code = None
        self._type = None
        self._active_date_start = None
        self._active_date_end = None
        self._usage_maximum = None
        self._table_name = None
        self._security_user_id = None
        self._date_modified = None
        self.discriminator = None

        if promo_code_id is not None:
            self.promo_code_id = promo_code_id
        if description is not None:
            self.description = description
        if code is not None:
            self.code = code
        if type is not None:
            self.type = type
        if active_date_start is not None:
            self.active_date_start = active_date_start
        if active_date_end is not None:
            self.active_date_end = active_date_end
        if usage_maximum is not None:
            self.usage_maximum = usage_maximum
        if table_name is not None:
            self.table_name = table_name
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def promo_code_id(self):
        """Gets the promo_code_id of this PromoCodeItem.  # noqa: E501

        Promo Code  # noqa: E501

        :return: The promo_code_id of this PromoCodeItem.  # noqa: E501
        :rtype: int
        """
        return self._promo_code_id

    @promo_code_id.setter
    def promo_code_id(self, promo_code_id):
        """Sets the promo_code_id of this PromoCodeItem.

        Promo Code  # noqa: E501

        :param promo_code_id: The promo_code_id of this PromoCodeItem.  # noqa: E501
        :type: int
        """

        self._promo_code_id = promo_code_id

    @property
    def description(self):
        """Gets the description of this PromoCodeItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this PromoCodeItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PromoCodeItem.

        Description  # noqa: E501

        :param description: The description of this PromoCodeItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def code(self):
        """Gets the code of this PromoCodeItem.  # noqa: E501

        Code  # noqa: E501

        :return: The code of this PromoCodeItem.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PromoCodeItem.

        Code  # noqa: E501

        :param code: The code of this PromoCodeItem.  # noqa: E501
        :type: str
        """
        if code is not None and len(code) > 20:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `20`")  # noqa: E501

        self._code = code

    @property
    def type(self):
        """Gets the type of this PromoCodeItem.  # noqa: E501

        Type  # noqa: E501

        :return: The type of this PromoCodeItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PromoCodeItem.

        Type  # noqa: E501

        :param type: The type of this PromoCodeItem.  # noqa: E501
        :type: str
        """
        if type is not None and len(type) > 100:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `100`")  # noqa: E501

        self._type = type

    @property
    def active_date_start(self):
        """Gets the active_date_start of this PromoCodeItem.  # noqa: E501

        Active Date Start  # noqa: E501

        :return: The active_date_start of this PromoCodeItem.  # noqa: E501
        :rtype: str
        """
        return self._active_date_start

    @active_date_start.setter
    def active_date_start(self, active_date_start):
        """Sets the active_date_start of this PromoCodeItem.

        Active Date Start  # noqa: E501

        :param active_date_start: The active_date_start of this PromoCodeItem.  # noqa: E501
        :type: str
        """

        self._active_date_start = active_date_start

    @property
    def active_date_end(self):
        """Gets the active_date_end of this PromoCodeItem.  # noqa: E501

        Active Date End  # noqa: E501

        :return: The active_date_end of this PromoCodeItem.  # noqa: E501
        :rtype: str
        """
        return self._active_date_end

    @active_date_end.setter
    def active_date_end(self, active_date_end):
        """Sets the active_date_end of this PromoCodeItem.

        Active Date End  # noqa: E501

        :param active_date_end: The active_date_end of this PromoCodeItem.  # noqa: E501
        :type: str
        """

        self._active_date_end = active_date_end

    @property
    def usage_maximum(self):
        """Gets the usage_maximum of this PromoCodeItem.  # noqa: E501

        Usage Maximum  # noqa: E501

        :return: The usage_maximum of this PromoCodeItem.  # noqa: E501
        :rtype: int
        """
        return self._usage_maximum

    @usage_maximum.setter
    def usage_maximum(self, usage_maximum):
        """Sets the usage_maximum of this PromoCodeItem.

        Usage Maximum  # noqa: E501

        :param usage_maximum: The usage_maximum of this PromoCodeItem.  # noqa: E501
        :type: int
        """

        self._usage_maximum = usage_maximum

    @property
    def table_name(self):
        """Gets the table_name of this PromoCodeItem.  # noqa: E501

        Table Name  # noqa: E501

        :return: The table_name of this PromoCodeItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this PromoCodeItem.

        Table Name  # noqa: E501

        :param table_name: The table_name of this PromoCodeItem.  # noqa: E501
        :type: str
        """
        if table_name is not None and len(table_name) > 100:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `100`")  # noqa: E501

        self._table_name = table_name

    @property
    def security_user_id(self):
        """Gets the security_user_id of this PromoCodeItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this PromoCodeItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this PromoCodeItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this PromoCodeItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def date_modified(self):
        """Gets the date_modified of this PromoCodeItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this PromoCodeItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this PromoCodeItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this PromoCodeItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromoCodeItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
