# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeletedTransactionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deleted_transaction_id': 'int',
        'delete_date': 'datetime',
        'security_user_id': 'int',
        'machine_name': 'str',
        'transaction_id': 'int',
        'entry_id': 'int',
        'charge_group_id': 'int',
        'charge_item_id': 'int',
        'transaction_date': 'str',
        'processed_date': 'str',
        'due_date': 'str',
        'transaction_type_enum': 'str',
        'description': 'str',
        'amount': 'str',
        'tax_amount': 'str',
        'tax_amount2': 'str',
        'tax_amount3': 'str',
        'extension': 'int',
        'duration': 'int',
        'tag': 'str',
        'tag_finance': 'str',
        'payment_id': 'int',
        'invoice_id': 'int',
        'end_of_session_id': 'int',
        'term_session_id': 'int',
        'external_id': 'int',
        'original_security_user_id': 'int',
        'original_created_by_security_user_id': 'int',
        'table_id': 'int',
        'table_name': 'str',
        'call_type_enum': 'str',
        'comments': 'str',
        'delete_comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'deleted_transaction_id': 'DeletedTransactionID',
        'delete_date': 'DeleteDate',
        'security_user_id': 'SecurityUserID',
        'machine_name': 'MachineName',
        'transaction_id': 'TransactionID',
        'entry_id': 'EntryID',
        'charge_group_id': 'ChargeGroupID',
        'charge_item_id': 'ChargeItemID',
        'transaction_date': 'TransactionDate',
        'processed_date': 'ProcessedDate',
        'due_date': 'DueDate',
        'transaction_type_enum': 'TransactionTypeEnum',
        'description': 'Description',
        'amount': 'Amount',
        'tax_amount': 'TaxAmount',
        'tax_amount2': 'TaxAmount2',
        'tax_amount3': 'TaxAmount3',
        'extension': 'Extension',
        'duration': 'Duration',
        'tag': 'Tag',
        'tag_finance': 'TagFinance',
        'payment_id': 'PaymentID',
        'invoice_id': 'InvoiceID',
        'end_of_session_id': 'EndOfSessionID',
        'term_session_id': 'TermSessionID',
        'external_id': 'ExternalID',
        'original_security_user_id': 'Original_SecurityUserID',
        'original_created_by_security_user_id': 'Original_CreatedBy_SecurityUserID',
        'table_id': 'TableID',
        'table_name': 'TableName',
        'call_type_enum': 'CallTypeEnum',
        'comments': 'Comments',
        'delete_comments': 'DeleteComments',
        'date_modified': 'DateModified'
    }

    def __init__(self, deleted_transaction_id=None, delete_date=None, security_user_id=None, machine_name=None, transaction_id=None, entry_id=None, charge_group_id=None, charge_item_id=None, transaction_date=None, processed_date=None, due_date=None, transaction_type_enum=None, description=None, amount=None, tax_amount=None, tax_amount2=None, tax_amount3=None, extension=None, duration=None, tag=None, tag_finance=None, payment_id=None, invoice_id=None, end_of_session_id=None, term_session_id=None, external_id=None, original_security_user_id=None, original_created_by_security_user_id=None, table_id=None, table_name=None, call_type_enum=None, comments=None, delete_comments=None, date_modified=None):  # noqa: E501
        """DeletedTransactionItem - a model defined in Swagger"""  # noqa: E501

        self._deleted_transaction_id = None
        self._delete_date = None
        self._security_user_id = None
        self._machine_name = None
        self._transaction_id = None
        self._entry_id = None
        self._charge_group_id = None
        self._charge_item_id = None
        self._transaction_date = None
        self._processed_date = None
        self._due_date = None
        self._transaction_type_enum = None
        self._description = None
        self._amount = None
        self._tax_amount = None
        self._tax_amount2 = None
        self._tax_amount3 = None
        self._extension = None
        self._duration = None
        self._tag = None
        self._tag_finance = None
        self._payment_id = None
        self._invoice_id = None
        self._end_of_session_id = None
        self._term_session_id = None
        self._external_id = None
        self._original_security_user_id = None
        self._original_created_by_security_user_id = None
        self._table_id = None
        self._table_name = None
        self._call_type_enum = None
        self._comments = None
        self._delete_comments = None
        self._date_modified = None
        self.discriminator = None

        if deleted_transaction_id is not None:
            self.deleted_transaction_id = deleted_transaction_id
        if delete_date is not None:
            self.delete_date = delete_date
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if machine_name is not None:
            self.machine_name = machine_name
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if entry_id is not None:
            self.entry_id = entry_id
        if charge_group_id is not None:
            self.charge_group_id = charge_group_id
        if charge_item_id is not None:
            self.charge_item_id = charge_item_id
        if transaction_date is not None:
            self.transaction_date = transaction_date
        if processed_date is not None:
            self.processed_date = processed_date
        if due_date is not None:
            self.due_date = due_date
        if transaction_type_enum is not None:
            self.transaction_type_enum = transaction_type_enum
        if description is not None:
            self.description = description
        if amount is not None:
            self.amount = amount
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if tax_amount2 is not None:
            self.tax_amount2 = tax_amount2
        if tax_amount3 is not None:
            self.tax_amount3 = tax_amount3
        if extension is not None:
            self.extension = extension
        if duration is not None:
            self.duration = duration
        if tag is not None:
            self.tag = tag
        if tag_finance is not None:
            self.tag_finance = tag_finance
        if payment_id is not None:
            self.payment_id = payment_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if end_of_session_id is not None:
            self.end_of_session_id = end_of_session_id
        if term_session_id is not None:
            self.term_session_id = term_session_id
        if external_id is not None:
            self.external_id = external_id
        if original_security_user_id is not None:
            self.original_security_user_id = original_security_user_id
        if original_created_by_security_user_id is not None:
            self.original_created_by_security_user_id = original_created_by_security_user_id
        if table_id is not None:
            self.table_id = table_id
        if table_name is not None:
            self.table_name = table_name
        if call_type_enum is not None:
            self.call_type_enum = call_type_enum
        if comments is not None:
            self.comments = comments
        if delete_comments is not None:
            self.delete_comments = delete_comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def deleted_transaction_id(self):
        """Gets the deleted_transaction_id of this DeletedTransactionItem.  # noqa: E501

        Deleted Transaction  # noqa: E501

        :return: The deleted_transaction_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._deleted_transaction_id

    @deleted_transaction_id.setter
    def deleted_transaction_id(self, deleted_transaction_id):
        """Sets the deleted_transaction_id of this DeletedTransactionItem.

        Deleted Transaction  # noqa: E501

        :param deleted_transaction_id: The deleted_transaction_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._deleted_transaction_id = deleted_transaction_id

    @property
    def delete_date(self):
        """Gets the delete_date of this DeletedTransactionItem.  # noqa: E501

        Delete Date  # noqa: E501

        :return: The delete_date of this DeletedTransactionItem.  # noqa: E501
        :rtype: datetime
        """
        return self._delete_date

    @delete_date.setter
    def delete_date(self, delete_date):
        """Sets the delete_date of this DeletedTransactionItem.

        Delete Date  # noqa: E501

        :param delete_date: The delete_date of this DeletedTransactionItem.  # noqa: E501
        :type: datetime
        """

        self._delete_date = delete_date

    @property
    def security_user_id(self):
        """Gets the security_user_id of this DeletedTransactionItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this DeletedTransactionItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def machine_name(self):
        """Gets the machine_name of this DeletedTransactionItem.  # noqa: E501

        Machine Name  # noqa: E501

        :return: The machine_name of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this DeletedTransactionItem.

        Machine Name  # noqa: E501

        :param machine_name: The machine_name of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """
        if machine_name is not None and len(machine_name) > 20:
            raise ValueError("Invalid value for `machine_name`, length must be less than or equal to `20`")  # noqa: E501

        self._machine_name = machine_name

    @property
    def transaction_id(self):
        """Gets the transaction_id of this DeletedTransactionItem.  # noqa: E501

        Transaction  # noqa: E501

        :return: The transaction_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this DeletedTransactionItem.

        Transaction  # noqa: E501

        :param transaction_id: The transaction_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._transaction_id = transaction_id

    @property
    def entry_id(self):
        """Gets the entry_id of this DeletedTransactionItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this DeletedTransactionItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def charge_group_id(self):
        """Gets the charge_group_id of this DeletedTransactionItem.  # noqa: E501

        Charge Group  # noqa: E501

        :return: The charge_group_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._charge_group_id

    @charge_group_id.setter
    def charge_group_id(self, charge_group_id):
        """Sets the charge_group_id of this DeletedTransactionItem.

        Charge Group  # noqa: E501

        :param charge_group_id: The charge_group_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._charge_group_id = charge_group_id

    @property
    def charge_item_id(self):
        """Gets the charge_item_id of this DeletedTransactionItem.  # noqa: E501

        Charge Item  # noqa: E501

        :return: The charge_item_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._charge_item_id

    @charge_item_id.setter
    def charge_item_id(self, charge_item_id):
        """Sets the charge_item_id of this DeletedTransactionItem.

        Charge Item  # noqa: E501

        :param charge_item_id: The charge_item_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._charge_item_id = charge_item_id

    @property
    def transaction_date(self):
        """Gets the transaction_date of this DeletedTransactionItem.  # noqa: E501

        Transaction Date  # noqa: E501

        :return: The transaction_date of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this DeletedTransactionItem.

        Transaction Date  # noqa: E501

        :param transaction_date: The transaction_date of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """

        self._transaction_date = transaction_date

    @property
    def processed_date(self):
        """Gets the processed_date of this DeletedTransactionItem.  # noqa: E501

        Processed Date  # noqa: E501

        :return: The processed_date of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._processed_date

    @processed_date.setter
    def processed_date(self, processed_date):
        """Sets the processed_date of this DeletedTransactionItem.

        Processed Date  # noqa: E501

        :param processed_date: The processed_date of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """

        self._processed_date = processed_date

    @property
    def due_date(self):
        """Gets the due_date of this DeletedTransactionItem.  # noqa: E501

        Due Date  # noqa: E501

        :return: The due_date of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this DeletedTransactionItem.

        Due Date  # noqa: E501

        :param due_date: The due_date of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """

        self._due_date = due_date

    @property
    def transaction_type_enum(self):
        """Gets the transaction_type_enum of this DeletedTransactionItem.  # noqa: E501

        Transaction Type  # noqa: E501

        :return: The transaction_type_enum of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type_enum

    @transaction_type_enum.setter
    def transaction_type_enum(self, transaction_type_enum):
        """Sets the transaction_type_enum of this DeletedTransactionItem.

        Transaction Type  # noqa: E501

        :param transaction_type_enum: The transaction_type_enum of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """

        self._transaction_type_enum = transaction_type_enum

    @property
    def description(self):
        """Gets the description of this DeletedTransactionItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeletedTransactionItem.

        Description  # noqa: E501

        :param description: The description of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def amount(self):
        """Gets the amount of this DeletedTransactionItem.  # noqa: E501

        Amount  # noqa: E501

        :return: The amount of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DeletedTransactionItem.

        Amount  # noqa: E501

        :param amount: The amount of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this DeletedTransactionItem.  # noqa: E501

        Tax Amount  # noqa: E501

        :return: The tax_amount of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this DeletedTransactionItem.

        Tax Amount  # noqa: E501

        :param tax_amount: The tax_amount of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """

        self._tax_amount = tax_amount

    @property
    def tax_amount2(self):
        """Gets the tax_amount2 of this DeletedTransactionItem.  # noqa: E501

        Tax Amount 2  # noqa: E501

        :return: The tax_amount2 of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_amount2

    @tax_amount2.setter
    def tax_amount2(self, tax_amount2):
        """Sets the tax_amount2 of this DeletedTransactionItem.

        Tax Amount 2  # noqa: E501

        :param tax_amount2: The tax_amount2 of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """

        self._tax_amount2 = tax_amount2

    @property
    def tax_amount3(self):
        """Gets the tax_amount3 of this DeletedTransactionItem.  # noqa: E501

        Tax Amount 3  # noqa: E501

        :return: The tax_amount3 of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_amount3

    @tax_amount3.setter
    def tax_amount3(self, tax_amount3):
        """Sets the tax_amount3 of this DeletedTransactionItem.

        Tax Amount 3  # noqa: E501

        :param tax_amount3: The tax_amount3 of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """

        self._tax_amount3 = tax_amount3

    @property
    def extension(self):
        """Gets the extension of this DeletedTransactionItem.  # noqa: E501

        Extension  # noqa: E501

        :return: The extension of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this DeletedTransactionItem.

        Extension  # noqa: E501

        :param extension: The extension of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._extension = extension

    @property
    def duration(self):
        """Gets the duration of this DeletedTransactionItem.  # noqa: E501

        Duration  # noqa: E501

        :return: The duration of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this DeletedTransactionItem.

        Duration  # noqa: E501

        :param duration: The duration of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def tag(self):
        """Gets the tag of this DeletedTransactionItem.  # noqa: E501

        Tag  # noqa: E501

        :return: The tag of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this DeletedTransactionItem.

        Tag  # noqa: E501

        :param tag: The tag of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """
        if tag is not None and len(tag) > 10:
            raise ValueError("Invalid value for `tag`, length must be less than or equal to `10`")  # noqa: E501

        self._tag = tag

    @property
    def tag_finance(self):
        """Gets the tag_finance of this DeletedTransactionItem.  # noqa: E501

        Tag Finance  # noqa: E501

        :return: The tag_finance of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._tag_finance

    @tag_finance.setter
    def tag_finance(self, tag_finance):
        """Sets the tag_finance of this DeletedTransactionItem.

        Tag Finance  # noqa: E501

        :param tag_finance: The tag_finance of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """
        if tag_finance is not None and len(tag_finance) > 10:
            raise ValueError("Invalid value for `tag_finance`, length must be less than or equal to `10`")  # noqa: E501

        self._tag_finance = tag_finance

    @property
    def payment_id(self):
        """Gets the payment_id of this DeletedTransactionItem.  # noqa: E501

        Payment  # noqa: E501

        :return: The payment_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this DeletedTransactionItem.

        Payment  # noqa: E501

        :param payment_id: The payment_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._payment_id = payment_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this DeletedTransactionItem.  # noqa: E501

        Invoice  # noqa: E501

        :return: The invoice_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this DeletedTransactionItem.

        Invoice  # noqa: E501

        :param invoice_id: The invoice_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._invoice_id = invoice_id

    @property
    def end_of_session_id(self):
        """Gets the end_of_session_id of this DeletedTransactionItem.  # noqa: E501

        End Of Session  # noqa: E501

        :return: The end_of_session_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._end_of_session_id

    @end_of_session_id.setter
    def end_of_session_id(self, end_of_session_id):
        """Sets the end_of_session_id of this DeletedTransactionItem.

        End Of Session  # noqa: E501

        :param end_of_session_id: The end_of_session_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._end_of_session_id = end_of_session_id

    @property
    def term_session_id(self):
        """Gets the term_session_id of this DeletedTransactionItem.  # noqa: E501

        Term Session  # noqa: E501

        :return: The term_session_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._term_session_id

    @term_session_id.setter
    def term_session_id(self, term_session_id):
        """Sets the term_session_id of this DeletedTransactionItem.

        Term Session  # noqa: E501

        :param term_session_id: The term_session_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._term_session_id = term_session_id

    @property
    def external_id(self):
        """Gets the external_id of this DeletedTransactionItem.  # noqa: E501

        External  # noqa: E501

        :return: The external_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this DeletedTransactionItem.

        External  # noqa: E501

        :param external_id: The external_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._external_id = external_id

    @property
    def original_security_user_id(self):
        """Gets the original_security_user_id of this DeletedTransactionItem.  # noqa: E501

        Original Security User  # noqa: E501

        :return: The original_security_user_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._original_security_user_id

    @original_security_user_id.setter
    def original_security_user_id(self, original_security_user_id):
        """Sets the original_security_user_id of this DeletedTransactionItem.

        Original Security User  # noqa: E501

        :param original_security_user_id: The original_security_user_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._original_security_user_id = original_security_user_id

    @property
    def original_created_by_security_user_id(self):
        """Gets the original_created_by_security_user_id of this DeletedTransactionItem.  # noqa: E501

        Original Created By Security User  # noqa: E501

        :return: The original_created_by_security_user_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._original_created_by_security_user_id

    @original_created_by_security_user_id.setter
    def original_created_by_security_user_id(self, original_created_by_security_user_id):
        """Sets the original_created_by_security_user_id of this DeletedTransactionItem.

        Original Created By Security User  # noqa: E501

        :param original_created_by_security_user_id: The original_created_by_security_user_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._original_created_by_security_user_id = original_created_by_security_user_id

    @property
    def table_id(self):
        """Gets the table_id of this DeletedTransactionItem.  # noqa: E501

        Table  # noqa: E501

        :return: The table_id of this DeletedTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this DeletedTransactionItem.

        Table  # noqa: E501

        :param table_id: The table_id of this DeletedTransactionItem.  # noqa: E501
        :type: int
        """

        self._table_id = table_id

    @property
    def table_name(self):
        """Gets the table_name of this DeletedTransactionItem.  # noqa: E501

        Table Name  # noqa: E501

        :return: The table_name of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this DeletedTransactionItem.

        Table Name  # noqa: E501

        :param table_name: The table_name of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """
        if table_name is not None and len(table_name) > 50:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `50`")  # noqa: E501

        self._table_name = table_name

    @property
    def call_type_enum(self):
        """Gets the call_type_enum of this DeletedTransactionItem.  # noqa: E501

        Call Type  # noqa: E501

        :return: The call_type_enum of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._call_type_enum

    @call_type_enum.setter
    def call_type_enum(self, call_type_enum):
        """Sets the call_type_enum of this DeletedTransactionItem.

        Call Type  # noqa: E501

        :param call_type_enum: The call_type_enum of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """

        self._call_type_enum = call_type_enum

    @property
    def comments(self):
        """Gets the comments of this DeletedTransactionItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this DeletedTransactionItem.

        Comments  # noqa: E501

        :param comments: The comments of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 100:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `100`")  # noqa: E501

        self._comments = comments

    @property
    def delete_comments(self):
        """Gets the delete_comments of this DeletedTransactionItem.  # noqa: E501

        Delete Comments  # noqa: E501

        :return: The delete_comments of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._delete_comments

    @delete_comments.setter
    def delete_comments(self, delete_comments):
        """Sets the delete_comments of this DeletedTransactionItem.

        Delete Comments  # noqa: E501

        :param delete_comments: The delete_comments of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """
        if delete_comments is not None and len(delete_comments) > 200:
            raise ValueError("Invalid value for `delete_comments`, length must be less than or equal to `200`")  # noqa: E501

        self._delete_comments = delete_comments

    @property
    def date_modified(self):
        """Gets the date_modified of this DeletedTransactionItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this DeletedTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this DeletedTransactionItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this DeletedTransactionItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeletedTransactionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
