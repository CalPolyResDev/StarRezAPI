# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TaskTemplateItemItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_template_item_id': 'int',
        'task_template_id': 'int',
        'description': 'str',
        'hours_start_from_first': 'int',
        'expected_duration': 'int',
        'priority_id': 'int',
        'task_status_id': 'int',
        'task_type_id': 'int',
        'reminder': 'bool',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'task_template_item_id': 'TaskTemplateItemID',
        'task_template_id': 'TaskTemplateID',
        'description': 'Description',
        'hours_start_from_first': 'HoursStartFromFirst',
        'expected_duration': 'ExpectedDuration',
        'priority_id': 'PriorityID',
        'task_status_id': 'TaskStatusID',
        'task_type_id': 'TaskTypeID',
        'reminder': 'Reminder',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, task_template_item_id=None, task_template_id=None, description=None, hours_start_from_first=None, expected_duration=None, priority_id=None, task_status_id=None, task_type_id=None, reminder=None, comments=None, date_modified=None):  # noqa: E501
        """TaskTemplateItemItem - a model defined in Swagger"""  # noqa: E501

        self._task_template_item_id = None
        self._task_template_id = None
        self._description = None
        self._hours_start_from_first = None
        self._expected_duration = None
        self._priority_id = None
        self._task_status_id = None
        self._task_type_id = None
        self._reminder = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if task_template_item_id is not None:
            self.task_template_item_id = task_template_item_id
        if task_template_id is not None:
            self.task_template_id = task_template_id
        if description is not None:
            self.description = description
        if hours_start_from_first is not None:
            self.hours_start_from_first = hours_start_from_first
        if expected_duration is not None:
            self.expected_duration = expected_duration
        if priority_id is not None:
            self.priority_id = priority_id
        if task_status_id is not None:
            self.task_status_id = task_status_id
        if task_type_id is not None:
            self.task_type_id = task_type_id
        if reminder is not None:
            self.reminder = reminder
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def task_template_item_id(self):
        """Gets the task_template_item_id of this TaskTemplateItemItem.  # noqa: E501

        Task Template Item  # noqa: E501

        :return: The task_template_item_id of this TaskTemplateItemItem.  # noqa: E501
        :rtype: int
        """
        return self._task_template_item_id

    @task_template_item_id.setter
    def task_template_item_id(self, task_template_item_id):
        """Sets the task_template_item_id of this TaskTemplateItemItem.

        Task Template Item  # noqa: E501

        :param task_template_item_id: The task_template_item_id of this TaskTemplateItemItem.  # noqa: E501
        :type: int
        """

        self._task_template_item_id = task_template_item_id

    @property
    def task_template_id(self):
        """Gets the task_template_id of this TaskTemplateItemItem.  # noqa: E501

        Task Template  # noqa: E501

        :return: The task_template_id of this TaskTemplateItemItem.  # noqa: E501
        :rtype: int
        """
        return self._task_template_id

    @task_template_id.setter
    def task_template_id(self, task_template_id):
        """Sets the task_template_id of this TaskTemplateItemItem.

        Task Template  # noqa: E501

        :param task_template_id: The task_template_id of this TaskTemplateItemItem.  # noqa: E501
        :type: int
        """

        self._task_template_id = task_template_id

    @property
    def description(self):
        """Gets the description of this TaskTemplateItemItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this TaskTemplateItemItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskTemplateItemItem.

        Description  # noqa: E501

        :param description: The description of this TaskTemplateItemItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def hours_start_from_first(self):
        """Gets the hours_start_from_first of this TaskTemplateItemItem.  # noqa: E501

        Hours Start From First  # noqa: E501

        :return: The hours_start_from_first of this TaskTemplateItemItem.  # noqa: E501
        :rtype: int
        """
        return self._hours_start_from_first

    @hours_start_from_first.setter
    def hours_start_from_first(self, hours_start_from_first):
        """Sets the hours_start_from_first of this TaskTemplateItemItem.

        Hours Start From First  # noqa: E501

        :param hours_start_from_first: The hours_start_from_first of this TaskTemplateItemItem.  # noqa: E501
        :type: int
        """

        self._hours_start_from_first = hours_start_from_first

    @property
    def expected_duration(self):
        """Gets the expected_duration of this TaskTemplateItemItem.  # noqa: E501

        Expected Duration  # noqa: E501

        :return: The expected_duration of this TaskTemplateItemItem.  # noqa: E501
        :rtype: int
        """
        return self._expected_duration

    @expected_duration.setter
    def expected_duration(self, expected_duration):
        """Sets the expected_duration of this TaskTemplateItemItem.

        Expected Duration  # noqa: E501

        :param expected_duration: The expected_duration of this TaskTemplateItemItem.  # noqa: E501
        :type: int
        """

        self._expected_duration = expected_duration

    @property
    def priority_id(self):
        """Gets the priority_id of this TaskTemplateItemItem.  # noqa: E501

        Priority  # noqa: E501

        :return: The priority_id of this TaskTemplateItemItem.  # noqa: E501
        :rtype: int
        """
        return self._priority_id

    @priority_id.setter
    def priority_id(self, priority_id):
        """Sets the priority_id of this TaskTemplateItemItem.

        Priority  # noqa: E501

        :param priority_id: The priority_id of this TaskTemplateItemItem.  # noqa: E501
        :type: int
        """

        self._priority_id = priority_id

    @property
    def task_status_id(self):
        """Gets the task_status_id of this TaskTemplateItemItem.  # noqa: E501

        Task Status  # noqa: E501

        :return: The task_status_id of this TaskTemplateItemItem.  # noqa: E501
        :rtype: int
        """
        return self._task_status_id

    @task_status_id.setter
    def task_status_id(self, task_status_id):
        """Sets the task_status_id of this TaskTemplateItemItem.

        Task Status  # noqa: E501

        :param task_status_id: The task_status_id of this TaskTemplateItemItem.  # noqa: E501
        :type: int
        """

        self._task_status_id = task_status_id

    @property
    def task_type_id(self):
        """Gets the task_type_id of this TaskTemplateItemItem.  # noqa: E501

        Task Type  # noqa: E501

        :return: The task_type_id of this TaskTemplateItemItem.  # noqa: E501
        :rtype: int
        """
        return self._task_type_id

    @task_type_id.setter
    def task_type_id(self, task_type_id):
        """Sets the task_type_id of this TaskTemplateItemItem.

        Task Type  # noqa: E501

        :param task_type_id: The task_type_id of this TaskTemplateItemItem.  # noqa: E501
        :type: int
        """

        self._task_type_id = task_type_id

    @property
    def reminder(self):
        """Gets the reminder of this TaskTemplateItemItem.  # noqa: E501

        Reminder  # noqa: E501

        :return: The reminder of this TaskTemplateItemItem.  # noqa: E501
        :rtype: bool
        """
        return self._reminder

    @reminder.setter
    def reminder(self, reminder):
        """Sets the reminder of this TaskTemplateItemItem.

        Reminder  # noqa: E501

        :param reminder: The reminder of this TaskTemplateItemItem.  # noqa: E501
        :type: bool
        """

        self._reminder = reminder

    @property
    def comments(self):
        """Gets the comments of this TaskTemplateItemItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this TaskTemplateItemItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TaskTemplateItemItem.

        Comments  # noqa: E501

        :param comments: The comments of this TaskTemplateItemItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 2000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `2000`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this TaskTemplateItemItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this TaskTemplateItemItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this TaskTemplateItemItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this TaskTemplateItemItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskTemplateItemItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
