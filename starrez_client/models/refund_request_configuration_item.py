# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RefundRequestConfigurationItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'refund_request_configuration_id': 'int',
        'record_type_enum': 'str',
        'description': 'str',
        'category_id': 'int',
        'payment_type_id': 'int',
        'charge_group_id': 'int',
        'amount_min': 'str',
        'amount_max': 'str',
        'workflow_id': 'int',
        'entry_email_template_id': 'int',
        'requester_email_template_id': 'int',
        'approver_email_template_id': 'int',
        'comments': 'str',
        'security_user_id': 'int',
        'created_by_security_user_id': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'refund_request_configuration_id': 'RefundRequestConfigurationID',
        'record_type_enum': 'RecordTypeEnum',
        'description': 'Description',
        'category_id': 'CategoryID',
        'payment_type_id': 'PaymentTypeID',
        'charge_group_id': 'ChargeGroupID',
        'amount_min': 'AmountMin',
        'amount_max': 'AmountMax',
        'workflow_id': 'WorkflowID',
        'entry_email_template_id': 'EntryEmail_TemplateID',
        'requester_email_template_id': 'RequesterEmail_TemplateID',
        'approver_email_template_id': 'ApproverEmail_TemplateID',
        'comments': 'Comments',
        'security_user_id': 'SecurityUserID',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, refund_request_configuration_id=None, record_type_enum=None, description=None, category_id=None, payment_type_id=None, charge_group_id=None, amount_min=None, amount_max=None, workflow_id=None, entry_email_template_id=None, requester_email_template_id=None, approver_email_template_id=None, comments=None, security_user_id=None, created_by_security_user_id=None, date_created=None, date_modified=None):  # noqa: E501
        """RefundRequestConfigurationItem - a model defined in Swagger"""  # noqa: E501

        self._refund_request_configuration_id = None
        self._record_type_enum = None
        self._description = None
        self._category_id = None
        self._payment_type_id = None
        self._charge_group_id = None
        self._amount_min = None
        self._amount_max = None
        self._workflow_id = None
        self._entry_email_template_id = None
        self._requester_email_template_id = None
        self._approver_email_template_id = None
        self._comments = None
        self._security_user_id = None
        self._created_by_security_user_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if refund_request_configuration_id is not None:
            self.refund_request_configuration_id = refund_request_configuration_id
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if description is not None:
            self.description = description
        if category_id is not None:
            self.category_id = category_id
        if payment_type_id is not None:
            self.payment_type_id = payment_type_id
        if charge_group_id is not None:
            self.charge_group_id = charge_group_id
        if amount_min is not None:
            self.amount_min = amount_min
        if amount_max is not None:
            self.amount_max = amount_max
        if workflow_id is not None:
            self.workflow_id = workflow_id
        if entry_email_template_id is not None:
            self.entry_email_template_id = entry_email_template_id
        if requester_email_template_id is not None:
            self.requester_email_template_id = requester_email_template_id
        if approver_email_template_id is not None:
            self.approver_email_template_id = approver_email_template_id
        if comments is not None:
            self.comments = comments
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def refund_request_configuration_id(self):
        """Gets the refund_request_configuration_id of this RefundRequestConfigurationItem.  # noqa: E501

        Refund Request Configuration  # noqa: E501

        :return: The refund_request_configuration_id of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: int
        """
        return self._refund_request_configuration_id

    @refund_request_configuration_id.setter
    def refund_request_configuration_id(self, refund_request_configuration_id):
        """Sets the refund_request_configuration_id of this RefundRequestConfigurationItem.

        Refund Request Configuration  # noqa: E501

        :param refund_request_configuration_id: The refund_request_configuration_id of this RefundRequestConfigurationItem.  # noqa: E501
        :type: int
        """

        self._refund_request_configuration_id = refund_request_configuration_id

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this RefundRequestConfigurationItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this RefundRequestConfigurationItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this RefundRequestConfigurationItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def description(self):
        """Gets the description of this RefundRequestConfigurationItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RefundRequestConfigurationItem.

        Description  # noqa: E501

        :param description: The description of this RefundRequestConfigurationItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501

        self._description = description

    @property
    def category_id(self):
        """Gets the category_id of this RefundRequestConfigurationItem.  # noqa: E501

        Category  # noqa: E501

        :return: The category_id of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this RefundRequestConfigurationItem.

        Category  # noqa: E501

        :param category_id: The category_id of this RefundRequestConfigurationItem.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def payment_type_id(self):
        """Gets the payment_type_id of this RefundRequestConfigurationItem.  # noqa: E501

        Payment Type  # noqa: E501

        :return: The payment_type_id of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: int
        """
        return self._payment_type_id

    @payment_type_id.setter
    def payment_type_id(self, payment_type_id):
        """Sets the payment_type_id of this RefundRequestConfigurationItem.

        Payment Type  # noqa: E501

        :param payment_type_id: The payment_type_id of this RefundRequestConfigurationItem.  # noqa: E501
        :type: int
        """

        self._payment_type_id = payment_type_id

    @property
    def charge_group_id(self):
        """Gets the charge_group_id of this RefundRequestConfigurationItem.  # noqa: E501

        Charge Group  # noqa: E501

        :return: The charge_group_id of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: int
        """
        return self._charge_group_id

    @charge_group_id.setter
    def charge_group_id(self, charge_group_id):
        """Sets the charge_group_id of this RefundRequestConfigurationItem.

        Charge Group  # noqa: E501

        :param charge_group_id: The charge_group_id of this RefundRequestConfigurationItem.  # noqa: E501
        :type: int
        """

        self._charge_group_id = charge_group_id

    @property
    def amount_min(self):
        """Gets the amount_min of this RefundRequestConfigurationItem.  # noqa: E501

        Amount Min  # noqa: E501

        :return: The amount_min of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: str
        """
        return self._amount_min

    @amount_min.setter
    def amount_min(self, amount_min):
        """Sets the amount_min of this RefundRequestConfigurationItem.

        Amount Min  # noqa: E501

        :param amount_min: The amount_min of this RefundRequestConfigurationItem.  # noqa: E501
        :type: str
        """

        self._amount_min = amount_min

    @property
    def amount_max(self):
        """Gets the amount_max of this RefundRequestConfigurationItem.  # noqa: E501

        Amount Max  # noqa: E501

        :return: The amount_max of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: str
        """
        return self._amount_max

    @amount_max.setter
    def amount_max(self, amount_max):
        """Sets the amount_max of this RefundRequestConfigurationItem.

        Amount Max  # noqa: E501

        :param amount_max: The amount_max of this RefundRequestConfigurationItem.  # noqa: E501
        :type: str
        """

        self._amount_max = amount_max

    @property
    def workflow_id(self):
        """Gets the workflow_id of this RefundRequestConfigurationItem.  # noqa: E501

        Workflow  # noqa: E501

        :return: The workflow_id of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: int
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this RefundRequestConfigurationItem.

        Workflow  # noqa: E501

        :param workflow_id: The workflow_id of this RefundRequestConfigurationItem.  # noqa: E501
        :type: int
        """

        self._workflow_id = workflow_id

    @property
    def entry_email_template_id(self):
        """Gets the entry_email_template_id of this RefundRequestConfigurationItem.  # noqa: E501

        Entry Email Template  # noqa: E501

        :return: The entry_email_template_id of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_email_template_id

    @entry_email_template_id.setter
    def entry_email_template_id(self, entry_email_template_id):
        """Sets the entry_email_template_id of this RefundRequestConfigurationItem.

        Entry Email Template  # noqa: E501

        :param entry_email_template_id: The entry_email_template_id of this RefundRequestConfigurationItem.  # noqa: E501
        :type: int
        """

        self._entry_email_template_id = entry_email_template_id

    @property
    def requester_email_template_id(self):
        """Gets the requester_email_template_id of this RefundRequestConfigurationItem.  # noqa: E501

        Requester Email Template  # noqa: E501

        :return: The requester_email_template_id of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: int
        """
        return self._requester_email_template_id

    @requester_email_template_id.setter
    def requester_email_template_id(self, requester_email_template_id):
        """Sets the requester_email_template_id of this RefundRequestConfigurationItem.

        Requester Email Template  # noqa: E501

        :param requester_email_template_id: The requester_email_template_id of this RefundRequestConfigurationItem.  # noqa: E501
        :type: int
        """

        self._requester_email_template_id = requester_email_template_id

    @property
    def approver_email_template_id(self):
        """Gets the approver_email_template_id of this RefundRequestConfigurationItem.  # noqa: E501

        Approver Email Template  # noqa: E501

        :return: The approver_email_template_id of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: int
        """
        return self._approver_email_template_id

    @approver_email_template_id.setter
    def approver_email_template_id(self, approver_email_template_id):
        """Sets the approver_email_template_id of this RefundRequestConfigurationItem.

        Approver Email Template  # noqa: E501

        :param approver_email_template_id: The approver_email_template_id of this RefundRequestConfigurationItem.  # noqa: E501
        :type: int
        """

        self._approver_email_template_id = approver_email_template_id

    @property
    def comments(self):
        """Gets the comments of this RefundRequestConfigurationItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this RefundRequestConfigurationItem.

        Comments  # noqa: E501

        :param comments: The comments of this RefundRequestConfigurationItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 300:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `300`")  # noqa: E501

        self._comments = comments

    @property
    def security_user_id(self):
        """Gets the security_user_id of this RefundRequestConfigurationItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this RefundRequestConfigurationItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this RefundRequestConfigurationItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this RefundRequestConfigurationItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this RefundRequestConfigurationItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this RefundRequestConfigurationItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this RefundRequestConfigurationItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this RefundRequestConfigurationItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this RefundRequestConfigurationItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this RefundRequestConfigurationItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this RefundRequestConfigurationItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this RefundRequestConfigurationItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this RefundRequestConfigurationItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefundRequestConfigurationItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
