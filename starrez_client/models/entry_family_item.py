# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntryFamilyItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_family_id': 'int',
        'entry_id': 'int',
        'entry_family_name': 'str',
        'dob': 'str',
        'relationship': 'str',
        'gender_enum': 'str',
        'related_entry_id': 'int',
        'resident': 'bool',
        'grade': 'str',
        'school': 'str',
        'country': 'str',
        'occupation': 'str',
        'deceased': 'bool',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'entry_family_id': 'EntryFamilyID',
        'entry_id': 'EntryID',
        'entry_family_name': 'EntryFamilyName',
        'dob': 'DOB',
        'relationship': 'Relationship',
        'gender_enum': 'GenderEnum',
        'related_entry_id': 'Related_EntryID',
        'resident': 'Resident',
        'grade': 'Grade',
        'school': 'School',
        'country': 'Country',
        'occupation': 'Occupation',
        'deceased': 'Deceased',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, entry_family_id=None, entry_id=None, entry_family_name=None, dob=None, relationship=None, gender_enum=None, related_entry_id=None, resident=None, grade=None, school=None, country=None, occupation=None, deceased=None, comments=None, date_modified=None):  # noqa: E501
        """EntryFamilyItem - a model defined in Swagger"""  # noqa: E501

        self._entry_family_id = None
        self._entry_id = None
        self._entry_family_name = None
        self._dob = None
        self._relationship = None
        self._gender_enum = None
        self._related_entry_id = None
        self._resident = None
        self._grade = None
        self._school = None
        self._country = None
        self._occupation = None
        self._deceased = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if entry_family_id is not None:
            self.entry_family_id = entry_family_id
        if entry_id is not None:
            self.entry_id = entry_id
        if entry_family_name is not None:
            self.entry_family_name = entry_family_name
        if dob is not None:
            self.dob = dob
        if relationship is not None:
            self.relationship = relationship
        if gender_enum is not None:
            self.gender_enum = gender_enum
        if related_entry_id is not None:
            self.related_entry_id = related_entry_id
        if resident is not None:
            self.resident = resident
        if grade is not None:
            self.grade = grade
        if school is not None:
            self.school = school
        if country is not None:
            self.country = country
        if occupation is not None:
            self.occupation = occupation
        if deceased is not None:
            self.deceased = deceased
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def entry_family_id(self):
        """Gets the entry_family_id of this EntryFamilyItem.  # noqa: E501

        Entry Family  # noqa: E501

        :return: The entry_family_id of this EntryFamilyItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_family_id

    @entry_family_id.setter
    def entry_family_id(self, entry_family_id):
        """Sets the entry_family_id of this EntryFamilyItem.

        Entry Family  # noqa: E501

        :param entry_family_id: The entry_family_id of this EntryFamilyItem.  # noqa: E501
        :type: int
        """

        self._entry_family_id = entry_family_id

    @property
    def entry_id(self):
        """Gets the entry_id of this EntryFamilyItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this EntryFamilyItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this EntryFamilyItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this EntryFamilyItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def entry_family_name(self):
        """Gets the entry_family_name of this EntryFamilyItem.  # noqa: E501

        Entry Family Name  # noqa: E501

        :return: The entry_family_name of this EntryFamilyItem.  # noqa: E501
        :rtype: str
        """
        return self._entry_family_name

    @entry_family_name.setter
    def entry_family_name(self, entry_family_name):
        """Sets the entry_family_name of this EntryFamilyItem.

        Entry Family Name  # noqa: E501

        :param entry_family_name: The entry_family_name of this EntryFamilyItem.  # noqa: E501
        :type: str
        """
        if entry_family_name is not None and len(entry_family_name) > 50:
            raise ValueError("Invalid value for `entry_family_name`, length must be less than or equal to `50`")  # noqa: E501

        self._entry_family_name = entry_family_name

    @property
    def dob(self):
        """Gets the dob of this EntryFamilyItem.  # noqa: E501

        DOB  # noqa: E501

        :return: The dob of this EntryFamilyItem.  # noqa: E501
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this EntryFamilyItem.

        DOB  # noqa: E501

        :param dob: The dob of this EntryFamilyItem.  # noqa: E501
        :type: str
        """

        self._dob = dob

    @property
    def relationship(self):
        """Gets the relationship of this EntryFamilyItem.  # noqa: E501

        Relationship  # noqa: E501

        :return: The relationship of this EntryFamilyItem.  # noqa: E501
        :rtype: str
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this EntryFamilyItem.

        Relationship  # noqa: E501

        :param relationship: The relationship of this EntryFamilyItem.  # noqa: E501
        :type: str
        """
        if relationship is not None and len(relationship) > 50:
            raise ValueError("Invalid value for `relationship`, length must be less than or equal to `50`")  # noqa: E501

        self._relationship = relationship

    @property
    def gender_enum(self):
        """Gets the gender_enum of this EntryFamilyItem.  # noqa: E501

        Gender  # noqa: E501

        :return: The gender_enum of this EntryFamilyItem.  # noqa: E501
        :rtype: str
        """
        return self._gender_enum

    @gender_enum.setter
    def gender_enum(self, gender_enum):
        """Sets the gender_enum of this EntryFamilyItem.

        Gender  # noqa: E501

        :param gender_enum: The gender_enum of this EntryFamilyItem.  # noqa: E501
        :type: str
        """

        self._gender_enum = gender_enum

    @property
    def related_entry_id(self):
        """Gets the related_entry_id of this EntryFamilyItem.  # noqa: E501

        Related Entry  # noqa: E501

        :return: The related_entry_id of this EntryFamilyItem.  # noqa: E501
        :rtype: int
        """
        return self._related_entry_id

    @related_entry_id.setter
    def related_entry_id(self, related_entry_id):
        """Sets the related_entry_id of this EntryFamilyItem.

        Related Entry  # noqa: E501

        :param related_entry_id: The related_entry_id of this EntryFamilyItem.  # noqa: E501
        :type: int
        """

        self._related_entry_id = related_entry_id

    @property
    def resident(self):
        """Gets the resident of this EntryFamilyItem.  # noqa: E501

        Resident  # noqa: E501

        :return: The resident of this EntryFamilyItem.  # noqa: E501
        :rtype: bool
        """
        return self._resident

    @resident.setter
    def resident(self, resident):
        """Sets the resident of this EntryFamilyItem.

        Resident  # noqa: E501

        :param resident: The resident of this EntryFamilyItem.  # noqa: E501
        :type: bool
        """

        self._resident = resident

    @property
    def grade(self):
        """Gets the grade of this EntryFamilyItem.  # noqa: E501

        Grade  # noqa: E501

        :return: The grade of this EntryFamilyItem.  # noqa: E501
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this EntryFamilyItem.

        Grade  # noqa: E501

        :param grade: The grade of this EntryFamilyItem.  # noqa: E501
        :type: str
        """
        if grade is not None and len(grade) > 10:
            raise ValueError("Invalid value for `grade`, length must be less than or equal to `10`")  # noqa: E501

        self._grade = grade

    @property
    def school(self):
        """Gets the school of this EntryFamilyItem.  # noqa: E501

        School  # noqa: E501

        :return: The school of this EntryFamilyItem.  # noqa: E501
        :rtype: str
        """
        return self._school

    @school.setter
    def school(self, school):
        """Sets the school of this EntryFamilyItem.

        School  # noqa: E501

        :param school: The school of this EntryFamilyItem.  # noqa: E501
        :type: str
        """
        if school is not None and len(school) > 60:
            raise ValueError("Invalid value for `school`, length must be less than or equal to `60`")  # noqa: E501

        self._school = school

    @property
    def country(self):
        """Gets the country of this EntryFamilyItem.  # noqa: E501

        Country  # noqa: E501

        :return: The country of this EntryFamilyItem.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EntryFamilyItem.

        Country  # noqa: E501

        :param country: The country of this EntryFamilyItem.  # noqa: E501
        :type: str
        """
        if country is not None and len(country) > 60:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `60`")  # noqa: E501

        self._country = country

    @property
    def occupation(self):
        """Gets the occupation of this EntryFamilyItem.  # noqa: E501

        Occupation  # noqa: E501

        :return: The occupation of this EntryFamilyItem.  # noqa: E501
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this EntryFamilyItem.

        Occupation  # noqa: E501

        :param occupation: The occupation of this EntryFamilyItem.  # noqa: E501
        :type: str
        """
        if occupation is not None and len(occupation) > 50:
            raise ValueError("Invalid value for `occupation`, length must be less than or equal to `50`")  # noqa: E501

        self._occupation = occupation

    @property
    def deceased(self):
        """Gets the deceased of this EntryFamilyItem.  # noqa: E501

        Deceased  # noqa: E501

        :return: The deceased of this EntryFamilyItem.  # noqa: E501
        :rtype: bool
        """
        return self._deceased

    @deceased.setter
    def deceased(self, deceased):
        """Sets the deceased of this EntryFamilyItem.

        Deceased  # noqa: E501

        :param deceased: The deceased of this EntryFamilyItem.  # noqa: E501
        :type: bool
        """

        self._deceased = deceased

    @property
    def comments(self):
        """Gets the comments of this EntryFamilyItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this EntryFamilyItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EntryFamilyItem.

        Comments  # noqa: E501

        :param comments: The comments of this EntryFamilyItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 500:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `500`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this EntryFamilyItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EntryFamilyItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntryFamilyItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EntryFamilyItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryFamilyItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
