# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntryParcelItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_parcel_id': 'int',
        'entry_id': 'int',
        'parcel_type_id': 'int',
        'shipping_type_id': 'int',
        'address_type_id': 'int',
        'parcel_status_enum': 'str',
        'electronic_identity_type_id': 'int',
        'electronic_identity': 'str',
        'description': 'str',
        'tracking_number': 'str',
        'receipt_date': 'str',
        'issue_date': 'str',
        'comments': 'str',
        'custom_bit1': 'bool',
        'custom_bit2': 'bool',
        'custom_string1': 'str',
        'custom_string2': 'str',
        'custom_string3': 'str',
        'custom_string4': 'str',
        'custom_string5': 'str',
        'custom_string6': 'str',
        'custom_date1': 'str',
        'custom_date2': 'str',
        'created_by_security_user_id': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'entry_parcel_id': 'EntryParcelID',
        'entry_id': 'EntryID',
        'parcel_type_id': 'ParcelTypeID',
        'shipping_type_id': 'ShippingTypeID',
        'address_type_id': 'AddressTypeID',
        'parcel_status_enum': 'ParcelStatusEnum',
        'electronic_identity_type_id': 'ElectronicIdentityTypeID',
        'electronic_identity': 'ElectronicIdentity',
        'description': 'Description',
        'tracking_number': 'TrackingNumber',
        'receipt_date': 'ReceiptDate',
        'issue_date': 'IssueDate',
        'comments': 'Comments',
        'custom_bit1': 'CustomBit1',
        'custom_bit2': 'CustomBit2',
        'custom_string1': 'CustomString1',
        'custom_string2': 'CustomString2',
        'custom_string3': 'CustomString3',
        'custom_string4': 'CustomString4',
        'custom_string5': 'CustomString5',
        'custom_string6': 'CustomString6',
        'custom_date1': 'CustomDate1',
        'custom_date2': 'CustomDate2',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, entry_parcel_id=None, entry_id=None, parcel_type_id=None, shipping_type_id=None, address_type_id=None, parcel_status_enum=None, electronic_identity_type_id=None, electronic_identity=None, description=None, tracking_number=None, receipt_date=None, issue_date=None, comments=None, custom_bit1=None, custom_bit2=None, custom_string1=None, custom_string2=None, custom_string3=None, custom_string4=None, custom_string5=None, custom_string6=None, custom_date1=None, custom_date2=None, created_by_security_user_id=None, date_created=None, date_modified=None):  # noqa: E501
        """EntryParcelItem - a model defined in Swagger"""  # noqa: E501

        self._entry_parcel_id = None
        self._entry_id = None
        self._parcel_type_id = None
        self._shipping_type_id = None
        self._address_type_id = None
        self._parcel_status_enum = None
        self._electronic_identity_type_id = None
        self._electronic_identity = None
        self._description = None
        self._tracking_number = None
        self._receipt_date = None
        self._issue_date = None
        self._comments = None
        self._custom_bit1 = None
        self._custom_bit2 = None
        self._custom_string1 = None
        self._custom_string2 = None
        self._custom_string3 = None
        self._custom_string4 = None
        self._custom_string5 = None
        self._custom_string6 = None
        self._custom_date1 = None
        self._custom_date2 = None
        self._created_by_security_user_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if entry_parcel_id is not None:
            self.entry_parcel_id = entry_parcel_id
        if entry_id is not None:
            self.entry_id = entry_id
        if parcel_type_id is not None:
            self.parcel_type_id = parcel_type_id
        if shipping_type_id is not None:
            self.shipping_type_id = shipping_type_id
        if address_type_id is not None:
            self.address_type_id = address_type_id
        if parcel_status_enum is not None:
            self.parcel_status_enum = parcel_status_enum
        if electronic_identity_type_id is not None:
            self.electronic_identity_type_id = electronic_identity_type_id
        if electronic_identity is not None:
            self.electronic_identity = electronic_identity
        if description is not None:
            self.description = description
        if tracking_number is not None:
            self.tracking_number = tracking_number
        if receipt_date is not None:
            self.receipt_date = receipt_date
        if issue_date is not None:
            self.issue_date = issue_date
        if comments is not None:
            self.comments = comments
        if custom_bit1 is not None:
            self.custom_bit1 = custom_bit1
        if custom_bit2 is not None:
            self.custom_bit2 = custom_bit2
        if custom_string1 is not None:
            self.custom_string1 = custom_string1
        if custom_string2 is not None:
            self.custom_string2 = custom_string2
        if custom_string3 is not None:
            self.custom_string3 = custom_string3
        if custom_string4 is not None:
            self.custom_string4 = custom_string4
        if custom_string5 is not None:
            self.custom_string5 = custom_string5
        if custom_string6 is not None:
            self.custom_string6 = custom_string6
        if custom_date1 is not None:
            self.custom_date1 = custom_date1
        if custom_date2 is not None:
            self.custom_date2 = custom_date2
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def entry_parcel_id(self):
        """Gets the entry_parcel_id of this EntryParcelItem.  # noqa: E501

        Entry Parcel  # noqa: E501

        :return: The entry_parcel_id of this EntryParcelItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_parcel_id

    @entry_parcel_id.setter
    def entry_parcel_id(self, entry_parcel_id):
        """Sets the entry_parcel_id of this EntryParcelItem.

        Entry Parcel  # noqa: E501

        :param entry_parcel_id: The entry_parcel_id of this EntryParcelItem.  # noqa: E501
        :type: int
        """

        self._entry_parcel_id = entry_parcel_id

    @property
    def entry_id(self):
        """Gets the entry_id of this EntryParcelItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this EntryParcelItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this EntryParcelItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this EntryParcelItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def parcel_type_id(self):
        """Gets the parcel_type_id of this EntryParcelItem.  # noqa: E501

        Parcel Type  # noqa: E501

        :return: The parcel_type_id of this EntryParcelItem.  # noqa: E501
        :rtype: int
        """
        return self._parcel_type_id

    @parcel_type_id.setter
    def parcel_type_id(self, parcel_type_id):
        """Sets the parcel_type_id of this EntryParcelItem.

        Parcel Type  # noqa: E501

        :param parcel_type_id: The parcel_type_id of this EntryParcelItem.  # noqa: E501
        :type: int
        """

        self._parcel_type_id = parcel_type_id

    @property
    def shipping_type_id(self):
        """Gets the shipping_type_id of this EntryParcelItem.  # noqa: E501

        Shipping Type  # noqa: E501

        :return: The shipping_type_id of this EntryParcelItem.  # noqa: E501
        :rtype: int
        """
        return self._shipping_type_id

    @shipping_type_id.setter
    def shipping_type_id(self, shipping_type_id):
        """Sets the shipping_type_id of this EntryParcelItem.

        Shipping Type  # noqa: E501

        :param shipping_type_id: The shipping_type_id of this EntryParcelItem.  # noqa: E501
        :type: int
        """

        self._shipping_type_id = shipping_type_id

    @property
    def address_type_id(self):
        """Gets the address_type_id of this EntryParcelItem.  # noqa: E501

        Address Type  # noqa: E501

        :return: The address_type_id of this EntryParcelItem.  # noqa: E501
        :rtype: int
        """
        return self._address_type_id

    @address_type_id.setter
    def address_type_id(self, address_type_id):
        """Sets the address_type_id of this EntryParcelItem.

        Address Type  # noqa: E501

        :param address_type_id: The address_type_id of this EntryParcelItem.  # noqa: E501
        :type: int
        """

        self._address_type_id = address_type_id

    @property
    def parcel_status_enum(self):
        """Gets the parcel_status_enum of this EntryParcelItem.  # noqa: E501

        Parcel Status  # noqa: E501

        :return: The parcel_status_enum of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._parcel_status_enum

    @parcel_status_enum.setter
    def parcel_status_enum(self, parcel_status_enum):
        """Sets the parcel_status_enum of this EntryParcelItem.

        Parcel Status  # noqa: E501

        :param parcel_status_enum: The parcel_status_enum of this EntryParcelItem.  # noqa: E501
        :type: str
        """

        self._parcel_status_enum = parcel_status_enum

    @property
    def electronic_identity_type_id(self):
        """Gets the electronic_identity_type_id of this EntryParcelItem.  # noqa: E501

        Electronic Identity Type  # noqa: E501

        :return: The electronic_identity_type_id of this EntryParcelItem.  # noqa: E501
        :rtype: int
        """
        return self._electronic_identity_type_id

    @electronic_identity_type_id.setter
    def electronic_identity_type_id(self, electronic_identity_type_id):
        """Sets the electronic_identity_type_id of this EntryParcelItem.

        Electronic Identity Type  # noqa: E501

        :param electronic_identity_type_id: The electronic_identity_type_id of this EntryParcelItem.  # noqa: E501
        :type: int
        """

        self._electronic_identity_type_id = electronic_identity_type_id

    @property
    def electronic_identity(self):
        """Gets the electronic_identity of this EntryParcelItem.  # noqa: E501

        Electronic Identity  # noqa: E501

        :return: The electronic_identity of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._electronic_identity

    @electronic_identity.setter
    def electronic_identity(self, electronic_identity):
        """Sets the electronic_identity of this EntryParcelItem.

        Electronic Identity  # noqa: E501

        :param electronic_identity: The electronic_identity of this EntryParcelItem.  # noqa: E501
        :type: str
        """
        if electronic_identity is not None and len(electronic_identity) > 500:
            raise ValueError("Invalid value for `electronic_identity`, length must be less than or equal to `500`")  # noqa: E501

        self._electronic_identity = electronic_identity

    @property
    def description(self):
        """Gets the description of this EntryParcelItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EntryParcelItem.

        Description  # noqa: E501

        :param description: The description of this EntryParcelItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def tracking_number(self):
        """Gets the tracking_number of this EntryParcelItem.  # noqa: E501

        Tracking Number  # noqa: E501

        :return: The tracking_number of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this EntryParcelItem.

        Tracking Number  # noqa: E501

        :param tracking_number: The tracking_number of this EntryParcelItem.  # noqa: E501
        :type: str
        """
        if tracking_number is not None and len(tracking_number) > 100:
            raise ValueError("Invalid value for `tracking_number`, length must be less than or equal to `100`")  # noqa: E501

        self._tracking_number = tracking_number

    @property
    def receipt_date(self):
        """Gets the receipt_date of this EntryParcelItem.  # noqa: E501

        Receipt Date  # noqa: E501

        :return: The receipt_date of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._receipt_date

    @receipt_date.setter
    def receipt_date(self, receipt_date):
        """Sets the receipt_date of this EntryParcelItem.

        Receipt Date  # noqa: E501

        :param receipt_date: The receipt_date of this EntryParcelItem.  # noqa: E501
        :type: str
        """

        self._receipt_date = receipt_date

    @property
    def issue_date(self):
        """Gets the issue_date of this EntryParcelItem.  # noqa: E501

        Issue Date  # noqa: E501

        :return: The issue_date of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this EntryParcelItem.

        Issue Date  # noqa: E501

        :param issue_date: The issue_date of this EntryParcelItem.  # noqa: E501
        :type: str
        """

        self._issue_date = issue_date

    @property
    def comments(self):
        """Gets the comments of this EntryParcelItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EntryParcelItem.

        Comments  # noqa: E501

        :param comments: The comments of this EntryParcelItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 1000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `1000`")  # noqa: E501

        self._comments = comments

    @property
    def custom_bit1(self):
        """Gets the custom_bit1 of this EntryParcelItem.  # noqa: E501

        Custom Flag 1  # noqa: E501

        :return: The custom_bit1 of this EntryParcelItem.  # noqa: E501
        :rtype: bool
        """
        return self._custom_bit1

    @custom_bit1.setter
    def custom_bit1(self, custom_bit1):
        """Sets the custom_bit1 of this EntryParcelItem.

        Custom Flag 1  # noqa: E501

        :param custom_bit1: The custom_bit1 of this EntryParcelItem.  # noqa: E501
        :type: bool
        """

        self._custom_bit1 = custom_bit1

    @property
    def custom_bit2(self):
        """Gets the custom_bit2 of this EntryParcelItem.  # noqa: E501

        Custom Flag 2  # noqa: E501

        :return: The custom_bit2 of this EntryParcelItem.  # noqa: E501
        :rtype: bool
        """
        return self._custom_bit2

    @custom_bit2.setter
    def custom_bit2(self, custom_bit2):
        """Sets the custom_bit2 of this EntryParcelItem.

        Custom Flag 2  # noqa: E501

        :param custom_bit2: The custom_bit2 of this EntryParcelItem.  # noqa: E501
        :type: bool
        """

        self._custom_bit2 = custom_bit2

    @property
    def custom_string1(self):
        """Gets the custom_string1 of this EntryParcelItem.  # noqa: E501

        Custom String 1  # noqa: E501

        :return: The custom_string1 of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string1

    @custom_string1.setter
    def custom_string1(self, custom_string1):
        """Sets the custom_string1 of this EntryParcelItem.

        Custom String 1  # noqa: E501

        :param custom_string1: The custom_string1 of this EntryParcelItem.  # noqa: E501
        :type: str
        """
        if custom_string1 is not None and len(custom_string1) > 50:
            raise ValueError("Invalid value for `custom_string1`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string1 = custom_string1

    @property
    def custom_string2(self):
        """Gets the custom_string2 of this EntryParcelItem.  # noqa: E501

        Custom String 2  # noqa: E501

        :return: The custom_string2 of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string2

    @custom_string2.setter
    def custom_string2(self, custom_string2):
        """Sets the custom_string2 of this EntryParcelItem.

        Custom String 2  # noqa: E501

        :param custom_string2: The custom_string2 of this EntryParcelItem.  # noqa: E501
        :type: str
        """
        if custom_string2 is not None and len(custom_string2) > 50:
            raise ValueError("Invalid value for `custom_string2`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string2 = custom_string2

    @property
    def custom_string3(self):
        """Gets the custom_string3 of this EntryParcelItem.  # noqa: E501

        Custom String 3  # noqa: E501

        :return: The custom_string3 of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string3

    @custom_string3.setter
    def custom_string3(self, custom_string3):
        """Sets the custom_string3 of this EntryParcelItem.

        Custom String 3  # noqa: E501

        :param custom_string3: The custom_string3 of this EntryParcelItem.  # noqa: E501
        :type: str
        """
        if custom_string3 is not None and len(custom_string3) > 50:
            raise ValueError("Invalid value for `custom_string3`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string3 = custom_string3

    @property
    def custom_string4(self):
        """Gets the custom_string4 of this EntryParcelItem.  # noqa: E501

        Custom String 4  # noqa: E501

        :return: The custom_string4 of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string4

    @custom_string4.setter
    def custom_string4(self, custom_string4):
        """Sets the custom_string4 of this EntryParcelItem.

        Custom String 4  # noqa: E501

        :param custom_string4: The custom_string4 of this EntryParcelItem.  # noqa: E501
        :type: str
        """
        if custom_string4 is not None and len(custom_string4) > 50:
            raise ValueError("Invalid value for `custom_string4`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string4 = custom_string4

    @property
    def custom_string5(self):
        """Gets the custom_string5 of this EntryParcelItem.  # noqa: E501

        Custom String 5  # noqa: E501

        :return: The custom_string5 of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string5

    @custom_string5.setter
    def custom_string5(self, custom_string5):
        """Sets the custom_string5 of this EntryParcelItem.

        Custom String 5  # noqa: E501

        :param custom_string5: The custom_string5 of this EntryParcelItem.  # noqa: E501
        :type: str
        """
        if custom_string5 is not None and len(custom_string5) > 50:
            raise ValueError("Invalid value for `custom_string5`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string5 = custom_string5

    @property
    def custom_string6(self):
        """Gets the custom_string6 of this EntryParcelItem.  # noqa: E501

        Custom String 6  # noqa: E501

        :return: The custom_string6 of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_string6

    @custom_string6.setter
    def custom_string6(self, custom_string6):
        """Sets the custom_string6 of this EntryParcelItem.

        Custom String 6  # noqa: E501

        :param custom_string6: The custom_string6 of this EntryParcelItem.  # noqa: E501
        :type: str
        """
        if custom_string6 is not None and len(custom_string6) > 50:
            raise ValueError("Invalid value for `custom_string6`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_string6 = custom_string6

    @property
    def custom_date1(self):
        """Gets the custom_date1 of this EntryParcelItem.  # noqa: E501

        Custom Date 1  # noqa: E501

        :return: The custom_date1 of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_date1

    @custom_date1.setter
    def custom_date1(self, custom_date1):
        """Sets the custom_date1 of this EntryParcelItem.

        Custom Date 1  # noqa: E501

        :param custom_date1: The custom_date1 of this EntryParcelItem.  # noqa: E501
        :type: str
        """

        self._custom_date1 = custom_date1

    @property
    def custom_date2(self):
        """Gets the custom_date2 of this EntryParcelItem.  # noqa: E501

        Custom Date 2  # noqa: E501

        :return: The custom_date2 of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_date2

    @custom_date2.setter
    def custom_date2(self, custom_date2):
        """Sets the custom_date2 of this EntryParcelItem.

        Custom Date 2  # noqa: E501

        :param custom_date2: The custom_date2 of this EntryParcelItem.  # noqa: E501
        :type: str
        """

        self._custom_date2 = custom_date2

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this EntryParcelItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this EntryParcelItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this EntryParcelItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this EntryParcelItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this EntryParcelItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this EntryParcelItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this EntryParcelItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this EntryParcelItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this EntryParcelItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EntryParcelItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntryParcelItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EntryParcelItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryParcelItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
