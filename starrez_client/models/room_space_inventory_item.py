# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RoomSpaceInventoryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'room_space_inventory_id': 'int',
        'record_type_enum': 'str',
        'room_space_inventory_type_id': 'int',
        'room_space_id': 'int',
        'room_space_inventory_condition_id': 'int',
        'room_space_inventory_status_id': 'int',
        'code': 'str',
        'description': 'str',
        'colour': 'str',
        'expiry_date': 'datetime',
        'warranty_date': 'str',
        'purchase_date': 'datetime',
        'purchase_price': 'str',
        'purchase_place': 'str',
        'purchase_details': 'str',
        'brand_details': 'str',
        'location': 'str',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'room_space_inventory_id': 'RoomSpaceInventoryID',
        'record_type_enum': 'RecordTypeEnum',
        'room_space_inventory_type_id': 'RoomSpaceInventoryTypeID',
        'room_space_id': 'RoomSpaceID',
        'room_space_inventory_condition_id': 'RoomSpaceInventoryConditionID',
        'room_space_inventory_status_id': 'RoomSpaceInventoryStatusID',
        'code': 'Code',
        'description': 'Description',
        'colour': 'Colour',
        'expiry_date': 'ExpiryDate',
        'warranty_date': 'WarrantyDate',
        'purchase_date': 'PurchaseDate',
        'purchase_price': 'PurchasePrice',
        'purchase_place': 'PurchasePlace',
        'purchase_details': 'PurchaseDetails',
        'brand_details': 'BrandDetails',
        'location': 'Location',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, room_space_inventory_id=None, record_type_enum=None, room_space_inventory_type_id=None, room_space_id=None, room_space_inventory_condition_id=None, room_space_inventory_status_id=None, code=None, description=None, colour=None, expiry_date=None, warranty_date=None, purchase_date=None, purchase_price=None, purchase_place=None, purchase_details=None, brand_details=None, location=None, comments=None, date_modified=None):  # noqa: E501
        """RoomSpaceInventoryItem - a model defined in Swagger"""  # noqa: E501

        self._room_space_inventory_id = None
        self._record_type_enum = None
        self._room_space_inventory_type_id = None
        self._room_space_id = None
        self._room_space_inventory_condition_id = None
        self._room_space_inventory_status_id = None
        self._code = None
        self._description = None
        self._colour = None
        self._expiry_date = None
        self._warranty_date = None
        self._purchase_date = None
        self._purchase_price = None
        self._purchase_place = None
        self._purchase_details = None
        self._brand_details = None
        self._location = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if room_space_inventory_id is not None:
            self.room_space_inventory_id = room_space_inventory_id
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if room_space_inventory_type_id is not None:
            self.room_space_inventory_type_id = room_space_inventory_type_id
        if room_space_id is not None:
            self.room_space_id = room_space_id
        if room_space_inventory_condition_id is not None:
            self.room_space_inventory_condition_id = room_space_inventory_condition_id
        if room_space_inventory_status_id is not None:
            self.room_space_inventory_status_id = room_space_inventory_status_id
        if code is not None:
            self.code = code
        if description is not None:
            self.description = description
        if colour is not None:
            self.colour = colour
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if warranty_date is not None:
            self.warranty_date = warranty_date
        if purchase_date is not None:
            self.purchase_date = purchase_date
        if purchase_price is not None:
            self.purchase_price = purchase_price
        if purchase_place is not None:
            self.purchase_place = purchase_place
        if purchase_details is not None:
            self.purchase_details = purchase_details
        if brand_details is not None:
            self.brand_details = brand_details
        if location is not None:
            self.location = location
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def room_space_inventory_id(self):
        """Gets the room_space_inventory_id of this RoomSpaceInventoryItem.  # noqa: E501

        Room Space Inventory  # noqa: E501

        :return: The room_space_inventory_id of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._room_space_inventory_id

    @room_space_inventory_id.setter
    def room_space_inventory_id(self, room_space_inventory_id):
        """Sets the room_space_inventory_id of this RoomSpaceInventoryItem.

        Room Space Inventory  # noqa: E501

        :param room_space_inventory_id: The room_space_inventory_id of this RoomSpaceInventoryItem.  # noqa: E501
        :type: int
        """

        self._room_space_inventory_id = room_space_inventory_id

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this RoomSpaceInventoryItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this RoomSpaceInventoryItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this RoomSpaceInventoryItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def room_space_inventory_type_id(self):
        """Gets the room_space_inventory_type_id of this RoomSpaceInventoryItem.  # noqa: E501

        Room Space Inventory Type  # noqa: E501

        :return: The room_space_inventory_type_id of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._room_space_inventory_type_id

    @room_space_inventory_type_id.setter
    def room_space_inventory_type_id(self, room_space_inventory_type_id):
        """Sets the room_space_inventory_type_id of this RoomSpaceInventoryItem.

        Room Space Inventory Type  # noqa: E501

        :param room_space_inventory_type_id: The room_space_inventory_type_id of this RoomSpaceInventoryItem.  # noqa: E501
        :type: int
        """

        self._room_space_inventory_type_id = room_space_inventory_type_id

    @property
    def room_space_id(self):
        """Gets the room_space_id of this RoomSpaceInventoryItem.  # noqa: E501

        Room Space  # noqa: E501

        :return: The room_space_id of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._room_space_id

    @room_space_id.setter
    def room_space_id(self, room_space_id):
        """Sets the room_space_id of this RoomSpaceInventoryItem.

        Room Space  # noqa: E501

        :param room_space_id: The room_space_id of this RoomSpaceInventoryItem.  # noqa: E501
        :type: int
        """

        self._room_space_id = room_space_id

    @property
    def room_space_inventory_condition_id(self):
        """Gets the room_space_inventory_condition_id of this RoomSpaceInventoryItem.  # noqa: E501

        Room Space Inventory Condition  # noqa: E501

        :return: The room_space_inventory_condition_id of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._room_space_inventory_condition_id

    @room_space_inventory_condition_id.setter
    def room_space_inventory_condition_id(self, room_space_inventory_condition_id):
        """Sets the room_space_inventory_condition_id of this RoomSpaceInventoryItem.

        Room Space Inventory Condition  # noqa: E501

        :param room_space_inventory_condition_id: The room_space_inventory_condition_id of this RoomSpaceInventoryItem.  # noqa: E501
        :type: int
        """

        self._room_space_inventory_condition_id = room_space_inventory_condition_id

    @property
    def room_space_inventory_status_id(self):
        """Gets the room_space_inventory_status_id of this RoomSpaceInventoryItem.  # noqa: E501

        Room Space Inventory Status  # noqa: E501

        :return: The room_space_inventory_status_id of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._room_space_inventory_status_id

    @room_space_inventory_status_id.setter
    def room_space_inventory_status_id(self, room_space_inventory_status_id):
        """Sets the room_space_inventory_status_id of this RoomSpaceInventoryItem.

        Room Space Inventory Status  # noqa: E501

        :param room_space_inventory_status_id: The room_space_inventory_status_id of this RoomSpaceInventoryItem.  # noqa: E501
        :type: int
        """

        self._room_space_inventory_status_id = room_space_inventory_status_id

    @property
    def code(self):
        """Gets the code of this RoomSpaceInventoryItem.  # noqa: E501

        Code  # noqa: E501

        :return: The code of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RoomSpaceInventoryItem.

        Code  # noqa: E501

        :param code: The code of this RoomSpaceInventoryItem.  # noqa: E501
        :type: str
        """
        if code is not None and len(code) > 50:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `50`")  # noqa: E501

        self._code = code

    @property
    def description(self):
        """Gets the description of this RoomSpaceInventoryItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoomSpaceInventoryItem.

        Description  # noqa: E501

        :param description: The description of this RoomSpaceInventoryItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")  # noqa: E501

        self._description = description

    @property
    def colour(self):
        """Gets the colour of this RoomSpaceInventoryItem.  # noqa: E501

        Colour  # noqa: E501

        :return: The colour of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._colour

    @colour.setter
    def colour(self, colour):
        """Sets the colour of this RoomSpaceInventoryItem.

        Colour  # noqa: E501

        :param colour: The colour of this RoomSpaceInventoryItem.  # noqa: E501
        :type: str
        """
        if colour is not None and len(colour) > 20:
            raise ValueError("Invalid value for `colour`, length must be less than or equal to `20`")  # noqa: E501

        self._colour = colour

    @property
    def expiry_date(self):
        """Gets the expiry_date of this RoomSpaceInventoryItem.  # noqa: E501

        Expiry Date  # noqa: E501

        :return: The expiry_date of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this RoomSpaceInventoryItem.

        Expiry Date  # noqa: E501

        :param expiry_date: The expiry_date of this RoomSpaceInventoryItem.  # noqa: E501
        :type: datetime
        """

        self._expiry_date = expiry_date

    @property
    def warranty_date(self):
        """Gets the warranty_date of this RoomSpaceInventoryItem.  # noqa: E501

        Warranty Date  # noqa: E501

        :return: The warranty_date of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._warranty_date

    @warranty_date.setter
    def warranty_date(self, warranty_date):
        """Sets the warranty_date of this RoomSpaceInventoryItem.

        Warranty Date  # noqa: E501

        :param warranty_date: The warranty_date of this RoomSpaceInventoryItem.  # noqa: E501
        :type: str
        """

        self._warranty_date = warranty_date

    @property
    def purchase_date(self):
        """Gets the purchase_date of this RoomSpaceInventoryItem.  # noqa: E501

        Purchase Date  # noqa: E501

        :return: The purchase_date of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._purchase_date

    @purchase_date.setter
    def purchase_date(self, purchase_date):
        """Sets the purchase_date of this RoomSpaceInventoryItem.

        Purchase Date  # noqa: E501

        :param purchase_date: The purchase_date of this RoomSpaceInventoryItem.  # noqa: E501
        :type: datetime
        """

        self._purchase_date = purchase_date

    @property
    def purchase_price(self):
        """Gets the purchase_price of this RoomSpaceInventoryItem.  # noqa: E501

        Purchase Price  # noqa: E501

        :return: The purchase_price of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._purchase_price

    @purchase_price.setter
    def purchase_price(self, purchase_price):
        """Sets the purchase_price of this RoomSpaceInventoryItem.

        Purchase Price  # noqa: E501

        :param purchase_price: The purchase_price of this RoomSpaceInventoryItem.  # noqa: E501
        :type: str
        """

        self._purchase_price = purchase_price

    @property
    def purchase_place(self):
        """Gets the purchase_place of this RoomSpaceInventoryItem.  # noqa: E501

        Purchase Place  # noqa: E501

        :return: The purchase_place of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._purchase_place

    @purchase_place.setter
    def purchase_place(self, purchase_place):
        """Sets the purchase_place of this RoomSpaceInventoryItem.

        Purchase Place  # noqa: E501

        :param purchase_place: The purchase_place of this RoomSpaceInventoryItem.  # noqa: E501
        :type: str
        """
        if purchase_place is not None and len(purchase_place) > 50:
            raise ValueError("Invalid value for `purchase_place`, length must be less than or equal to `50`")  # noqa: E501

        self._purchase_place = purchase_place

    @property
    def purchase_details(self):
        """Gets the purchase_details of this RoomSpaceInventoryItem.  # noqa: E501

        Purchase Details  # noqa: E501

        :return: The purchase_details of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._purchase_details

    @purchase_details.setter
    def purchase_details(self, purchase_details):
        """Sets the purchase_details of this RoomSpaceInventoryItem.

        Purchase Details  # noqa: E501

        :param purchase_details: The purchase_details of this RoomSpaceInventoryItem.  # noqa: E501
        :type: str
        """
        if purchase_details is not None and len(purchase_details) > 250:
            raise ValueError("Invalid value for `purchase_details`, length must be less than or equal to `250`")  # noqa: E501

        self._purchase_details = purchase_details

    @property
    def brand_details(self):
        """Gets the brand_details of this RoomSpaceInventoryItem.  # noqa: E501

        Brand Details  # noqa: E501

        :return: The brand_details of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._brand_details

    @brand_details.setter
    def brand_details(self, brand_details):
        """Sets the brand_details of this RoomSpaceInventoryItem.

        Brand Details  # noqa: E501

        :param brand_details: The brand_details of this RoomSpaceInventoryItem.  # noqa: E501
        :type: str
        """
        if brand_details is not None and len(brand_details) > 250:
            raise ValueError("Invalid value for `brand_details`, length must be less than or equal to `250`")  # noqa: E501

        self._brand_details = brand_details

    @property
    def location(self):
        """Gets the location of this RoomSpaceInventoryItem.  # noqa: E501

        Location  # noqa: E501

        :return: The location of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this RoomSpaceInventoryItem.

        Location  # noqa: E501

        :param location: The location of this RoomSpaceInventoryItem.  # noqa: E501
        :type: str
        """
        if location is not None and len(location) > 50:
            raise ValueError("Invalid value for `location`, length must be less than or equal to `50`")  # noqa: E501

        self._location = location

    @property
    def comments(self):
        """Gets the comments of this RoomSpaceInventoryItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this RoomSpaceInventoryItem.

        Comments  # noqa: E501

        :param comments: The comments of this RoomSpaceInventoryItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 500:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `500`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this RoomSpaceInventoryItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this RoomSpaceInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this RoomSpaceInventoryItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this RoomSpaceInventoryItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomSpaceInventoryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
