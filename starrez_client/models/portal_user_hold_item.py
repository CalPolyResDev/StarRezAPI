# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortalUserHoldItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portal_user_hold_id': 'int',
        'portal_user_token_id': 'int',
        'hold_date_time_expire': 'str',
        'table_name': 'str',
        'table_id': 'int',
        'quantity': 'int',
        'applicable_date_start': 'str',
        'applicable_date_end': 'str',
        'data': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'portal_user_hold_id': 'PortalUserHoldID',
        'portal_user_token_id': 'PortalUserTokenID',
        'hold_date_time_expire': 'HoldDateTime_Expire',
        'table_name': 'TableName',
        'table_id': 'TableID',
        'quantity': 'Quantity',
        'applicable_date_start': 'ApplicableDateStart',
        'applicable_date_end': 'ApplicableDateEnd',
        'data': 'Data',
        'date_modified': 'DateModified'
    }

    def __init__(self, portal_user_hold_id=None, portal_user_token_id=None, hold_date_time_expire=None, table_name=None, table_id=None, quantity=None, applicable_date_start=None, applicable_date_end=None, data=None, date_modified=None):  # noqa: E501
        """PortalUserHoldItem - a model defined in Swagger"""  # noqa: E501

        self._portal_user_hold_id = None
        self._portal_user_token_id = None
        self._hold_date_time_expire = None
        self._table_name = None
        self._table_id = None
        self._quantity = None
        self._applicable_date_start = None
        self._applicable_date_end = None
        self._data = None
        self._date_modified = None
        self.discriminator = None

        if portal_user_hold_id is not None:
            self.portal_user_hold_id = portal_user_hold_id
        if portal_user_token_id is not None:
            self.portal_user_token_id = portal_user_token_id
        if hold_date_time_expire is not None:
            self.hold_date_time_expire = hold_date_time_expire
        if table_name is not None:
            self.table_name = table_name
        if table_id is not None:
            self.table_id = table_id
        if quantity is not None:
            self.quantity = quantity
        if applicable_date_start is not None:
            self.applicable_date_start = applicable_date_start
        if applicable_date_end is not None:
            self.applicable_date_end = applicable_date_end
        if data is not None:
            self.data = data
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def portal_user_hold_id(self):
        """Gets the portal_user_hold_id of this PortalUserHoldItem.  # noqa: E501

        Portal User Hold  # noqa: E501

        :return: The portal_user_hold_id of this PortalUserHoldItem.  # noqa: E501
        :rtype: int
        """
        return self._portal_user_hold_id

    @portal_user_hold_id.setter
    def portal_user_hold_id(self, portal_user_hold_id):
        """Sets the portal_user_hold_id of this PortalUserHoldItem.

        Portal User Hold  # noqa: E501

        :param portal_user_hold_id: The portal_user_hold_id of this PortalUserHoldItem.  # noqa: E501
        :type: int
        """

        self._portal_user_hold_id = portal_user_hold_id

    @property
    def portal_user_token_id(self):
        """Gets the portal_user_token_id of this PortalUserHoldItem.  # noqa: E501

        Portal User Token  # noqa: E501

        :return: The portal_user_token_id of this PortalUserHoldItem.  # noqa: E501
        :rtype: int
        """
        return self._portal_user_token_id

    @portal_user_token_id.setter
    def portal_user_token_id(self, portal_user_token_id):
        """Sets the portal_user_token_id of this PortalUserHoldItem.

        Portal User Token  # noqa: E501

        :param portal_user_token_id: The portal_user_token_id of this PortalUserHoldItem.  # noqa: E501
        :type: int
        """

        self._portal_user_token_id = portal_user_token_id

    @property
    def hold_date_time_expire(self):
        """Gets the hold_date_time_expire of this PortalUserHoldItem.  # noqa: E501

        Hold Date Time Expire  # noqa: E501

        :return: The hold_date_time_expire of this PortalUserHoldItem.  # noqa: E501
        :rtype: str
        """
        return self._hold_date_time_expire

    @hold_date_time_expire.setter
    def hold_date_time_expire(self, hold_date_time_expire):
        """Sets the hold_date_time_expire of this PortalUserHoldItem.

        Hold Date Time Expire  # noqa: E501

        :param hold_date_time_expire: The hold_date_time_expire of this PortalUserHoldItem.  # noqa: E501
        :type: str
        """

        self._hold_date_time_expire = hold_date_time_expire

    @property
    def table_name(self):
        """Gets the table_name of this PortalUserHoldItem.  # noqa: E501

        Table Name  # noqa: E501

        :return: The table_name of this PortalUserHoldItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this PortalUserHoldItem.

        Table Name  # noqa: E501

        :param table_name: The table_name of this PortalUserHoldItem.  # noqa: E501
        :type: str
        """
        if table_name is not None and len(table_name) > 50:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `50`")  # noqa: E501

        self._table_name = table_name

    @property
    def table_id(self):
        """Gets the table_id of this PortalUserHoldItem.  # noqa: E501

        Table  # noqa: E501

        :return: The table_id of this PortalUserHoldItem.  # noqa: E501
        :rtype: int
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this PortalUserHoldItem.

        Table  # noqa: E501

        :param table_id: The table_id of this PortalUserHoldItem.  # noqa: E501
        :type: int
        """

        self._table_id = table_id

    @property
    def quantity(self):
        """Gets the quantity of this PortalUserHoldItem.  # noqa: E501

        Quantity  # noqa: E501

        :return: The quantity of this PortalUserHoldItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PortalUserHoldItem.

        Quantity  # noqa: E501

        :param quantity: The quantity of this PortalUserHoldItem.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def applicable_date_start(self):
        """Gets the applicable_date_start of this PortalUserHoldItem.  # noqa: E501

        Applicable Date Start  # noqa: E501

        :return: The applicable_date_start of this PortalUserHoldItem.  # noqa: E501
        :rtype: str
        """
        return self._applicable_date_start

    @applicable_date_start.setter
    def applicable_date_start(self, applicable_date_start):
        """Sets the applicable_date_start of this PortalUserHoldItem.

        Applicable Date Start  # noqa: E501

        :param applicable_date_start: The applicable_date_start of this PortalUserHoldItem.  # noqa: E501
        :type: str
        """

        self._applicable_date_start = applicable_date_start

    @property
    def applicable_date_end(self):
        """Gets the applicable_date_end of this PortalUserHoldItem.  # noqa: E501

        Applicable Date End  # noqa: E501

        :return: The applicable_date_end of this PortalUserHoldItem.  # noqa: E501
        :rtype: str
        """
        return self._applicable_date_end

    @applicable_date_end.setter
    def applicable_date_end(self, applicable_date_end):
        """Sets the applicable_date_end of this PortalUserHoldItem.

        Applicable Date End  # noqa: E501

        :param applicable_date_end: The applicable_date_end of this PortalUserHoldItem.  # noqa: E501
        :type: str
        """

        self._applicable_date_end = applicable_date_end

    @property
    def data(self):
        """Gets the data of this PortalUserHoldItem.  # noqa: E501

        Data  # noqa: E501

        :return: The data of this PortalUserHoldItem.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PortalUserHoldItem.

        Data  # noqa: E501

        :param data: The data of this PortalUserHoldItem.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def date_modified(self):
        """Gets the date_modified of this PortalUserHoldItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this PortalUserHoldItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this PortalUserHoldItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this PortalUserHoldItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortalUserHoldItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
