# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RoomSpaceItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'room_space_id': 'int',
        'room_base_id': 'int',
        'room_space_type_enum': 'str',
        'record_type_enum': 'str',
        'room_id': 'int',
        'description': 'str',
        'web_description': 'str',
        'extension_id': 'int',
        'sort_order': 'int',
        'room_rate_id': 'int',
        'allocate_sort_order': 'int',
        'allocate_exclude': 'bool',
        'hold': 'bool',
        'networked': 'bool',
        'bed_capacity': 'str',
        'bathrooms': 'str',
        'street': 'str',
        'street2': 'str',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'room_space_id': 'RoomSpaceID',
        'room_base_id': 'RoomBaseID',
        'room_space_type_enum': 'RoomSpaceTypeEnum',
        'record_type_enum': 'RecordTypeEnum',
        'room_id': 'RoomID',
        'description': 'Description',
        'web_description': 'WebDescription',
        'extension_id': 'ExtensionID',
        'sort_order': 'SortOrder',
        'room_rate_id': 'RoomRateID',
        'allocate_sort_order': 'AllocateSortOrder',
        'allocate_exclude': 'AllocateExclude',
        'hold': 'Hold',
        'networked': 'Networked',
        'bed_capacity': 'BedCapacity',
        'bathrooms': 'Bathrooms',
        'street': 'Street',
        'street2': 'Street2',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, room_space_id=None, room_base_id=None, room_space_type_enum=None, record_type_enum=None, room_id=None, description=None, web_description=None, extension_id=None, sort_order=None, room_rate_id=None, allocate_sort_order=None, allocate_exclude=None, hold=None, networked=None, bed_capacity=None, bathrooms=None, street=None, street2=None, comments=None, date_modified=None):  # noqa: E501
        """RoomSpaceItem - a model defined in Swagger"""  # noqa: E501

        self._room_space_id = None
        self._room_base_id = None
        self._room_space_type_enum = None
        self._record_type_enum = None
        self._room_id = None
        self._description = None
        self._web_description = None
        self._extension_id = None
        self._sort_order = None
        self._room_rate_id = None
        self._allocate_sort_order = None
        self._allocate_exclude = None
        self._hold = None
        self._networked = None
        self._bed_capacity = None
        self._bathrooms = None
        self._street = None
        self._street2 = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if room_space_id is not None:
            self.room_space_id = room_space_id
        if room_base_id is not None:
            self.room_base_id = room_base_id
        if room_space_type_enum is not None:
            self.room_space_type_enum = room_space_type_enum
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if room_id is not None:
            self.room_id = room_id
        if description is not None:
            self.description = description
        if web_description is not None:
            self.web_description = web_description
        if extension_id is not None:
            self.extension_id = extension_id
        if sort_order is not None:
            self.sort_order = sort_order
        if room_rate_id is not None:
            self.room_rate_id = room_rate_id
        if allocate_sort_order is not None:
            self.allocate_sort_order = allocate_sort_order
        if allocate_exclude is not None:
            self.allocate_exclude = allocate_exclude
        if hold is not None:
            self.hold = hold
        if networked is not None:
            self.networked = networked
        if bed_capacity is not None:
            self.bed_capacity = bed_capacity
        if bathrooms is not None:
            self.bathrooms = bathrooms
        if street is not None:
            self.street = street
        if street2 is not None:
            self.street2 = street2
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def room_space_id(self):
        """Gets the room_space_id of this RoomSpaceItem.  # noqa: E501

        Room Space  # noqa: E501

        :return: The room_space_id of this RoomSpaceItem.  # noqa: E501
        :rtype: int
        """
        return self._room_space_id

    @room_space_id.setter
    def room_space_id(self, room_space_id):
        """Sets the room_space_id of this RoomSpaceItem.

        Room Space  # noqa: E501

        :param room_space_id: The room_space_id of this RoomSpaceItem.  # noqa: E501
        :type: int
        """

        self._room_space_id = room_space_id

    @property
    def room_base_id(self):
        """Gets the room_base_id of this RoomSpaceItem.  # noqa: E501

        Room Base  # noqa: E501

        :return: The room_base_id of this RoomSpaceItem.  # noqa: E501
        :rtype: int
        """
        return self._room_base_id

    @room_base_id.setter
    def room_base_id(self, room_base_id):
        """Sets the room_base_id of this RoomSpaceItem.

        Room Base  # noqa: E501

        :param room_base_id: The room_base_id of this RoomSpaceItem.  # noqa: E501
        :type: int
        """

        self._room_base_id = room_base_id

    @property
    def room_space_type_enum(self):
        """Gets the room_space_type_enum of this RoomSpaceItem.  # noqa: E501

        Room Space Type  # noqa: E501

        :return: The room_space_type_enum of this RoomSpaceItem.  # noqa: E501
        :rtype: str
        """
        return self._room_space_type_enum

    @room_space_type_enum.setter
    def room_space_type_enum(self, room_space_type_enum):
        """Sets the room_space_type_enum of this RoomSpaceItem.

        Room Space Type  # noqa: E501

        :param room_space_type_enum: The room_space_type_enum of this RoomSpaceItem.  # noqa: E501
        :type: str
        """

        self._room_space_type_enum = room_space_type_enum

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this RoomSpaceItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this RoomSpaceItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this RoomSpaceItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this RoomSpaceItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def room_id(self):
        """Gets the room_id of this RoomSpaceItem.  # noqa: E501

        Room  # noqa: E501

        :return: The room_id of this RoomSpaceItem.  # noqa: E501
        :rtype: int
        """
        return self._room_id

    @room_id.setter
    def room_id(self, room_id):
        """Sets the room_id of this RoomSpaceItem.

        Room  # noqa: E501

        :param room_id: The room_id of this RoomSpaceItem.  # noqa: E501
        :type: int
        """

        self._room_id = room_id

    @property
    def description(self):
        """Gets the description of this RoomSpaceItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this RoomSpaceItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoomSpaceItem.

        Description  # noqa: E501

        :param description: The description of this RoomSpaceItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 30:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `30`")  # noqa: E501

        self._description = description

    @property
    def web_description(self):
        """Gets the web_description of this RoomSpaceItem.  # noqa: E501

        Web Description  # noqa: E501

        :return: The web_description of this RoomSpaceItem.  # noqa: E501
        :rtype: str
        """
        return self._web_description

    @web_description.setter
    def web_description(self, web_description):
        """Sets the web_description of this RoomSpaceItem.

        Web Description  # noqa: E501

        :param web_description: The web_description of this RoomSpaceItem.  # noqa: E501
        :type: str
        """
        if web_description is not None and len(web_description) > 30:
            raise ValueError("Invalid value for `web_description`, length must be less than or equal to `30`")  # noqa: E501

        self._web_description = web_description

    @property
    def extension_id(self):
        """Gets the extension_id of this RoomSpaceItem.  # noqa: E501

        Extension  # noqa: E501

        :return: The extension_id of this RoomSpaceItem.  # noqa: E501
        :rtype: int
        """
        return self._extension_id

    @extension_id.setter
    def extension_id(self, extension_id):
        """Sets the extension_id of this RoomSpaceItem.

        Extension  # noqa: E501

        :param extension_id: The extension_id of this RoomSpaceItem.  # noqa: E501
        :type: int
        """

        self._extension_id = extension_id

    @property
    def sort_order(self):
        """Gets the sort_order of this RoomSpaceItem.  # noqa: E501

        Sort Order  # noqa: E501

        :return: The sort_order of this RoomSpaceItem.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this RoomSpaceItem.

        Sort Order  # noqa: E501

        :param sort_order: The sort_order of this RoomSpaceItem.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def room_rate_id(self):
        """Gets the room_rate_id of this RoomSpaceItem.  # noqa: E501

        Room Rate  # noqa: E501

        :return: The room_rate_id of this RoomSpaceItem.  # noqa: E501
        :rtype: int
        """
        return self._room_rate_id

    @room_rate_id.setter
    def room_rate_id(self, room_rate_id):
        """Sets the room_rate_id of this RoomSpaceItem.

        Room Rate  # noqa: E501

        :param room_rate_id: The room_rate_id of this RoomSpaceItem.  # noqa: E501
        :type: int
        """

        self._room_rate_id = room_rate_id

    @property
    def allocate_sort_order(self):
        """Gets the allocate_sort_order of this RoomSpaceItem.  # noqa: E501

        Allocate Sort Order  # noqa: E501

        :return: The allocate_sort_order of this RoomSpaceItem.  # noqa: E501
        :rtype: int
        """
        return self._allocate_sort_order

    @allocate_sort_order.setter
    def allocate_sort_order(self, allocate_sort_order):
        """Sets the allocate_sort_order of this RoomSpaceItem.

        Allocate Sort Order  # noqa: E501

        :param allocate_sort_order: The allocate_sort_order of this RoomSpaceItem.  # noqa: E501
        :type: int
        """

        self._allocate_sort_order = allocate_sort_order

    @property
    def allocate_exclude(self):
        """Gets the allocate_exclude of this RoomSpaceItem.  # noqa: E501

        Allocate Exclude  # noqa: E501

        :return: The allocate_exclude of this RoomSpaceItem.  # noqa: E501
        :rtype: bool
        """
        return self._allocate_exclude

    @allocate_exclude.setter
    def allocate_exclude(self, allocate_exclude):
        """Sets the allocate_exclude of this RoomSpaceItem.

        Allocate Exclude  # noqa: E501

        :param allocate_exclude: The allocate_exclude of this RoomSpaceItem.  # noqa: E501
        :type: bool
        """

        self._allocate_exclude = allocate_exclude

    @property
    def hold(self):
        """Gets the hold of this RoomSpaceItem.  # noqa: E501

        Hold  # noqa: E501

        :return: The hold of this RoomSpaceItem.  # noqa: E501
        :rtype: bool
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this RoomSpaceItem.

        Hold  # noqa: E501

        :param hold: The hold of this RoomSpaceItem.  # noqa: E501
        :type: bool
        """

        self._hold = hold

    @property
    def networked(self):
        """Gets the networked of this RoomSpaceItem.  # noqa: E501

        Networked  # noqa: E501

        :return: The networked of this RoomSpaceItem.  # noqa: E501
        :rtype: bool
        """
        return self._networked

    @networked.setter
    def networked(self, networked):
        """Sets the networked of this RoomSpaceItem.

        Networked  # noqa: E501

        :param networked: The networked of this RoomSpaceItem.  # noqa: E501
        :type: bool
        """

        self._networked = networked

    @property
    def bed_capacity(self):
        """Gets the bed_capacity of this RoomSpaceItem.  # noqa: E501

        Bed Capacity  # noqa: E501

        :return: The bed_capacity of this RoomSpaceItem.  # noqa: E501
        :rtype: str
        """
        return self._bed_capacity

    @bed_capacity.setter
    def bed_capacity(self, bed_capacity):
        """Sets the bed_capacity of this RoomSpaceItem.

        Bed Capacity  # noqa: E501

        :param bed_capacity: The bed_capacity of this RoomSpaceItem.  # noqa: E501
        :type: str
        """

        self._bed_capacity = bed_capacity

    @property
    def bathrooms(self):
        """Gets the bathrooms of this RoomSpaceItem.  # noqa: E501

        Bathrooms  # noqa: E501

        :return: The bathrooms of this RoomSpaceItem.  # noqa: E501
        :rtype: str
        """
        return self._bathrooms

    @bathrooms.setter
    def bathrooms(self, bathrooms):
        """Sets the bathrooms of this RoomSpaceItem.

        Bathrooms  # noqa: E501

        :param bathrooms: The bathrooms of this RoomSpaceItem.  # noqa: E501
        :type: str
        """

        self._bathrooms = bathrooms

    @property
    def street(self):
        """Gets the street of this RoomSpaceItem.  # noqa: E501

        Street  # noqa: E501

        :return: The street of this RoomSpaceItem.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this RoomSpaceItem.

        Street  # noqa: E501

        :param street: The street of this RoomSpaceItem.  # noqa: E501
        :type: str
        """
        if street is not None and len(street) > 60:
            raise ValueError("Invalid value for `street`, length must be less than or equal to `60`")  # noqa: E501

        self._street = street

    @property
    def street2(self):
        """Gets the street2 of this RoomSpaceItem.  # noqa: E501

        Street 2  # noqa: E501

        :return: The street2 of this RoomSpaceItem.  # noqa: E501
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this RoomSpaceItem.

        Street 2  # noqa: E501

        :param street2: The street2 of this RoomSpaceItem.  # noqa: E501
        :type: str
        """
        if street2 is not None and len(street2) > 60:
            raise ValueError("Invalid value for `street2`, length must be less than or equal to `60`")  # noqa: E501

        self._street2 = street2

    @property
    def comments(self):
        """Gets the comments of this RoomSpaceItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this RoomSpaceItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this RoomSpaceItem.

        Comments  # noqa: E501

        :param comments: The comments of this RoomSpaceItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 200:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `200`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this RoomSpaceItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this RoomSpaceItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this RoomSpaceItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this RoomSpaceItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomSpaceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
