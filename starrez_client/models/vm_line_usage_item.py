# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VMLineUsageItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vm_line_usage_id': 'int',
        'vm_line_usage_date': 'datetime',
        'site_id': 'int',
        'line': 'str',
        'duration': 'int',
        'extension_id': 'int',
        'admin': 'bool',
        'date_modified': 'str'
    }

    attribute_map = {
        'vm_line_usage_id': 'VMLineUsageID',
        'vm_line_usage_date': 'VMLineUsageDate',
        'site_id': 'SiteID',
        'line': 'Line',
        'duration': 'Duration',
        'extension_id': 'ExtensionID',
        'admin': 'Admin',
        'date_modified': 'DateModified'
    }

    def __init__(self, vm_line_usage_id=None, vm_line_usage_date=None, site_id=None, line=None, duration=None, extension_id=None, admin=None, date_modified=None):  # noqa: E501
        """VMLineUsageItem - a model defined in Swagger"""  # noqa: E501

        self._vm_line_usage_id = None
        self._vm_line_usage_date = None
        self._site_id = None
        self._line = None
        self._duration = None
        self._extension_id = None
        self._admin = None
        self._date_modified = None
        self.discriminator = None

        if vm_line_usage_id is not None:
            self.vm_line_usage_id = vm_line_usage_id
        if vm_line_usage_date is not None:
            self.vm_line_usage_date = vm_line_usage_date
        if site_id is not None:
            self.site_id = site_id
        if line is not None:
            self.line = line
        if duration is not None:
            self.duration = duration
        if extension_id is not None:
            self.extension_id = extension_id
        if admin is not None:
            self.admin = admin
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def vm_line_usage_id(self):
        """Gets the vm_line_usage_id of this VMLineUsageItem.  # noqa: E501

        VM Line Usage  # noqa: E501

        :return: The vm_line_usage_id of this VMLineUsageItem.  # noqa: E501
        :rtype: int
        """
        return self._vm_line_usage_id

    @vm_line_usage_id.setter
    def vm_line_usage_id(self, vm_line_usage_id):
        """Sets the vm_line_usage_id of this VMLineUsageItem.

        VM Line Usage  # noqa: E501

        :param vm_line_usage_id: The vm_line_usage_id of this VMLineUsageItem.  # noqa: E501
        :type: int
        """

        self._vm_line_usage_id = vm_line_usage_id

    @property
    def vm_line_usage_date(self):
        """Gets the vm_line_usage_date of this VMLineUsageItem.  # noqa: E501

        VM Line Usage Date  # noqa: E501

        :return: The vm_line_usage_date of this VMLineUsageItem.  # noqa: E501
        :rtype: datetime
        """
        return self._vm_line_usage_date

    @vm_line_usage_date.setter
    def vm_line_usage_date(self, vm_line_usage_date):
        """Sets the vm_line_usage_date of this VMLineUsageItem.

        VM Line Usage Date  # noqa: E501

        :param vm_line_usage_date: The vm_line_usage_date of this VMLineUsageItem.  # noqa: E501
        :type: datetime
        """

        self._vm_line_usage_date = vm_line_usage_date

    @property
    def site_id(self):
        """Gets the site_id of this VMLineUsageItem.  # noqa: E501

        Site  # noqa: E501

        :return: The site_id of this VMLineUsageItem.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this VMLineUsageItem.

        Site  # noqa: E501

        :param site_id: The site_id of this VMLineUsageItem.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def line(self):
        """Gets the line of this VMLineUsageItem.  # noqa: E501

        Line  # noqa: E501

        :return: The line of this VMLineUsageItem.  # noqa: E501
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this VMLineUsageItem.

        Line  # noqa: E501

        :param line: The line of this VMLineUsageItem.  # noqa: E501
        :type: str
        """

        self._line = line

    @property
    def duration(self):
        """Gets the duration of this VMLineUsageItem.  # noqa: E501

        Duration  # noqa: E501

        :return: The duration of this VMLineUsageItem.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VMLineUsageItem.

        Duration  # noqa: E501

        :param duration: The duration of this VMLineUsageItem.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def extension_id(self):
        """Gets the extension_id of this VMLineUsageItem.  # noqa: E501

        Extension  # noqa: E501

        :return: The extension_id of this VMLineUsageItem.  # noqa: E501
        :rtype: int
        """
        return self._extension_id

    @extension_id.setter
    def extension_id(self, extension_id):
        """Sets the extension_id of this VMLineUsageItem.

        Extension  # noqa: E501

        :param extension_id: The extension_id of this VMLineUsageItem.  # noqa: E501
        :type: int
        """

        self._extension_id = extension_id

    @property
    def admin(self):
        """Gets the admin of this VMLineUsageItem.  # noqa: E501

        Admin  # noqa: E501

        :return: The admin of this VMLineUsageItem.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this VMLineUsageItem.

        Admin  # noqa: E501

        :param admin: The admin of this VMLineUsageItem.  # noqa: E501
        :type: bool
        """

        self._admin = admin

    @property
    def date_modified(self):
        """Gets the date_modified of this VMLineUsageItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this VMLineUsageItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this VMLineUsageItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this VMLineUsageItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VMLineUsageItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
