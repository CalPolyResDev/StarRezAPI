# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EmailOutboxItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_outbox_id': 'int',
        'address_to': 'str',
        'address_cc': 'str',
        'address_bcc': 'str',
        'from_address': 'str',
        'from_name': 'str',
        'smtp_username': 'str',
        'subject': 'str',
        'body': 'str',
        'attachment_path': 'str',
        'date_to_send': 'str',
        'sent': 'bool',
        'sent_at': 'str',
        'failed': 'bool',
        'date_modified': 'str'
    }

    attribute_map = {
        'email_outbox_id': 'EmailOutboxID',
        'address_to': 'AddressTo',
        'address_cc': 'AddressCC',
        'address_bcc': 'AddressBCC',
        'from_address': 'FromAddress',
        'from_name': 'FromName',
        'smtp_username': 'SmtpUsername',
        'subject': 'Subject',
        'body': 'Body',
        'attachment_path': 'AttachmentPath',
        'date_to_send': 'DateToSend',
        'sent': 'Sent',
        'sent_at': 'SentAt',
        'failed': 'Failed',
        'date_modified': 'DateModified'
    }

    def __init__(self, email_outbox_id=None, address_to=None, address_cc=None, address_bcc=None, from_address=None, from_name=None, smtp_username=None, subject=None, body=None, attachment_path=None, date_to_send=None, sent=None, sent_at=None, failed=None, date_modified=None):  # noqa: E501
        """EmailOutboxItem - a model defined in Swagger"""  # noqa: E501

        self._email_outbox_id = None
        self._address_to = None
        self._address_cc = None
        self._address_bcc = None
        self._from_address = None
        self._from_name = None
        self._smtp_username = None
        self._subject = None
        self._body = None
        self._attachment_path = None
        self._date_to_send = None
        self._sent = None
        self._sent_at = None
        self._failed = None
        self._date_modified = None
        self.discriminator = None

        if email_outbox_id is not None:
            self.email_outbox_id = email_outbox_id
        if address_to is not None:
            self.address_to = address_to
        if address_cc is not None:
            self.address_cc = address_cc
        if address_bcc is not None:
            self.address_bcc = address_bcc
        if from_address is not None:
            self.from_address = from_address
        if from_name is not None:
            self.from_name = from_name
        if smtp_username is not None:
            self.smtp_username = smtp_username
        if subject is not None:
            self.subject = subject
        if body is not None:
            self.body = body
        if attachment_path is not None:
            self.attachment_path = attachment_path
        if date_to_send is not None:
            self.date_to_send = date_to_send
        if sent is not None:
            self.sent = sent
        if sent_at is not None:
            self.sent_at = sent_at
        if failed is not None:
            self.failed = failed
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def email_outbox_id(self):
        """Gets the email_outbox_id of this EmailOutboxItem.  # noqa: E501

        Email Outbox  # noqa: E501

        :return: The email_outbox_id of this EmailOutboxItem.  # noqa: E501
        :rtype: int
        """
        return self._email_outbox_id

    @email_outbox_id.setter
    def email_outbox_id(self, email_outbox_id):
        """Sets the email_outbox_id of this EmailOutboxItem.

        Email Outbox  # noqa: E501

        :param email_outbox_id: The email_outbox_id of this EmailOutboxItem.  # noqa: E501
        :type: int
        """

        self._email_outbox_id = email_outbox_id

    @property
    def address_to(self):
        """Gets the address_to of this EmailOutboxItem.  # noqa: E501

        Address To  # noqa: E501

        :return: The address_to of this EmailOutboxItem.  # noqa: E501
        :rtype: str
        """
        return self._address_to

    @address_to.setter
    def address_to(self, address_to):
        """Sets the address_to of this EmailOutboxItem.

        Address To  # noqa: E501

        :param address_to: The address_to of this EmailOutboxItem.  # noqa: E501
        :type: str
        """

        self._address_to = address_to

    @property
    def address_cc(self):
        """Gets the address_cc of this EmailOutboxItem.  # noqa: E501

        Address CC  # noqa: E501

        :return: The address_cc of this EmailOutboxItem.  # noqa: E501
        :rtype: str
        """
        return self._address_cc

    @address_cc.setter
    def address_cc(self, address_cc):
        """Sets the address_cc of this EmailOutboxItem.

        Address CC  # noqa: E501

        :param address_cc: The address_cc of this EmailOutboxItem.  # noqa: E501
        :type: str
        """

        self._address_cc = address_cc

    @property
    def address_bcc(self):
        """Gets the address_bcc of this EmailOutboxItem.  # noqa: E501

        Address BCC  # noqa: E501

        :return: The address_bcc of this EmailOutboxItem.  # noqa: E501
        :rtype: str
        """
        return self._address_bcc

    @address_bcc.setter
    def address_bcc(self, address_bcc):
        """Sets the address_bcc of this EmailOutboxItem.

        Address BCC  # noqa: E501

        :param address_bcc: The address_bcc of this EmailOutboxItem.  # noqa: E501
        :type: str
        """

        self._address_bcc = address_bcc

    @property
    def from_address(self):
        """Gets the from_address of this EmailOutboxItem.  # noqa: E501

        From Address  # noqa: E501

        :return: The from_address of this EmailOutboxItem.  # noqa: E501
        :rtype: str
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this EmailOutboxItem.

        From Address  # noqa: E501

        :param from_address: The from_address of this EmailOutboxItem.  # noqa: E501
        :type: str
        """
        if from_address is not None and len(from_address) > 200:
            raise ValueError("Invalid value for `from_address`, length must be less than or equal to `200`")  # noqa: E501

        self._from_address = from_address

    @property
    def from_name(self):
        """Gets the from_name of this EmailOutboxItem.  # noqa: E501

        From Name  # noqa: E501

        :return: The from_name of this EmailOutboxItem.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this EmailOutboxItem.

        From Name  # noqa: E501

        :param from_name: The from_name of this EmailOutboxItem.  # noqa: E501
        :type: str
        """
        if from_name is not None and len(from_name) > 200:
            raise ValueError("Invalid value for `from_name`, length must be less than or equal to `200`")  # noqa: E501

        self._from_name = from_name

    @property
    def smtp_username(self):
        """Gets the smtp_username of this EmailOutboxItem.  # noqa: E501

        Smtp Username  # noqa: E501

        :return: The smtp_username of this EmailOutboxItem.  # noqa: E501
        :rtype: str
        """
        return self._smtp_username

    @smtp_username.setter
    def smtp_username(self, smtp_username):
        """Sets the smtp_username of this EmailOutboxItem.

        Smtp Username  # noqa: E501

        :param smtp_username: The smtp_username of this EmailOutboxItem.  # noqa: E501
        :type: str
        """
        if smtp_username is not None and len(smtp_username) > 50:
            raise ValueError("Invalid value for `smtp_username`, length must be less than or equal to `50`")  # noqa: E501

        self._smtp_username = smtp_username

    @property
    def subject(self):
        """Gets the subject of this EmailOutboxItem.  # noqa: E501

        Subject  # noqa: E501

        :return: The subject of this EmailOutboxItem.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailOutboxItem.

        Subject  # noqa: E501

        :param subject: The subject of this EmailOutboxItem.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this EmailOutboxItem.  # noqa: E501

        Body  # noqa: E501

        :return: The body of this EmailOutboxItem.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this EmailOutboxItem.

        Body  # noqa: E501

        :param body: The body of this EmailOutboxItem.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def attachment_path(self):
        """Gets the attachment_path of this EmailOutboxItem.  # noqa: E501

        Attachment Path  # noqa: E501

        :return: The attachment_path of this EmailOutboxItem.  # noqa: E501
        :rtype: str
        """
        return self._attachment_path

    @attachment_path.setter
    def attachment_path(self, attachment_path):
        """Sets the attachment_path of this EmailOutboxItem.

        Attachment Path  # noqa: E501

        :param attachment_path: The attachment_path of this EmailOutboxItem.  # noqa: E501
        :type: str
        """
        if attachment_path is not None and len(attachment_path) > 500:
            raise ValueError("Invalid value for `attachment_path`, length must be less than or equal to `500`")  # noqa: E501

        self._attachment_path = attachment_path

    @property
    def date_to_send(self):
        """Gets the date_to_send of this EmailOutboxItem.  # noqa: E501

        Date To Send  # noqa: E501

        :return: The date_to_send of this EmailOutboxItem.  # noqa: E501
        :rtype: str
        """
        return self._date_to_send

    @date_to_send.setter
    def date_to_send(self, date_to_send):
        """Sets the date_to_send of this EmailOutboxItem.

        Date To Send  # noqa: E501

        :param date_to_send: The date_to_send of this EmailOutboxItem.  # noqa: E501
        :type: str
        """

        self._date_to_send = date_to_send

    @property
    def sent(self):
        """Gets the sent of this EmailOutboxItem.  # noqa: E501

        Sent  # noqa: E501

        :return: The sent of this EmailOutboxItem.  # noqa: E501
        :rtype: bool
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this EmailOutboxItem.

        Sent  # noqa: E501

        :param sent: The sent of this EmailOutboxItem.  # noqa: E501
        :type: bool
        """

        self._sent = sent

    @property
    def sent_at(self):
        """Gets the sent_at of this EmailOutboxItem.  # noqa: E501

        Sent At  # noqa: E501

        :return: The sent_at of this EmailOutboxItem.  # noqa: E501
        :rtype: str
        """
        return self._sent_at

    @sent_at.setter
    def sent_at(self, sent_at):
        """Sets the sent_at of this EmailOutboxItem.

        Sent At  # noqa: E501

        :param sent_at: The sent_at of this EmailOutboxItem.  # noqa: E501
        :type: str
        """

        self._sent_at = sent_at

    @property
    def failed(self):
        """Gets the failed of this EmailOutboxItem.  # noqa: E501

        Failed  # noqa: E501

        :return: The failed of this EmailOutboxItem.  # noqa: E501
        :rtype: bool
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this EmailOutboxItem.

        Failed  # noqa: E501

        :param failed: The failed of this EmailOutboxItem.  # noqa: E501
        :type: bool
        """

        self._failed = failed

    @property
    def date_modified(self):
        """Gets the date_modified of this EmailOutboxItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EmailOutboxItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EmailOutboxItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EmailOutboxItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailOutboxItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
