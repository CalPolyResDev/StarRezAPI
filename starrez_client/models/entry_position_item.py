# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntryPositionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_position_id': 'int',
        'entry_id': 'int',
        'term_id': 'int',
        'position_year': 'str',
        'term_detail': 'str',
        'position': 'str',
        'position_date_start': 'str',
        'position_date_end': 'str',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'entry_position_id': 'EntryPositionID',
        'entry_id': 'EntryID',
        'term_id': 'TermID',
        'position_year': 'PositionYear',
        'term_detail': 'TermDetail',
        'position': 'Position',
        'position_date_start': 'PositionDateStart',
        'position_date_end': 'PositionDateEnd',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, entry_position_id=None, entry_id=None, term_id=None, position_year=None, term_detail=None, position=None, position_date_start=None, position_date_end=None, comments=None, date_modified=None):  # noqa: E501
        """EntryPositionItem - a model defined in Swagger"""  # noqa: E501

        self._entry_position_id = None
        self._entry_id = None
        self._term_id = None
        self._position_year = None
        self._term_detail = None
        self._position = None
        self._position_date_start = None
        self._position_date_end = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if entry_position_id is not None:
            self.entry_position_id = entry_position_id
        if entry_id is not None:
            self.entry_id = entry_id
        if term_id is not None:
            self.term_id = term_id
        if position_year is not None:
            self.position_year = position_year
        if term_detail is not None:
            self.term_detail = term_detail
        if position is not None:
            self.position = position
        if position_date_start is not None:
            self.position_date_start = position_date_start
        if position_date_end is not None:
            self.position_date_end = position_date_end
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def entry_position_id(self):
        """Gets the entry_position_id of this EntryPositionItem.  # noqa: E501

        Entry Position  # noqa: E501

        :return: The entry_position_id of this EntryPositionItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_position_id

    @entry_position_id.setter
    def entry_position_id(self, entry_position_id):
        """Sets the entry_position_id of this EntryPositionItem.

        Entry Position  # noqa: E501

        :param entry_position_id: The entry_position_id of this EntryPositionItem.  # noqa: E501
        :type: int
        """

        self._entry_position_id = entry_position_id

    @property
    def entry_id(self):
        """Gets the entry_id of this EntryPositionItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this EntryPositionItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this EntryPositionItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this EntryPositionItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def term_id(self):
        """Gets the term_id of this EntryPositionItem.  # noqa: E501

        Term  # noqa: E501

        :return: The term_id of this EntryPositionItem.  # noqa: E501
        :rtype: int
        """
        return self._term_id

    @term_id.setter
    def term_id(self, term_id):
        """Sets the term_id of this EntryPositionItem.

        Term  # noqa: E501

        :param term_id: The term_id of this EntryPositionItem.  # noqa: E501
        :type: int
        """

        self._term_id = term_id

    @property
    def position_year(self):
        """Gets the position_year of this EntryPositionItem.  # noqa: E501

        Position Year  # noqa: E501

        :return: The position_year of this EntryPositionItem.  # noqa: E501
        :rtype: str
        """
        return self._position_year

    @position_year.setter
    def position_year(self, position_year):
        """Sets the position_year of this EntryPositionItem.

        Position Year  # noqa: E501

        :param position_year: The position_year of this EntryPositionItem.  # noqa: E501
        :type: str
        """
        if position_year is not None and len(position_year) > 10:
            raise ValueError("Invalid value for `position_year`, length must be less than or equal to `10`")  # noqa: E501

        self._position_year = position_year

    @property
    def term_detail(self):
        """Gets the term_detail of this EntryPositionItem.  # noqa: E501

        Term Detail  # noqa: E501

        :return: The term_detail of this EntryPositionItem.  # noqa: E501
        :rtype: str
        """
        return self._term_detail

    @term_detail.setter
    def term_detail(self, term_detail):
        """Sets the term_detail of this EntryPositionItem.

        Term Detail  # noqa: E501

        :param term_detail: The term_detail of this EntryPositionItem.  # noqa: E501
        :type: str
        """
        if term_detail is not None and len(term_detail) > 40:
            raise ValueError("Invalid value for `term_detail`, length must be less than or equal to `40`")  # noqa: E501

        self._term_detail = term_detail

    @property
    def position(self):
        """Gets the position of this EntryPositionItem.  # noqa: E501

        Position  # noqa: E501

        :return: The position of this EntryPositionItem.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this EntryPositionItem.

        Position  # noqa: E501

        :param position: The position of this EntryPositionItem.  # noqa: E501
        :type: str
        """
        if position is not None and len(position) > 50:
            raise ValueError("Invalid value for `position`, length must be less than or equal to `50`")  # noqa: E501

        self._position = position

    @property
    def position_date_start(self):
        """Gets the position_date_start of this EntryPositionItem.  # noqa: E501

        Position Date Start  # noqa: E501

        :return: The position_date_start of this EntryPositionItem.  # noqa: E501
        :rtype: str
        """
        return self._position_date_start

    @position_date_start.setter
    def position_date_start(self, position_date_start):
        """Sets the position_date_start of this EntryPositionItem.

        Position Date Start  # noqa: E501

        :param position_date_start: The position_date_start of this EntryPositionItem.  # noqa: E501
        :type: str
        """

        self._position_date_start = position_date_start

    @property
    def position_date_end(self):
        """Gets the position_date_end of this EntryPositionItem.  # noqa: E501

        Position Date End  # noqa: E501

        :return: The position_date_end of this EntryPositionItem.  # noqa: E501
        :rtype: str
        """
        return self._position_date_end

    @position_date_end.setter
    def position_date_end(self, position_date_end):
        """Sets the position_date_end of this EntryPositionItem.

        Position Date End  # noqa: E501

        :param position_date_end: The position_date_end of this EntryPositionItem.  # noqa: E501
        :type: str
        """

        self._position_date_end = position_date_end

    @property
    def comments(self):
        """Gets the comments of this EntryPositionItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this EntryPositionItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EntryPositionItem.

        Comments  # noqa: E501

        :param comments: The comments of this EntryPositionItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 255:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `255`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this EntryPositionItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EntryPositionItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntryPositionItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EntryPositionItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryPositionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
