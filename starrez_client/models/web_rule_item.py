# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebRuleItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'web_rule_id': 'int',
        'description': 'str',
        'web_site_id': 'int',
        'comments': 'str',
        'return_status': 'int',
        'return_text': 'str',
        'variable_name': 'str',
        'variable_operator': 'str',
        'variable_value': 'str',
        'sql': 'str',
        'security_user_id': 'int',
        'date_created': 'datetime',
        'record_type_enum': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'web_rule_id': 'WebRuleID',
        'description': 'Description',
        'web_site_id': 'WebSiteID',
        'comments': 'Comments',
        'return_status': 'ReturnStatus',
        'return_text': 'ReturnText',
        'variable_name': 'VariableName',
        'variable_operator': 'VariableOperator',
        'variable_value': 'VariableValue',
        'sql': 'SQL',
        'security_user_id': 'SecurityUserID',
        'date_created': 'DateCreated',
        'record_type_enum': 'RecordTypeEnum',
        'date_modified': 'DateModified'
    }

    def __init__(self, web_rule_id=None, description=None, web_site_id=None, comments=None, return_status=None, return_text=None, variable_name=None, variable_operator=None, variable_value=None, sql=None, security_user_id=None, date_created=None, record_type_enum=None, date_modified=None):  # noqa: E501
        """WebRuleItem - a model defined in Swagger"""  # noqa: E501

        self._web_rule_id = None
        self._description = None
        self._web_site_id = None
        self._comments = None
        self._return_status = None
        self._return_text = None
        self._variable_name = None
        self._variable_operator = None
        self._variable_value = None
        self._sql = None
        self._security_user_id = None
        self._date_created = None
        self._record_type_enum = None
        self._date_modified = None
        self.discriminator = None

        if web_rule_id is not None:
            self.web_rule_id = web_rule_id
        if description is not None:
            self.description = description
        if web_site_id is not None:
            self.web_site_id = web_site_id
        if comments is not None:
            self.comments = comments
        if return_status is not None:
            self.return_status = return_status
        if return_text is not None:
            self.return_text = return_text
        if variable_name is not None:
            self.variable_name = variable_name
        if variable_operator is not None:
            self.variable_operator = variable_operator
        if variable_value is not None:
            self.variable_value = variable_value
        if sql is not None:
            self.sql = sql
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if date_created is not None:
            self.date_created = date_created
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def web_rule_id(self):
        """Gets the web_rule_id of this WebRuleItem.  # noqa: E501

        Web Rule  # noqa: E501

        :return: The web_rule_id of this WebRuleItem.  # noqa: E501
        :rtype: int
        """
        return self._web_rule_id

    @web_rule_id.setter
    def web_rule_id(self, web_rule_id):
        """Sets the web_rule_id of this WebRuleItem.

        Web Rule  # noqa: E501

        :param web_rule_id: The web_rule_id of this WebRuleItem.  # noqa: E501
        :type: int
        """

        self._web_rule_id = web_rule_id

    @property
    def description(self):
        """Gets the description of this WebRuleItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this WebRuleItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebRuleItem.

        Description  # noqa: E501

        :param description: The description of this WebRuleItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def web_site_id(self):
        """Gets the web_site_id of this WebRuleItem.  # noqa: E501

        Web Site  # noqa: E501

        :return: The web_site_id of this WebRuleItem.  # noqa: E501
        :rtype: int
        """
        return self._web_site_id

    @web_site_id.setter
    def web_site_id(self, web_site_id):
        """Sets the web_site_id of this WebRuleItem.

        Web Site  # noqa: E501

        :param web_site_id: The web_site_id of this WebRuleItem.  # noqa: E501
        :type: int
        """

        self._web_site_id = web_site_id

    @property
    def comments(self):
        """Gets the comments of this WebRuleItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this WebRuleItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WebRuleItem.

        Comments  # noqa: E501

        :param comments: The comments of this WebRuleItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 1000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `1000`")  # noqa: E501

        self._comments = comments

    @property
    def return_status(self):
        """Gets the return_status of this WebRuleItem.  # noqa: E501

        Return Status  # noqa: E501

        :return: The return_status of this WebRuleItem.  # noqa: E501
        :rtype: int
        """
        return self._return_status

    @return_status.setter
    def return_status(self, return_status):
        """Sets the return_status of this WebRuleItem.

        Return Status  # noqa: E501

        :param return_status: The return_status of this WebRuleItem.  # noqa: E501
        :type: int
        """

        self._return_status = return_status

    @property
    def return_text(self):
        """Gets the return_text of this WebRuleItem.  # noqa: E501

        Return Text  # noqa: E501

        :return: The return_text of this WebRuleItem.  # noqa: E501
        :rtype: str
        """
        return self._return_text

    @return_text.setter
    def return_text(self, return_text):
        """Sets the return_text of this WebRuleItem.

        Return Text  # noqa: E501

        :param return_text: The return_text of this WebRuleItem.  # noqa: E501
        :type: str
        """
        if return_text is not None and len(return_text) > 500:
            raise ValueError("Invalid value for `return_text`, length must be less than or equal to `500`")  # noqa: E501

        self._return_text = return_text

    @property
    def variable_name(self):
        """Gets the variable_name of this WebRuleItem.  # noqa: E501

        Variable Name  # noqa: E501

        :return: The variable_name of this WebRuleItem.  # noqa: E501
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this WebRuleItem.

        Variable Name  # noqa: E501

        :param variable_name: The variable_name of this WebRuleItem.  # noqa: E501
        :type: str
        """
        if variable_name is not None and len(variable_name) > 100:
            raise ValueError("Invalid value for `variable_name`, length must be less than or equal to `100`")  # noqa: E501

        self._variable_name = variable_name

    @property
    def variable_operator(self):
        """Gets the variable_operator of this WebRuleItem.  # noqa: E501

        Variable Operator  # noqa: E501

        :return: The variable_operator of this WebRuleItem.  # noqa: E501
        :rtype: str
        """
        return self._variable_operator

    @variable_operator.setter
    def variable_operator(self, variable_operator):
        """Sets the variable_operator of this WebRuleItem.

        Variable Operator  # noqa: E501

        :param variable_operator: The variable_operator of this WebRuleItem.  # noqa: E501
        :type: str
        """
        if variable_operator is not None and len(variable_operator) > 20:
            raise ValueError("Invalid value for `variable_operator`, length must be less than or equal to `20`")  # noqa: E501

        self._variable_operator = variable_operator

    @property
    def variable_value(self):
        """Gets the variable_value of this WebRuleItem.  # noqa: E501

        Variable Value  # noqa: E501

        :return: The variable_value of this WebRuleItem.  # noqa: E501
        :rtype: str
        """
        return self._variable_value

    @variable_value.setter
    def variable_value(self, variable_value):
        """Sets the variable_value of this WebRuleItem.

        Variable Value  # noqa: E501

        :param variable_value: The variable_value of this WebRuleItem.  # noqa: E501
        :type: str
        """
        if variable_value is not None and len(variable_value) > 200:
            raise ValueError("Invalid value for `variable_value`, length must be less than or equal to `200`")  # noqa: E501

        self._variable_value = variable_value

    @property
    def sql(self):
        """Gets the sql of this WebRuleItem.  # noqa: E501

        SQL  # noqa: E501

        :return: The sql of this WebRuleItem.  # noqa: E501
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this WebRuleItem.

        SQL  # noqa: E501

        :param sql: The sql of this WebRuleItem.  # noqa: E501
        :type: str
        """
        if sql is not None and len(sql) > 5000:
            raise ValueError("Invalid value for `sql`, length must be less than or equal to `5000`")  # noqa: E501

        self._sql = sql

    @property
    def security_user_id(self):
        """Gets the security_user_id of this WebRuleItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this WebRuleItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this WebRuleItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this WebRuleItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this WebRuleItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this WebRuleItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this WebRuleItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this WebRuleItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this WebRuleItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this WebRuleItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this WebRuleItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this WebRuleItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def date_modified(self):
        """Gets the date_modified of this WebRuleItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this WebRuleItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this WebRuleItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this WebRuleItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebRuleItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
