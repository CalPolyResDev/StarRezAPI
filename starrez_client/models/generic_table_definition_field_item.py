# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GenericTableDefinitionFieldItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'generic_table_definition_field_id': 'int',
        'generic_table_definition_id': 'int',
        'field_data_type_enum': 'str',
        'generic_field_order': 'int',
        'generic_field_name': 'str',
        'generic_field_group': 'str',
        'generic_field_comment': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'generic_table_definition_field_id': 'GenericTableDefinitionFieldID',
        'generic_table_definition_id': 'GenericTableDefinitionID',
        'field_data_type_enum': 'FieldDataTypeEnum',
        'generic_field_order': 'GenericFieldOrder',
        'generic_field_name': 'GenericFieldName',
        'generic_field_group': 'GenericFieldGroup',
        'generic_field_comment': 'GenericFieldComment',
        'date_modified': 'DateModified'
    }

    def __init__(self, generic_table_definition_field_id=None, generic_table_definition_id=None, field_data_type_enum=None, generic_field_order=None, generic_field_name=None, generic_field_group=None, generic_field_comment=None, date_modified=None):  # noqa: E501
        """GenericTableDefinitionFieldItem - a model defined in Swagger"""  # noqa: E501

        self._generic_table_definition_field_id = None
        self._generic_table_definition_id = None
        self._field_data_type_enum = None
        self._generic_field_order = None
        self._generic_field_name = None
        self._generic_field_group = None
        self._generic_field_comment = None
        self._date_modified = None
        self.discriminator = None

        if generic_table_definition_field_id is not None:
            self.generic_table_definition_field_id = generic_table_definition_field_id
        if generic_table_definition_id is not None:
            self.generic_table_definition_id = generic_table_definition_id
        if field_data_type_enum is not None:
            self.field_data_type_enum = field_data_type_enum
        if generic_field_order is not None:
            self.generic_field_order = generic_field_order
        if generic_field_name is not None:
            self.generic_field_name = generic_field_name
        if generic_field_group is not None:
            self.generic_field_group = generic_field_group
        if generic_field_comment is not None:
            self.generic_field_comment = generic_field_comment
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def generic_table_definition_field_id(self):
        """Gets the generic_table_definition_field_id of this GenericTableDefinitionFieldItem.  # noqa: E501

        Generic Table Definition Field  # noqa: E501

        :return: The generic_table_definition_field_id of this GenericTableDefinitionFieldItem.  # noqa: E501
        :rtype: int
        """
        return self._generic_table_definition_field_id

    @generic_table_definition_field_id.setter
    def generic_table_definition_field_id(self, generic_table_definition_field_id):
        """Sets the generic_table_definition_field_id of this GenericTableDefinitionFieldItem.

        Generic Table Definition Field  # noqa: E501

        :param generic_table_definition_field_id: The generic_table_definition_field_id of this GenericTableDefinitionFieldItem.  # noqa: E501
        :type: int
        """

        self._generic_table_definition_field_id = generic_table_definition_field_id

    @property
    def generic_table_definition_id(self):
        """Gets the generic_table_definition_id of this GenericTableDefinitionFieldItem.  # noqa: E501

        Generic Table Definition  # noqa: E501

        :return: The generic_table_definition_id of this GenericTableDefinitionFieldItem.  # noqa: E501
        :rtype: int
        """
        return self._generic_table_definition_id

    @generic_table_definition_id.setter
    def generic_table_definition_id(self, generic_table_definition_id):
        """Sets the generic_table_definition_id of this GenericTableDefinitionFieldItem.

        Generic Table Definition  # noqa: E501

        :param generic_table_definition_id: The generic_table_definition_id of this GenericTableDefinitionFieldItem.  # noqa: E501
        :type: int
        """

        self._generic_table_definition_id = generic_table_definition_id

    @property
    def field_data_type_enum(self):
        """Gets the field_data_type_enum of this GenericTableDefinitionFieldItem.  # noqa: E501

        Field Data Type  # noqa: E501

        :return: The field_data_type_enum of this GenericTableDefinitionFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._field_data_type_enum

    @field_data_type_enum.setter
    def field_data_type_enum(self, field_data_type_enum):
        """Sets the field_data_type_enum of this GenericTableDefinitionFieldItem.

        Field Data Type  # noqa: E501

        :param field_data_type_enum: The field_data_type_enum of this GenericTableDefinitionFieldItem.  # noqa: E501
        :type: str
        """

        self._field_data_type_enum = field_data_type_enum

    @property
    def generic_field_order(self):
        """Gets the generic_field_order of this GenericTableDefinitionFieldItem.  # noqa: E501

        Generic Field Order  # noqa: E501

        :return: The generic_field_order of this GenericTableDefinitionFieldItem.  # noqa: E501
        :rtype: int
        """
        return self._generic_field_order

    @generic_field_order.setter
    def generic_field_order(self, generic_field_order):
        """Sets the generic_field_order of this GenericTableDefinitionFieldItem.

        Generic Field Order  # noqa: E501

        :param generic_field_order: The generic_field_order of this GenericTableDefinitionFieldItem.  # noqa: E501
        :type: int
        """

        self._generic_field_order = generic_field_order

    @property
    def generic_field_name(self):
        """Gets the generic_field_name of this GenericTableDefinitionFieldItem.  # noqa: E501

        Generic Field Name  # noqa: E501

        :return: The generic_field_name of this GenericTableDefinitionFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._generic_field_name

    @generic_field_name.setter
    def generic_field_name(self, generic_field_name):
        """Sets the generic_field_name of this GenericTableDefinitionFieldItem.

        Generic Field Name  # noqa: E501

        :param generic_field_name: The generic_field_name of this GenericTableDefinitionFieldItem.  # noqa: E501
        :type: str
        """
        if generic_field_name is not None and len(generic_field_name) > 50:
            raise ValueError("Invalid value for `generic_field_name`, length must be less than or equal to `50`")  # noqa: E501

        self._generic_field_name = generic_field_name

    @property
    def generic_field_group(self):
        """Gets the generic_field_group of this GenericTableDefinitionFieldItem.  # noqa: E501

        Generic Field Group  # noqa: E501

        :return: The generic_field_group of this GenericTableDefinitionFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._generic_field_group

    @generic_field_group.setter
    def generic_field_group(self, generic_field_group):
        """Sets the generic_field_group of this GenericTableDefinitionFieldItem.

        Generic Field Group  # noqa: E501

        :param generic_field_group: The generic_field_group of this GenericTableDefinitionFieldItem.  # noqa: E501
        :type: str
        """
        if generic_field_group is not None and len(generic_field_group) > 50:
            raise ValueError("Invalid value for `generic_field_group`, length must be less than or equal to `50`")  # noqa: E501

        self._generic_field_group = generic_field_group

    @property
    def generic_field_comment(self):
        """Gets the generic_field_comment of this GenericTableDefinitionFieldItem.  # noqa: E501

        Generic Field Comment  # noqa: E501

        :return: The generic_field_comment of this GenericTableDefinitionFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._generic_field_comment

    @generic_field_comment.setter
    def generic_field_comment(self, generic_field_comment):
        """Sets the generic_field_comment of this GenericTableDefinitionFieldItem.

        Generic Field Comment  # noqa: E501

        :param generic_field_comment: The generic_field_comment of this GenericTableDefinitionFieldItem.  # noqa: E501
        :type: str
        """
        if generic_field_comment is not None and len(generic_field_comment) > 500:
            raise ValueError("Invalid value for `generic_field_comment`, length must be less than or equal to `500`")  # noqa: E501

        self._generic_field_comment = generic_field_comment

    @property
    def date_modified(self):
        """Gets the date_modified of this GenericTableDefinitionFieldItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this GenericTableDefinitionFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this GenericTableDefinitionFieldItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this GenericTableDefinitionFieldItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenericTableDefinitionFieldItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
