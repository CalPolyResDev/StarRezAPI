# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CountryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_id': 'int',
        'description': 'str',
        'abbreviation': 'str',
        'region_of_birth_id': 'int',
        'nationality_id': 'int',
        'record_type_enum': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'country_id': 'CountryID',
        'description': 'Description',
        'abbreviation': 'Abbreviation',
        'region_of_birth_id': 'RegionOfBirthID',
        'nationality_id': 'NationalityID',
        'record_type_enum': 'RecordTypeEnum',
        'date_modified': 'DateModified'
    }

    def __init__(self, country_id=None, description=None, abbreviation=None, region_of_birth_id=None, nationality_id=None, record_type_enum=None, date_modified=None):  # noqa: E501
        """CountryItem - a model defined in Swagger"""  # noqa: E501

        self._country_id = None
        self._description = None
        self._abbreviation = None
        self._region_of_birth_id = None
        self._nationality_id = None
        self._record_type_enum = None
        self._date_modified = None
        self.discriminator = None

        if country_id is not None:
            self.country_id = country_id
        if description is not None:
            self.description = description
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if region_of_birth_id is not None:
            self.region_of_birth_id = region_of_birth_id
        if nationality_id is not None:
            self.nationality_id = nationality_id
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def country_id(self):
        """Gets the country_id of this CountryItem.  # noqa: E501

        Country  # noqa: E501

        :return: The country_id of this CountryItem.  # noqa: E501
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this CountryItem.

        Country  # noqa: E501

        :param country_id: The country_id of this CountryItem.  # noqa: E501
        :type: int
        """

        self._country_id = country_id

    @property
    def description(self):
        """Gets the description of this CountryItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this CountryItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CountryItem.

        Description  # noqa: E501

        :param description: The description of this CountryItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 50:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `50`")  # noqa: E501

        self._description = description

    @property
    def abbreviation(self):
        """Gets the abbreviation of this CountryItem.  # noqa: E501

        Abbreviation  # noqa: E501

        :return: The abbreviation of this CountryItem.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this CountryItem.

        Abbreviation  # noqa: E501

        :param abbreviation: The abbreviation of this CountryItem.  # noqa: E501
        :type: str
        """
        if abbreviation is not None and len(abbreviation) > 50:
            raise ValueError("Invalid value for `abbreviation`, length must be less than or equal to `50`")  # noqa: E501

        self._abbreviation = abbreviation

    @property
    def region_of_birth_id(self):
        """Gets the region_of_birth_id of this CountryItem.  # noqa: E501

        Region Of Birth  # noqa: E501

        :return: The region_of_birth_id of this CountryItem.  # noqa: E501
        :rtype: int
        """
        return self._region_of_birth_id

    @region_of_birth_id.setter
    def region_of_birth_id(self, region_of_birth_id):
        """Sets the region_of_birth_id of this CountryItem.

        Region Of Birth  # noqa: E501

        :param region_of_birth_id: The region_of_birth_id of this CountryItem.  # noqa: E501
        :type: int
        """

        self._region_of_birth_id = region_of_birth_id

    @property
    def nationality_id(self):
        """Gets the nationality_id of this CountryItem.  # noqa: E501

        Nationality  # noqa: E501

        :return: The nationality_id of this CountryItem.  # noqa: E501
        :rtype: int
        """
        return self._nationality_id

    @nationality_id.setter
    def nationality_id(self, nationality_id):
        """Sets the nationality_id of this CountryItem.

        Nationality  # noqa: E501

        :param nationality_id: The nationality_id of this CountryItem.  # noqa: E501
        :type: int
        """

        self._nationality_id = nationality_id

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this CountryItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this CountryItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this CountryItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this CountryItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def date_modified(self):
        """Gets the date_modified of this CountryItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this CountryItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this CountryItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this CountryItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CountryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
