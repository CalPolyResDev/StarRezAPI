# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LookupTextItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lookup_text_id': 'int',
        'lookup_id': 'int',
        'lookup_text': 'str',
        'lookup_value': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'lookup_text_id': 'LookupTextID',
        'lookup_id': 'LookupID',
        'lookup_text': 'LookupText',
        'lookup_value': 'LookupValue',
        'date_modified': 'DateModified'
    }

    def __init__(self, lookup_text_id=None, lookup_id=None, lookup_text=None, lookup_value=None, date_modified=None):  # noqa: E501
        """LookupTextItem - a model defined in Swagger"""  # noqa: E501

        self._lookup_text_id = None
        self._lookup_id = None
        self._lookup_text = None
        self._lookup_value = None
        self._date_modified = None
        self.discriminator = None

        if lookup_text_id is not None:
            self.lookup_text_id = lookup_text_id
        if lookup_id is not None:
            self.lookup_id = lookup_id
        if lookup_text is not None:
            self.lookup_text = lookup_text
        if lookup_value is not None:
            self.lookup_value = lookup_value
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def lookup_text_id(self):
        """Gets the lookup_text_id of this LookupTextItem.  # noqa: E501

        Lookup Text  # noqa: E501

        :return: The lookup_text_id of this LookupTextItem.  # noqa: E501
        :rtype: int
        """
        return self._lookup_text_id

    @lookup_text_id.setter
    def lookup_text_id(self, lookup_text_id):
        """Sets the lookup_text_id of this LookupTextItem.

        Lookup Text  # noqa: E501

        :param lookup_text_id: The lookup_text_id of this LookupTextItem.  # noqa: E501
        :type: int
        """

        self._lookup_text_id = lookup_text_id

    @property
    def lookup_id(self):
        """Gets the lookup_id of this LookupTextItem.  # noqa: E501

        Lookup  # noqa: E501

        :return: The lookup_id of this LookupTextItem.  # noqa: E501
        :rtype: int
        """
        return self._lookup_id

    @lookup_id.setter
    def lookup_id(self, lookup_id):
        """Sets the lookup_id of this LookupTextItem.

        Lookup  # noqa: E501

        :param lookup_id: The lookup_id of this LookupTextItem.  # noqa: E501
        :type: int
        """

        self._lookup_id = lookup_id

    @property
    def lookup_text(self):
        """Gets the lookup_text of this LookupTextItem.  # noqa: E501

        Lookup Text  # noqa: E501

        :return: The lookup_text of this LookupTextItem.  # noqa: E501
        :rtype: str
        """
        return self._lookup_text

    @lookup_text.setter
    def lookup_text(self, lookup_text):
        """Sets the lookup_text of this LookupTextItem.

        Lookup Text  # noqa: E501

        :param lookup_text: The lookup_text of this LookupTextItem.  # noqa: E501
        :type: str
        """
        if lookup_text is not None and len(lookup_text) > 1000:
            raise ValueError("Invalid value for `lookup_text`, length must be less than or equal to `1000`")  # noqa: E501

        self._lookup_text = lookup_text

    @property
    def lookup_value(self):
        """Gets the lookup_value of this LookupTextItem.  # noqa: E501

        Lookup Value  # noqa: E501

        :return: The lookup_value of this LookupTextItem.  # noqa: E501
        :rtype: str
        """
        return self._lookup_value

    @lookup_value.setter
    def lookup_value(self, lookup_value):
        """Sets the lookup_value of this LookupTextItem.

        Lookup Value  # noqa: E501

        :param lookup_value: The lookup_value of this LookupTextItem.  # noqa: E501
        :type: str
        """
        if lookup_value is not None and len(lookup_value) > 5000:
            raise ValueError("Invalid value for `lookup_value`, length must be less than or equal to `5000`")  # noqa: E501

        self._lookup_value = lookup_value

    @property
    def date_modified(self):
        """Gets the date_modified of this LookupTextItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this LookupTextItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this LookupTextItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this LookupTextItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LookupTextItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
