# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebEmailTextItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'web_email_text_id': 'int',
        'web_section_id': 'int',
        'email_name': 'str',
        'subject': 'str',
        'body_text': 'str',
        'sql': 'str',
        'security_user_id': 'int',
        'date_created': 'datetime',
        'email_from_address_id': 'int',
        'date_modified': 'str'
    }

    attribute_map = {
        'web_email_text_id': 'WebEmailTextID',
        'web_section_id': 'WebSectionID',
        'email_name': 'EmailName',
        'subject': 'Subject',
        'body_text': 'BodyText',
        'sql': 'SQL',
        'security_user_id': 'SecurityUserID',
        'date_created': 'DateCreated',
        'email_from_address_id': 'EmailFromAddressID',
        'date_modified': 'DateModified'
    }

    def __init__(self, web_email_text_id=None, web_section_id=None, email_name=None, subject=None, body_text=None, sql=None, security_user_id=None, date_created=None, email_from_address_id=None, date_modified=None):  # noqa: E501
        """WebEmailTextItem - a model defined in Swagger"""  # noqa: E501

        self._web_email_text_id = None
        self._web_section_id = None
        self._email_name = None
        self._subject = None
        self._body_text = None
        self._sql = None
        self._security_user_id = None
        self._date_created = None
        self._email_from_address_id = None
        self._date_modified = None
        self.discriminator = None

        if web_email_text_id is not None:
            self.web_email_text_id = web_email_text_id
        if web_section_id is not None:
            self.web_section_id = web_section_id
        if email_name is not None:
            self.email_name = email_name
        if subject is not None:
            self.subject = subject
        if body_text is not None:
            self.body_text = body_text
        if sql is not None:
            self.sql = sql
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if date_created is not None:
            self.date_created = date_created
        if email_from_address_id is not None:
            self.email_from_address_id = email_from_address_id
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def web_email_text_id(self):
        """Gets the web_email_text_id of this WebEmailTextItem.  # noqa: E501

        Web Email Text  # noqa: E501

        :return: The web_email_text_id of this WebEmailTextItem.  # noqa: E501
        :rtype: int
        """
        return self._web_email_text_id

    @web_email_text_id.setter
    def web_email_text_id(self, web_email_text_id):
        """Sets the web_email_text_id of this WebEmailTextItem.

        Web Email Text  # noqa: E501

        :param web_email_text_id: The web_email_text_id of this WebEmailTextItem.  # noqa: E501
        :type: int
        """

        self._web_email_text_id = web_email_text_id

    @property
    def web_section_id(self):
        """Gets the web_section_id of this WebEmailTextItem.  # noqa: E501

        Web Section  # noqa: E501

        :return: The web_section_id of this WebEmailTextItem.  # noqa: E501
        :rtype: int
        """
        return self._web_section_id

    @web_section_id.setter
    def web_section_id(self, web_section_id):
        """Sets the web_section_id of this WebEmailTextItem.

        Web Section  # noqa: E501

        :param web_section_id: The web_section_id of this WebEmailTextItem.  # noqa: E501
        :type: int
        """

        self._web_section_id = web_section_id

    @property
    def email_name(self):
        """Gets the email_name of this WebEmailTextItem.  # noqa: E501

        Email Name  # noqa: E501

        :return: The email_name of this WebEmailTextItem.  # noqa: E501
        :rtype: str
        """
        return self._email_name

    @email_name.setter
    def email_name(self, email_name):
        """Sets the email_name of this WebEmailTextItem.

        Email Name  # noqa: E501

        :param email_name: The email_name of this WebEmailTextItem.  # noqa: E501
        :type: str
        """
        if email_name is not None and len(email_name) > 100:
            raise ValueError("Invalid value for `email_name`, length must be less than or equal to `100`")  # noqa: E501

        self._email_name = email_name

    @property
    def subject(self):
        """Gets the subject of this WebEmailTextItem.  # noqa: E501

        Subject  # noqa: E501

        :return: The subject of this WebEmailTextItem.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this WebEmailTextItem.

        Subject  # noqa: E501

        :param subject: The subject of this WebEmailTextItem.  # noqa: E501
        :type: str
        """
        if subject is not None and len(subject) > 500:
            raise ValueError("Invalid value for `subject`, length must be less than or equal to `500`")  # noqa: E501

        self._subject = subject

    @property
    def body_text(self):
        """Gets the body_text of this WebEmailTextItem.  # noqa: E501

        Body Text  # noqa: E501

        :return: The body_text of this WebEmailTextItem.  # noqa: E501
        :rtype: str
        """
        return self._body_text

    @body_text.setter
    def body_text(self, body_text):
        """Sets the body_text of this WebEmailTextItem.

        Body Text  # noqa: E501

        :param body_text: The body_text of this WebEmailTextItem.  # noqa: E501
        :type: str
        """

        self._body_text = body_text

    @property
    def sql(self):
        """Gets the sql of this WebEmailTextItem.  # noqa: E501

        SQL  # noqa: E501

        :return: The sql of this WebEmailTextItem.  # noqa: E501
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this WebEmailTextItem.

        SQL  # noqa: E501

        :param sql: The sql of this WebEmailTextItem.  # noqa: E501
        :type: str
        """
        if sql is not None and len(sql) > 5000:
            raise ValueError("Invalid value for `sql`, length must be less than or equal to `5000`")  # noqa: E501

        self._sql = sql

    @property
    def security_user_id(self):
        """Gets the security_user_id of this WebEmailTextItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this WebEmailTextItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this WebEmailTextItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this WebEmailTextItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this WebEmailTextItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this WebEmailTextItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this WebEmailTextItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this WebEmailTextItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def email_from_address_id(self):
        """Gets the email_from_address_id of this WebEmailTextItem.  # noqa: E501

        Email From Address  # noqa: E501

        :return: The email_from_address_id of this WebEmailTextItem.  # noqa: E501
        :rtype: int
        """
        return self._email_from_address_id

    @email_from_address_id.setter
    def email_from_address_id(self, email_from_address_id):
        """Sets the email_from_address_id of this WebEmailTextItem.

        Email From Address  # noqa: E501

        :param email_from_address_id: The email_from_address_id of this WebEmailTextItem.  # noqa: E501
        :type: int
        """

        self._email_from_address_id = email_from_address_id

    @property
    def date_modified(self):
        """Gets the date_modified of this WebEmailTextItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this WebEmailTextItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this WebEmailTextItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this WebEmailTextItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebEmailTextItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
