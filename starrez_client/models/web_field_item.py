# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebFieldItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'web_field_id': 'int',
        'web_block_id': 'int',
        'display': 'bool',
        'required': 'bool',
        'required_index': 'str',
        'field_order': 'int',
        'table_name': 'str',
        'field_name': 'str',
        'web_field_data_type_enum': 'str',
        'data_length': 'int',
        'default_value': 'str',
        'use_default_only': 'bool',
        'date_range_min': 'str',
        'date_range_max': 'str',
        'lookup_table_name': 'str',
        'lookup_table_filter': 'str',
        'lookup_table_order_by': 'str',
        'lookup_field_data_name': 'str',
        'lookup_field_display_name': 'str',
        'field_display_name': 'str',
        'field_display_comments': 'str',
        'web_field_control_type_enum': 'str',
        'action_event': 'str',
        'action_function': 'str',
        'data_bound': 'bool',
        'reg_ex': 'str',
        'allow_modify': 'bool',
        'css_class': 'str',
        'security_user_id': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'web_field_id': 'WebFieldID',
        'web_block_id': 'WebBlockID',
        'display': 'Display',
        'required': 'Required',
        'required_index': 'RequiredIndex',
        'field_order': 'FieldOrder',
        'table_name': 'TableName',
        'field_name': 'FieldName',
        'web_field_data_type_enum': 'WebFieldDataTypeEnum',
        'data_length': 'DataLength',
        'default_value': 'DefaultValue',
        'use_default_only': 'UseDefaultOnly',
        'date_range_min': 'DateRangeMin',
        'date_range_max': 'DateRangeMax',
        'lookup_table_name': 'LookupTableName',
        'lookup_table_filter': 'LookupTableFilter',
        'lookup_table_order_by': 'LookupTableOrderBy',
        'lookup_field_data_name': 'LookupFieldDataName',
        'lookup_field_display_name': 'LookupFieldDisplayName',
        'field_display_name': 'FieldDisplayName',
        'field_display_comments': 'FieldDisplayComments',
        'web_field_control_type_enum': 'WebFieldControlTypeEnum',
        'action_event': 'ActionEvent',
        'action_function': 'ActionFunction',
        'data_bound': 'DataBound',
        'reg_ex': 'RegEx',
        'allow_modify': 'AllowModify',
        'css_class': 'CSSClass',
        'security_user_id': 'SecurityUserID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, web_field_id=None, web_block_id=None, display=None, required=None, required_index=None, field_order=None, table_name=None, field_name=None, web_field_data_type_enum=None, data_length=None, default_value=None, use_default_only=None, date_range_min=None, date_range_max=None, lookup_table_name=None, lookup_table_filter=None, lookup_table_order_by=None, lookup_field_data_name=None, lookup_field_display_name=None, field_display_name=None, field_display_comments=None, web_field_control_type_enum=None, action_event=None, action_function=None, data_bound=None, reg_ex=None, allow_modify=None, css_class=None, security_user_id=None, date_created=None, date_modified=None):  # noqa: E501
        """WebFieldItem - a model defined in Swagger"""  # noqa: E501

        self._web_field_id = None
        self._web_block_id = None
        self._display = None
        self._required = None
        self._required_index = None
        self._field_order = None
        self._table_name = None
        self._field_name = None
        self._web_field_data_type_enum = None
        self._data_length = None
        self._default_value = None
        self._use_default_only = None
        self._date_range_min = None
        self._date_range_max = None
        self._lookup_table_name = None
        self._lookup_table_filter = None
        self._lookup_table_order_by = None
        self._lookup_field_data_name = None
        self._lookup_field_display_name = None
        self._field_display_name = None
        self._field_display_comments = None
        self._web_field_control_type_enum = None
        self._action_event = None
        self._action_function = None
        self._data_bound = None
        self._reg_ex = None
        self._allow_modify = None
        self._css_class = None
        self._security_user_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if web_field_id is not None:
            self.web_field_id = web_field_id
        if web_block_id is not None:
            self.web_block_id = web_block_id
        if display is not None:
            self.display = display
        if required is not None:
            self.required = required
        if required_index is not None:
            self.required_index = required_index
        if field_order is not None:
            self.field_order = field_order
        if table_name is not None:
            self.table_name = table_name
        if field_name is not None:
            self.field_name = field_name
        if web_field_data_type_enum is not None:
            self.web_field_data_type_enum = web_field_data_type_enum
        if data_length is not None:
            self.data_length = data_length
        if default_value is not None:
            self.default_value = default_value
        if use_default_only is not None:
            self.use_default_only = use_default_only
        if date_range_min is not None:
            self.date_range_min = date_range_min
        if date_range_max is not None:
            self.date_range_max = date_range_max
        if lookup_table_name is not None:
            self.lookup_table_name = lookup_table_name
        if lookup_table_filter is not None:
            self.lookup_table_filter = lookup_table_filter
        if lookup_table_order_by is not None:
            self.lookup_table_order_by = lookup_table_order_by
        if lookup_field_data_name is not None:
            self.lookup_field_data_name = lookup_field_data_name
        if lookup_field_display_name is not None:
            self.lookup_field_display_name = lookup_field_display_name
        if field_display_name is not None:
            self.field_display_name = field_display_name
        if field_display_comments is not None:
            self.field_display_comments = field_display_comments
        if web_field_control_type_enum is not None:
            self.web_field_control_type_enum = web_field_control_type_enum
        if action_event is not None:
            self.action_event = action_event
        if action_function is not None:
            self.action_function = action_function
        if data_bound is not None:
            self.data_bound = data_bound
        if reg_ex is not None:
            self.reg_ex = reg_ex
        if allow_modify is not None:
            self.allow_modify = allow_modify
        if css_class is not None:
            self.css_class = css_class
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def web_field_id(self):
        """Gets the web_field_id of this WebFieldItem.  # noqa: E501

        Web Field  # noqa: E501

        :return: The web_field_id of this WebFieldItem.  # noqa: E501
        :rtype: int
        """
        return self._web_field_id

    @web_field_id.setter
    def web_field_id(self, web_field_id):
        """Sets the web_field_id of this WebFieldItem.

        Web Field  # noqa: E501

        :param web_field_id: The web_field_id of this WebFieldItem.  # noqa: E501
        :type: int
        """

        self._web_field_id = web_field_id

    @property
    def web_block_id(self):
        """Gets the web_block_id of this WebFieldItem.  # noqa: E501

        Web Block  # noqa: E501

        :return: The web_block_id of this WebFieldItem.  # noqa: E501
        :rtype: int
        """
        return self._web_block_id

    @web_block_id.setter
    def web_block_id(self, web_block_id):
        """Sets the web_block_id of this WebFieldItem.

        Web Block  # noqa: E501

        :param web_block_id: The web_block_id of this WebFieldItem.  # noqa: E501
        :type: int
        """

        self._web_block_id = web_block_id

    @property
    def display(self):
        """Gets the display of this WebFieldItem.  # noqa: E501

        Display  # noqa: E501

        :return: The display of this WebFieldItem.  # noqa: E501
        :rtype: bool
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this WebFieldItem.

        Display  # noqa: E501

        :param display: The display of this WebFieldItem.  # noqa: E501
        :type: bool
        """

        self._display = display

    @property
    def required(self):
        """Gets the required of this WebFieldItem.  # noqa: E501

        Required  # noqa: E501

        :return: The required of this WebFieldItem.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this WebFieldItem.

        Required  # noqa: E501

        :param required: The required of this WebFieldItem.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def required_index(self):
        """Gets the required_index of this WebFieldItem.  # noqa: E501

        Required Index  # noqa: E501

        :return: The required_index of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._required_index

    @required_index.setter
    def required_index(self, required_index):
        """Sets the required_index of this WebFieldItem.

        Required Index  # noqa: E501

        :param required_index: The required_index of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if required_index is not None and len(required_index) > 20:
            raise ValueError("Invalid value for `required_index`, length must be less than or equal to `20`")  # noqa: E501

        self._required_index = required_index

    @property
    def field_order(self):
        """Gets the field_order of this WebFieldItem.  # noqa: E501

        Field Order  # noqa: E501

        :return: The field_order of this WebFieldItem.  # noqa: E501
        :rtype: int
        """
        return self._field_order

    @field_order.setter
    def field_order(self, field_order):
        """Sets the field_order of this WebFieldItem.

        Field Order  # noqa: E501

        :param field_order: The field_order of this WebFieldItem.  # noqa: E501
        :type: int
        """

        self._field_order = field_order

    @property
    def table_name(self):
        """Gets the table_name of this WebFieldItem.  # noqa: E501

        Table Name  # noqa: E501

        :return: The table_name of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this WebFieldItem.

        Table Name  # noqa: E501

        :param table_name: The table_name of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if table_name is not None and len(table_name) > 100:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `100`")  # noqa: E501

        self._table_name = table_name

    @property
    def field_name(self):
        """Gets the field_name of this WebFieldItem.  # noqa: E501

        Field Name  # noqa: E501

        :return: The field_name of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this WebFieldItem.

        Field Name  # noqa: E501

        :param field_name: The field_name of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if field_name is not None and len(field_name) > 100:
            raise ValueError("Invalid value for `field_name`, length must be less than or equal to `100`")  # noqa: E501

        self._field_name = field_name

    @property
    def web_field_data_type_enum(self):
        """Gets the web_field_data_type_enum of this WebFieldItem.  # noqa: E501

        Web Field Data Type  # noqa: E501

        :return: The web_field_data_type_enum of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._web_field_data_type_enum

    @web_field_data_type_enum.setter
    def web_field_data_type_enum(self, web_field_data_type_enum):
        """Sets the web_field_data_type_enum of this WebFieldItem.

        Web Field Data Type  # noqa: E501

        :param web_field_data_type_enum: The web_field_data_type_enum of this WebFieldItem.  # noqa: E501
        :type: str
        """

        self._web_field_data_type_enum = web_field_data_type_enum

    @property
    def data_length(self):
        """Gets the data_length of this WebFieldItem.  # noqa: E501

        Data Length  # noqa: E501

        :return: The data_length of this WebFieldItem.  # noqa: E501
        :rtype: int
        """
        return self._data_length

    @data_length.setter
    def data_length(self, data_length):
        """Sets the data_length of this WebFieldItem.

        Data Length  # noqa: E501

        :param data_length: The data_length of this WebFieldItem.  # noqa: E501
        :type: int
        """

        self._data_length = data_length

    @property
    def default_value(self):
        """Gets the default_value of this WebFieldItem.  # noqa: E501

        Default Value  # noqa: E501

        :return: The default_value of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this WebFieldItem.

        Default Value  # noqa: E501

        :param default_value: The default_value of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if default_value is not None and len(default_value) > 200:
            raise ValueError("Invalid value for `default_value`, length must be less than or equal to `200`")  # noqa: E501

        self._default_value = default_value

    @property
    def use_default_only(self):
        """Gets the use_default_only of this WebFieldItem.  # noqa: E501

        Use Default Only  # noqa: E501

        :return: The use_default_only of this WebFieldItem.  # noqa: E501
        :rtype: bool
        """
        return self._use_default_only

    @use_default_only.setter
    def use_default_only(self, use_default_only):
        """Sets the use_default_only of this WebFieldItem.

        Use Default Only  # noqa: E501

        :param use_default_only: The use_default_only of this WebFieldItem.  # noqa: E501
        :type: bool
        """

        self._use_default_only = use_default_only

    @property
    def date_range_min(self):
        """Gets the date_range_min of this WebFieldItem.  # noqa: E501

        Date Range Min  # noqa: E501

        :return: The date_range_min of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._date_range_min

    @date_range_min.setter
    def date_range_min(self, date_range_min):
        """Sets the date_range_min of this WebFieldItem.

        Date Range Min  # noqa: E501

        :param date_range_min: The date_range_min of this WebFieldItem.  # noqa: E501
        :type: str
        """

        self._date_range_min = date_range_min

    @property
    def date_range_max(self):
        """Gets the date_range_max of this WebFieldItem.  # noqa: E501

        Date Range Max  # noqa: E501

        :return: The date_range_max of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._date_range_max

    @date_range_max.setter
    def date_range_max(self, date_range_max):
        """Sets the date_range_max of this WebFieldItem.

        Date Range Max  # noqa: E501

        :param date_range_max: The date_range_max of this WebFieldItem.  # noqa: E501
        :type: str
        """

        self._date_range_max = date_range_max

    @property
    def lookup_table_name(self):
        """Gets the lookup_table_name of this WebFieldItem.  # noqa: E501

        Lookup Table Name  # noqa: E501

        :return: The lookup_table_name of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._lookup_table_name

    @lookup_table_name.setter
    def lookup_table_name(self, lookup_table_name):
        """Sets the lookup_table_name of this WebFieldItem.

        Lookup Table Name  # noqa: E501

        :param lookup_table_name: The lookup_table_name of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if lookup_table_name is not None and len(lookup_table_name) > 100:
            raise ValueError("Invalid value for `lookup_table_name`, length must be less than or equal to `100`")  # noqa: E501

        self._lookup_table_name = lookup_table_name

    @property
    def lookup_table_filter(self):
        """Gets the lookup_table_filter of this WebFieldItem.  # noqa: E501

        Lookup Table Filter  # noqa: E501

        :return: The lookup_table_filter of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._lookup_table_filter

    @lookup_table_filter.setter
    def lookup_table_filter(self, lookup_table_filter):
        """Sets the lookup_table_filter of this WebFieldItem.

        Lookup Table Filter  # noqa: E501

        :param lookup_table_filter: The lookup_table_filter of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if lookup_table_filter is not None and len(lookup_table_filter) > 500:
            raise ValueError("Invalid value for `lookup_table_filter`, length must be less than or equal to `500`")  # noqa: E501

        self._lookup_table_filter = lookup_table_filter

    @property
    def lookup_table_order_by(self):
        """Gets the lookup_table_order_by of this WebFieldItem.  # noqa: E501

        Lookup Table Order By  # noqa: E501

        :return: The lookup_table_order_by of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._lookup_table_order_by

    @lookup_table_order_by.setter
    def lookup_table_order_by(self, lookup_table_order_by):
        """Sets the lookup_table_order_by of this WebFieldItem.

        Lookup Table Order By  # noqa: E501

        :param lookup_table_order_by: The lookup_table_order_by of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if lookup_table_order_by is not None and len(lookup_table_order_by) > 200:
            raise ValueError("Invalid value for `lookup_table_order_by`, length must be less than or equal to `200`")  # noqa: E501

        self._lookup_table_order_by = lookup_table_order_by

    @property
    def lookup_field_data_name(self):
        """Gets the lookup_field_data_name of this WebFieldItem.  # noqa: E501

        Lookup Field Data Name  # noqa: E501

        :return: The lookup_field_data_name of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._lookup_field_data_name

    @lookup_field_data_name.setter
    def lookup_field_data_name(self, lookup_field_data_name):
        """Sets the lookup_field_data_name of this WebFieldItem.

        Lookup Field Data Name  # noqa: E501

        :param lookup_field_data_name: The lookup_field_data_name of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if lookup_field_data_name is not None and len(lookup_field_data_name) > 100:
            raise ValueError("Invalid value for `lookup_field_data_name`, length must be less than or equal to `100`")  # noqa: E501

        self._lookup_field_data_name = lookup_field_data_name

    @property
    def lookup_field_display_name(self):
        """Gets the lookup_field_display_name of this WebFieldItem.  # noqa: E501

        Lookup Field Display Name  # noqa: E501

        :return: The lookup_field_display_name of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._lookup_field_display_name

    @lookup_field_display_name.setter
    def lookup_field_display_name(self, lookup_field_display_name):
        """Sets the lookup_field_display_name of this WebFieldItem.

        Lookup Field Display Name  # noqa: E501

        :param lookup_field_display_name: The lookup_field_display_name of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if lookup_field_display_name is not None and len(lookup_field_display_name) > 100:
            raise ValueError("Invalid value for `lookup_field_display_name`, length must be less than or equal to `100`")  # noqa: E501

        self._lookup_field_display_name = lookup_field_display_name

    @property
    def field_display_name(self):
        """Gets the field_display_name of this WebFieldItem.  # noqa: E501

        Field Display Name  # noqa: E501

        :return: The field_display_name of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._field_display_name

    @field_display_name.setter
    def field_display_name(self, field_display_name):
        """Sets the field_display_name of this WebFieldItem.

        Field Display Name  # noqa: E501

        :param field_display_name: The field_display_name of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if field_display_name is not None and len(field_display_name) > 100:
            raise ValueError("Invalid value for `field_display_name`, length must be less than or equal to `100`")  # noqa: E501

        self._field_display_name = field_display_name

    @property
    def field_display_comments(self):
        """Gets the field_display_comments of this WebFieldItem.  # noqa: E501

        Field Display Comments  # noqa: E501

        :return: The field_display_comments of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._field_display_comments

    @field_display_comments.setter
    def field_display_comments(self, field_display_comments):
        """Sets the field_display_comments of this WebFieldItem.

        Field Display Comments  # noqa: E501

        :param field_display_comments: The field_display_comments of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if field_display_comments is not None and len(field_display_comments) > 500:
            raise ValueError("Invalid value for `field_display_comments`, length must be less than or equal to `500`")  # noqa: E501

        self._field_display_comments = field_display_comments

    @property
    def web_field_control_type_enum(self):
        """Gets the web_field_control_type_enum of this WebFieldItem.  # noqa: E501

        Web Field Control Type  # noqa: E501

        :return: The web_field_control_type_enum of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._web_field_control_type_enum

    @web_field_control_type_enum.setter
    def web_field_control_type_enum(self, web_field_control_type_enum):
        """Sets the web_field_control_type_enum of this WebFieldItem.

        Web Field Control Type  # noqa: E501

        :param web_field_control_type_enum: The web_field_control_type_enum of this WebFieldItem.  # noqa: E501
        :type: str
        """

        self._web_field_control_type_enum = web_field_control_type_enum

    @property
    def action_event(self):
        """Gets the action_event of this WebFieldItem.  # noqa: E501

        Action Event  # noqa: E501

        :return: The action_event of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._action_event

    @action_event.setter
    def action_event(self, action_event):
        """Sets the action_event of this WebFieldItem.

        Action Event  # noqa: E501

        :param action_event: The action_event of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if action_event is not None and len(action_event) > 50:
            raise ValueError("Invalid value for `action_event`, length must be less than or equal to `50`")  # noqa: E501

        self._action_event = action_event

    @property
    def action_function(self):
        """Gets the action_function of this WebFieldItem.  # noqa: E501

        Action Function  # noqa: E501

        :return: The action_function of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._action_function

    @action_function.setter
    def action_function(self, action_function):
        """Sets the action_function of this WebFieldItem.

        Action Function  # noqa: E501

        :param action_function: The action_function of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if action_function is not None and len(action_function) > 1500:
            raise ValueError("Invalid value for `action_function`, length must be less than or equal to `1500`")  # noqa: E501

        self._action_function = action_function

    @property
    def data_bound(self):
        """Gets the data_bound of this WebFieldItem.  # noqa: E501

        Data Bound  # noqa: E501

        :return: The data_bound of this WebFieldItem.  # noqa: E501
        :rtype: bool
        """
        return self._data_bound

    @data_bound.setter
    def data_bound(self, data_bound):
        """Sets the data_bound of this WebFieldItem.

        Data Bound  # noqa: E501

        :param data_bound: The data_bound of this WebFieldItem.  # noqa: E501
        :type: bool
        """

        self._data_bound = data_bound

    @property
    def reg_ex(self):
        """Gets the reg_ex of this WebFieldItem.  # noqa: E501

        Reg Ex  # noqa: E501

        :return: The reg_ex of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._reg_ex

    @reg_ex.setter
    def reg_ex(self, reg_ex):
        """Sets the reg_ex of this WebFieldItem.

        Reg Ex  # noqa: E501

        :param reg_ex: The reg_ex of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if reg_ex is not None and len(reg_ex) > 100:
            raise ValueError("Invalid value for `reg_ex`, length must be less than or equal to `100`")  # noqa: E501

        self._reg_ex = reg_ex

    @property
    def allow_modify(self):
        """Gets the allow_modify of this WebFieldItem.  # noqa: E501

        Allow Modify  # noqa: E501

        :return: The allow_modify of this WebFieldItem.  # noqa: E501
        :rtype: bool
        """
        return self._allow_modify

    @allow_modify.setter
    def allow_modify(self, allow_modify):
        """Sets the allow_modify of this WebFieldItem.

        Allow Modify  # noqa: E501

        :param allow_modify: The allow_modify of this WebFieldItem.  # noqa: E501
        :type: bool
        """

        self._allow_modify = allow_modify

    @property
    def css_class(self):
        """Gets the css_class of this WebFieldItem.  # noqa: E501

        CSS Class  # noqa: E501

        :return: The css_class of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._css_class

    @css_class.setter
    def css_class(self, css_class):
        """Sets the css_class of this WebFieldItem.

        CSS Class  # noqa: E501

        :param css_class: The css_class of this WebFieldItem.  # noqa: E501
        :type: str
        """
        if css_class is not None and len(css_class) > 100:
            raise ValueError("Invalid value for `css_class`, length must be less than or equal to `100`")  # noqa: E501

        self._css_class = css_class

    @property
    def security_user_id(self):
        """Gets the security_user_id of this WebFieldItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this WebFieldItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this WebFieldItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this WebFieldItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this WebFieldItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this WebFieldItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this WebFieldItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this WebFieldItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this WebFieldItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this WebFieldItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this WebFieldItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this WebFieldItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebFieldItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
