# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebLogItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'web_log_id': 'int',
        'log_date_time': 'str',
        'machine_name': 'str',
        'base_url': 'str',
        'duration': 'int',
        'entry_id': 'int',
        'active_users': 'int',
        'logged_in_users': 'int',
        'web_section_id': 'int',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'web_log_id': 'WebLogID',
        'log_date_time': 'LogDateTime',
        'machine_name': 'MachineName',
        'base_url': 'BaseURL',
        'duration': 'Duration',
        'entry_id': 'EntryID',
        'active_users': 'ActiveUsers',
        'logged_in_users': 'LoggedInUsers',
        'web_section_id': 'WebSectionID',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, web_log_id=None, log_date_time=None, machine_name=None, base_url=None, duration=None, entry_id=None, active_users=None, logged_in_users=None, web_section_id=None, comments=None, date_modified=None):  # noqa: E501
        """WebLogItem - a model defined in Swagger"""  # noqa: E501

        self._web_log_id = None
        self._log_date_time = None
        self._machine_name = None
        self._base_url = None
        self._duration = None
        self._entry_id = None
        self._active_users = None
        self._logged_in_users = None
        self._web_section_id = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if web_log_id is not None:
            self.web_log_id = web_log_id
        if log_date_time is not None:
            self.log_date_time = log_date_time
        if machine_name is not None:
            self.machine_name = machine_name
        if base_url is not None:
            self.base_url = base_url
        if duration is not None:
            self.duration = duration
        if entry_id is not None:
            self.entry_id = entry_id
        if active_users is not None:
            self.active_users = active_users
        if logged_in_users is not None:
            self.logged_in_users = logged_in_users
        if web_section_id is not None:
            self.web_section_id = web_section_id
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def web_log_id(self):
        """Gets the web_log_id of this WebLogItem.  # noqa: E501

        Web Log  # noqa: E501

        :return: The web_log_id of this WebLogItem.  # noqa: E501
        :rtype: int
        """
        return self._web_log_id

    @web_log_id.setter
    def web_log_id(self, web_log_id):
        """Sets the web_log_id of this WebLogItem.

        Web Log  # noqa: E501

        :param web_log_id: The web_log_id of this WebLogItem.  # noqa: E501
        :type: int
        """

        self._web_log_id = web_log_id

    @property
    def log_date_time(self):
        """Gets the log_date_time of this WebLogItem.  # noqa: E501

        Log Date Time  # noqa: E501

        :return: The log_date_time of this WebLogItem.  # noqa: E501
        :rtype: str
        """
        return self._log_date_time

    @log_date_time.setter
    def log_date_time(self, log_date_time):
        """Sets the log_date_time of this WebLogItem.

        Log Date Time  # noqa: E501

        :param log_date_time: The log_date_time of this WebLogItem.  # noqa: E501
        :type: str
        """

        self._log_date_time = log_date_time

    @property
    def machine_name(self):
        """Gets the machine_name of this WebLogItem.  # noqa: E501

        Machine Name  # noqa: E501

        :return: The machine_name of this WebLogItem.  # noqa: E501
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this WebLogItem.

        Machine Name  # noqa: E501

        :param machine_name: The machine_name of this WebLogItem.  # noqa: E501
        :type: str
        """
        if machine_name is not None and len(machine_name) > 100:
            raise ValueError("Invalid value for `machine_name`, length must be less than or equal to `100`")  # noqa: E501

        self._machine_name = machine_name

    @property
    def base_url(self):
        """Gets the base_url of this WebLogItem.  # noqa: E501

        Base URL  # noqa: E501

        :return: The base_url of this WebLogItem.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this WebLogItem.

        Base URL  # noqa: E501

        :param base_url: The base_url of this WebLogItem.  # noqa: E501
        :type: str
        """
        if base_url is not None and len(base_url) > 100:
            raise ValueError("Invalid value for `base_url`, length must be less than or equal to `100`")  # noqa: E501

        self._base_url = base_url

    @property
    def duration(self):
        """Gets the duration of this WebLogItem.  # noqa: E501

        Duration  # noqa: E501

        :return: The duration of this WebLogItem.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this WebLogItem.

        Duration  # noqa: E501

        :param duration: The duration of this WebLogItem.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def entry_id(self):
        """Gets the entry_id of this WebLogItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this WebLogItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this WebLogItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this WebLogItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def active_users(self):
        """Gets the active_users of this WebLogItem.  # noqa: E501

        Active Users  # noqa: E501

        :return: The active_users of this WebLogItem.  # noqa: E501
        :rtype: int
        """
        return self._active_users

    @active_users.setter
    def active_users(self, active_users):
        """Sets the active_users of this WebLogItem.

        Active Users  # noqa: E501

        :param active_users: The active_users of this WebLogItem.  # noqa: E501
        :type: int
        """

        self._active_users = active_users

    @property
    def logged_in_users(self):
        """Gets the logged_in_users of this WebLogItem.  # noqa: E501

        Logged In Users  # noqa: E501

        :return: The logged_in_users of this WebLogItem.  # noqa: E501
        :rtype: int
        """
        return self._logged_in_users

    @logged_in_users.setter
    def logged_in_users(self, logged_in_users):
        """Sets the logged_in_users of this WebLogItem.

        Logged In Users  # noqa: E501

        :param logged_in_users: The logged_in_users of this WebLogItem.  # noqa: E501
        :type: int
        """

        self._logged_in_users = logged_in_users

    @property
    def web_section_id(self):
        """Gets the web_section_id of this WebLogItem.  # noqa: E501

        Web Section  # noqa: E501

        :return: The web_section_id of this WebLogItem.  # noqa: E501
        :rtype: int
        """
        return self._web_section_id

    @web_section_id.setter
    def web_section_id(self, web_section_id):
        """Sets the web_section_id of this WebLogItem.

        Web Section  # noqa: E501

        :param web_section_id: The web_section_id of this WebLogItem.  # noqa: E501
        :type: int
        """

        self._web_section_id = web_section_id

    @property
    def comments(self):
        """Gets the comments of this WebLogItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this WebLogItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WebLogItem.

        Comments  # noqa: E501

        :param comments: The comments of this WebLogItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 1000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `1000`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this WebLogItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this WebLogItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this WebLogItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this WebLogItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebLogItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
