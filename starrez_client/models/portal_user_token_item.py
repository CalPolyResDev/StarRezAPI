# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortalUserTokenItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portal_user_token_id': 'int',
        'entry_id': 'int',
        'portal_site_id': 'int',
        'ip_address': 'str',
        'token': 'str',
        'date_created': 'datetime',
        'expiry_date': 'datetime',
        'auth_provider_key': 'str',
        'machine_name': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'portal_user_token_id': 'PortalUserTokenID',
        'entry_id': 'EntryID',
        'portal_site_id': 'PortalSiteID',
        'ip_address': 'IPAddress',
        'token': 'Token',
        'date_created': 'DateCreated',
        'expiry_date': 'ExpiryDate',
        'auth_provider_key': 'AuthProviderKey',
        'machine_name': 'MachineName',
        'date_modified': 'DateModified'
    }

    def __init__(self, portal_user_token_id=None, entry_id=None, portal_site_id=None, ip_address=None, token=None, date_created=None, expiry_date=None, auth_provider_key=None, machine_name=None, date_modified=None):  # noqa: E501
        """PortalUserTokenItem - a model defined in Swagger"""  # noqa: E501

        self._portal_user_token_id = None
        self._entry_id = None
        self._portal_site_id = None
        self._ip_address = None
        self._token = None
        self._date_created = None
        self._expiry_date = None
        self._auth_provider_key = None
        self._machine_name = None
        self._date_modified = None
        self.discriminator = None

        if portal_user_token_id is not None:
            self.portal_user_token_id = portal_user_token_id
        if entry_id is not None:
            self.entry_id = entry_id
        if portal_site_id is not None:
            self.portal_site_id = portal_site_id
        if ip_address is not None:
            self.ip_address = ip_address
        if token is not None:
            self.token = token
        if date_created is not None:
            self.date_created = date_created
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if auth_provider_key is not None:
            self.auth_provider_key = auth_provider_key
        if machine_name is not None:
            self.machine_name = machine_name
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def portal_user_token_id(self):
        """Gets the portal_user_token_id of this PortalUserTokenItem.  # noqa: E501

        Portal User Token  # noqa: E501

        :return: The portal_user_token_id of this PortalUserTokenItem.  # noqa: E501
        :rtype: int
        """
        return self._portal_user_token_id

    @portal_user_token_id.setter
    def portal_user_token_id(self, portal_user_token_id):
        """Sets the portal_user_token_id of this PortalUserTokenItem.

        Portal User Token  # noqa: E501

        :param portal_user_token_id: The portal_user_token_id of this PortalUserTokenItem.  # noqa: E501
        :type: int
        """

        self._portal_user_token_id = portal_user_token_id

    @property
    def entry_id(self):
        """Gets the entry_id of this PortalUserTokenItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this PortalUserTokenItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this PortalUserTokenItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this PortalUserTokenItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def portal_site_id(self):
        """Gets the portal_site_id of this PortalUserTokenItem.  # noqa: E501

        Portal Site  # noqa: E501

        :return: The portal_site_id of this PortalUserTokenItem.  # noqa: E501
        :rtype: int
        """
        return self._portal_site_id

    @portal_site_id.setter
    def portal_site_id(self, portal_site_id):
        """Sets the portal_site_id of this PortalUserTokenItem.

        Portal Site  # noqa: E501

        :param portal_site_id: The portal_site_id of this PortalUserTokenItem.  # noqa: E501
        :type: int
        """

        self._portal_site_id = portal_site_id

    @property
    def ip_address(self):
        """Gets the ip_address of this PortalUserTokenItem.  # noqa: E501

        IP Address  # noqa: E501

        :return: The ip_address of this PortalUserTokenItem.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this PortalUserTokenItem.

        IP Address  # noqa: E501

        :param ip_address: The ip_address of this PortalUserTokenItem.  # noqa: E501
        :type: str
        """
        if ip_address is not None and len(ip_address) > 40:
            raise ValueError("Invalid value for `ip_address`, length must be less than or equal to `40`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def token(self):
        """Gets the token of this PortalUserTokenItem.  # noqa: E501

        Token  # noqa: E501

        :return: The token of this PortalUserTokenItem.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PortalUserTokenItem.

        Token  # noqa: E501

        :param token: The token of this PortalUserTokenItem.  # noqa: E501
        :type: str
        """
        if token is not None and len(token) > 50:
            raise ValueError("Invalid value for `token`, length must be less than or equal to `50`")  # noqa: E501

        self._token = token

    @property
    def date_created(self):
        """Gets the date_created of this PortalUserTokenItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this PortalUserTokenItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this PortalUserTokenItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this PortalUserTokenItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def expiry_date(self):
        """Gets the expiry_date of this PortalUserTokenItem.  # noqa: E501

        Expiry Date  # noqa: E501

        :return: The expiry_date of this PortalUserTokenItem.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this PortalUserTokenItem.

        Expiry Date  # noqa: E501

        :param expiry_date: The expiry_date of this PortalUserTokenItem.  # noqa: E501
        :type: datetime
        """

        self._expiry_date = expiry_date

    @property
    def auth_provider_key(self):
        """Gets the auth_provider_key of this PortalUserTokenItem.  # noqa: E501

        Auth Provider Key  # noqa: E501

        :return: The auth_provider_key of this PortalUserTokenItem.  # noqa: E501
        :rtype: str
        """
        return self._auth_provider_key

    @auth_provider_key.setter
    def auth_provider_key(self, auth_provider_key):
        """Sets the auth_provider_key of this PortalUserTokenItem.

        Auth Provider Key  # noqa: E501

        :param auth_provider_key: The auth_provider_key of this PortalUserTokenItem.  # noqa: E501
        :type: str
        """
        if auth_provider_key is not None and len(auth_provider_key) > 255:
            raise ValueError("Invalid value for `auth_provider_key`, length must be less than or equal to `255`")  # noqa: E501

        self._auth_provider_key = auth_provider_key

    @property
    def machine_name(self):
        """Gets the machine_name of this PortalUserTokenItem.  # noqa: E501

        Machine Name  # noqa: E501

        :return: The machine_name of this PortalUserTokenItem.  # noqa: E501
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this PortalUserTokenItem.

        Machine Name  # noqa: E501

        :param machine_name: The machine_name of this PortalUserTokenItem.  # noqa: E501
        :type: str
        """
        if machine_name is not None and len(machine_name) > 200:
            raise ValueError("Invalid value for `machine_name`, length must be less than or equal to `200`")  # noqa: E501

        self._machine_name = machine_name

    @property
    def date_modified(self):
        """Gets the date_modified of this PortalUserTokenItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this PortalUserTokenItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this PortalUserTokenItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this PortalUserTokenItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortalUserTokenItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
