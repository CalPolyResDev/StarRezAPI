# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomFieldDefinitionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_field_definition_id': 'int',
        'table_name': 'str',
        'field_data_type_enum': 'str',
        'description': 'str',
        'code': 'str',
        'custom_field_order': 'int',
        'custom_field_group': 'str',
        'custom_field_section': 'str',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'custom_field_definition_id': 'CustomFieldDefinitionID',
        'table_name': 'TableName',
        'field_data_type_enum': 'FieldDataTypeEnum',
        'description': 'Description',
        'code': 'Code',
        'custom_field_order': 'CustomFieldOrder',
        'custom_field_group': 'CustomFieldGroup',
        'custom_field_section': 'CustomFieldSection',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, custom_field_definition_id=None, table_name=None, field_data_type_enum=None, description=None, code=None, custom_field_order=None, custom_field_group=None, custom_field_section=None, comments=None, date_modified=None):  # noqa: E501
        """CustomFieldDefinitionItem - a model defined in Swagger"""  # noqa: E501

        self._custom_field_definition_id = None
        self._table_name = None
        self._field_data_type_enum = None
        self._description = None
        self._code = None
        self._custom_field_order = None
        self._custom_field_group = None
        self._custom_field_section = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if custom_field_definition_id is not None:
            self.custom_field_definition_id = custom_field_definition_id
        if table_name is not None:
            self.table_name = table_name
        if field_data_type_enum is not None:
            self.field_data_type_enum = field_data_type_enum
        if description is not None:
            self.description = description
        if code is not None:
            self.code = code
        if custom_field_order is not None:
            self.custom_field_order = custom_field_order
        if custom_field_group is not None:
            self.custom_field_group = custom_field_group
        if custom_field_section is not None:
            self.custom_field_section = custom_field_section
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def custom_field_definition_id(self):
        """Gets the custom_field_definition_id of this CustomFieldDefinitionItem.  # noqa: E501

        Custom Field Definition  # noqa: E501

        :return: The custom_field_definition_id of this CustomFieldDefinitionItem.  # noqa: E501
        :rtype: int
        """
        return self._custom_field_definition_id

    @custom_field_definition_id.setter
    def custom_field_definition_id(self, custom_field_definition_id):
        """Sets the custom_field_definition_id of this CustomFieldDefinitionItem.

        Custom Field Definition  # noqa: E501

        :param custom_field_definition_id: The custom_field_definition_id of this CustomFieldDefinitionItem.  # noqa: E501
        :type: int
        """

        self._custom_field_definition_id = custom_field_definition_id

    @property
    def table_name(self):
        """Gets the table_name of this CustomFieldDefinitionItem.  # noqa: E501

        Table Name  # noqa: E501

        :return: The table_name of this CustomFieldDefinitionItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this CustomFieldDefinitionItem.

        Table Name  # noqa: E501

        :param table_name: The table_name of this CustomFieldDefinitionItem.  # noqa: E501
        :type: str
        """
        if table_name is not None and len(table_name) > 50:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `50`")  # noqa: E501

        self._table_name = table_name

    @property
    def field_data_type_enum(self):
        """Gets the field_data_type_enum of this CustomFieldDefinitionItem.  # noqa: E501

        Field Data Type  # noqa: E501

        :return: The field_data_type_enum of this CustomFieldDefinitionItem.  # noqa: E501
        :rtype: str
        """
        return self._field_data_type_enum

    @field_data_type_enum.setter
    def field_data_type_enum(self, field_data_type_enum):
        """Sets the field_data_type_enum of this CustomFieldDefinitionItem.

        Field Data Type  # noqa: E501

        :param field_data_type_enum: The field_data_type_enum of this CustomFieldDefinitionItem.  # noqa: E501
        :type: str
        """

        self._field_data_type_enum = field_data_type_enum

    @property
    def description(self):
        """Gets the description of this CustomFieldDefinitionItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this CustomFieldDefinitionItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomFieldDefinitionItem.

        Description  # noqa: E501

        :param description: The description of this CustomFieldDefinitionItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 50:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `50`")  # noqa: E501

        self._description = description

    @property
    def code(self):
        """Gets the code of this CustomFieldDefinitionItem.  # noqa: E501

        Code  # noqa: E501

        :return: The code of this CustomFieldDefinitionItem.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CustomFieldDefinitionItem.

        Code  # noqa: E501

        :param code: The code of this CustomFieldDefinitionItem.  # noqa: E501
        :type: str
        """
        if code is not None and len(code) > 10:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `10`")  # noqa: E501

        self._code = code

    @property
    def custom_field_order(self):
        """Gets the custom_field_order of this CustomFieldDefinitionItem.  # noqa: E501

        Custom Field Order  # noqa: E501

        :return: The custom_field_order of this CustomFieldDefinitionItem.  # noqa: E501
        :rtype: int
        """
        return self._custom_field_order

    @custom_field_order.setter
    def custom_field_order(self, custom_field_order):
        """Sets the custom_field_order of this CustomFieldDefinitionItem.

        Custom Field Order  # noqa: E501

        :param custom_field_order: The custom_field_order of this CustomFieldDefinitionItem.  # noqa: E501
        :type: int
        """

        self._custom_field_order = custom_field_order

    @property
    def custom_field_group(self):
        """Gets the custom_field_group of this CustomFieldDefinitionItem.  # noqa: E501

        Custom Field Group  # noqa: E501

        :return: The custom_field_group of this CustomFieldDefinitionItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_field_group

    @custom_field_group.setter
    def custom_field_group(self, custom_field_group):
        """Sets the custom_field_group of this CustomFieldDefinitionItem.

        Custom Field Group  # noqa: E501

        :param custom_field_group: The custom_field_group of this CustomFieldDefinitionItem.  # noqa: E501
        :type: str
        """
        if custom_field_group is not None and len(custom_field_group) > 50:
            raise ValueError("Invalid value for `custom_field_group`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_field_group = custom_field_group

    @property
    def custom_field_section(self):
        """Gets the custom_field_section of this CustomFieldDefinitionItem.  # noqa: E501

        Custom Field Section  # noqa: E501

        :return: The custom_field_section of this CustomFieldDefinitionItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_field_section

    @custom_field_section.setter
    def custom_field_section(self, custom_field_section):
        """Sets the custom_field_section of this CustomFieldDefinitionItem.

        Custom Field Section  # noqa: E501

        :param custom_field_section: The custom_field_section of this CustomFieldDefinitionItem.  # noqa: E501
        :type: str
        """
        if custom_field_section is not None and len(custom_field_section) > 20:
            raise ValueError("Invalid value for `custom_field_section`, length must be less than or equal to `20`")  # noqa: E501

        self._custom_field_section = custom_field_section

    @property
    def comments(self):
        """Gets the comments of this CustomFieldDefinitionItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this CustomFieldDefinitionItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this CustomFieldDefinitionItem.

        Comments  # noqa: E501

        :param comments: The comments of this CustomFieldDefinitionItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 500:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `500`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this CustomFieldDefinitionItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this CustomFieldDefinitionItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this CustomFieldDefinitionItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this CustomFieldDefinitionItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomFieldDefinitionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
