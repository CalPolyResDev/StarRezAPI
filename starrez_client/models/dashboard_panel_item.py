# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DashboardPanelItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dashboard_panel_id': 'int',
        'dashboard_id': 'int',
        'refresh_interval_enum': 'str',
        'compact_mode': 'bool',
        'title_colour': 'str',
        'panel_class': 'str',
        'postion': 'str',
        'column_order': 'int',
        'collapsed': 'bool',
        'panel_height': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'dashboard_panel_id': 'DashboardPanelID',
        'dashboard_id': 'DashboardID',
        'refresh_interval_enum': 'RefreshIntervalEnum',
        'compact_mode': 'CompactMode',
        'title_colour': 'TitleColour',
        'panel_class': 'PanelClass',
        'postion': 'Postion',
        'column_order': 'ColumnOrder',
        'collapsed': 'Collapsed',
        'panel_height': 'PanelHeight',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, dashboard_panel_id=None, dashboard_id=None, refresh_interval_enum=None, compact_mode=None, title_colour=None, panel_class=None, postion=None, column_order=None, collapsed=None, panel_height=None, date_created=None, date_modified=None):  # noqa: E501
        """DashboardPanelItem - a model defined in Swagger"""  # noqa: E501

        self._dashboard_panel_id = None
        self._dashboard_id = None
        self._refresh_interval_enum = None
        self._compact_mode = None
        self._title_colour = None
        self._panel_class = None
        self._postion = None
        self._column_order = None
        self._collapsed = None
        self._panel_height = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if dashboard_panel_id is not None:
            self.dashboard_panel_id = dashboard_panel_id
        if dashboard_id is not None:
            self.dashboard_id = dashboard_id
        if refresh_interval_enum is not None:
            self.refresh_interval_enum = refresh_interval_enum
        if compact_mode is not None:
            self.compact_mode = compact_mode
        if title_colour is not None:
            self.title_colour = title_colour
        if panel_class is not None:
            self.panel_class = panel_class
        if postion is not None:
            self.postion = postion
        if column_order is not None:
            self.column_order = column_order
        if collapsed is not None:
            self.collapsed = collapsed
        if panel_height is not None:
            self.panel_height = panel_height
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def dashboard_panel_id(self):
        """Gets the dashboard_panel_id of this DashboardPanelItem.  # noqa: E501

        Dashboard Panel  # noqa: E501

        :return: The dashboard_panel_id of this DashboardPanelItem.  # noqa: E501
        :rtype: int
        """
        return self._dashboard_panel_id

    @dashboard_panel_id.setter
    def dashboard_panel_id(self, dashboard_panel_id):
        """Sets the dashboard_panel_id of this DashboardPanelItem.

        Dashboard Panel  # noqa: E501

        :param dashboard_panel_id: The dashboard_panel_id of this DashboardPanelItem.  # noqa: E501
        :type: int
        """

        self._dashboard_panel_id = dashboard_panel_id

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this DashboardPanelItem.  # noqa: E501

        Dashboard  # noqa: E501

        :return: The dashboard_id of this DashboardPanelItem.  # noqa: E501
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this DashboardPanelItem.

        Dashboard  # noqa: E501

        :param dashboard_id: The dashboard_id of this DashboardPanelItem.  # noqa: E501
        :type: int
        """

        self._dashboard_id = dashboard_id

    @property
    def refresh_interval_enum(self):
        """Gets the refresh_interval_enum of this DashboardPanelItem.  # noqa: E501

        Refresh Interval  # noqa: E501

        :return: The refresh_interval_enum of this DashboardPanelItem.  # noqa: E501
        :rtype: str
        """
        return self._refresh_interval_enum

    @refresh_interval_enum.setter
    def refresh_interval_enum(self, refresh_interval_enum):
        """Sets the refresh_interval_enum of this DashboardPanelItem.

        Refresh Interval  # noqa: E501

        :param refresh_interval_enum: The refresh_interval_enum of this DashboardPanelItem.  # noqa: E501
        :type: str
        """

        self._refresh_interval_enum = refresh_interval_enum

    @property
    def compact_mode(self):
        """Gets the compact_mode of this DashboardPanelItem.  # noqa: E501

        Compact Mode  # noqa: E501

        :return: The compact_mode of this DashboardPanelItem.  # noqa: E501
        :rtype: bool
        """
        return self._compact_mode

    @compact_mode.setter
    def compact_mode(self, compact_mode):
        """Sets the compact_mode of this DashboardPanelItem.

        Compact Mode  # noqa: E501

        :param compact_mode: The compact_mode of this DashboardPanelItem.  # noqa: E501
        :type: bool
        """

        self._compact_mode = compact_mode

    @property
    def title_colour(self):
        """Gets the title_colour of this DashboardPanelItem.  # noqa: E501

        Title Colour  # noqa: E501

        :return: The title_colour of this DashboardPanelItem.  # noqa: E501
        :rtype: str
        """
        return self._title_colour

    @title_colour.setter
    def title_colour(self, title_colour):
        """Sets the title_colour of this DashboardPanelItem.

        Title Colour  # noqa: E501

        :param title_colour: The title_colour of this DashboardPanelItem.  # noqa: E501
        :type: str
        """
        if title_colour is not None and len(title_colour) > 10:
            raise ValueError("Invalid value for `title_colour`, length must be less than or equal to `10`")  # noqa: E501

        self._title_colour = title_colour

    @property
    def panel_class(self):
        """Gets the panel_class of this DashboardPanelItem.  # noqa: E501

        Panel Class  # noqa: E501

        :return: The panel_class of this DashboardPanelItem.  # noqa: E501
        :rtype: str
        """
        return self._panel_class

    @panel_class.setter
    def panel_class(self, panel_class):
        """Sets the panel_class of this DashboardPanelItem.

        Panel Class  # noqa: E501

        :param panel_class: The panel_class of this DashboardPanelItem.  # noqa: E501
        :type: str
        """
        if panel_class is not None and len(panel_class) > 100:
            raise ValueError("Invalid value for `panel_class`, length must be less than or equal to `100`")  # noqa: E501

        self._panel_class = panel_class

    @property
    def postion(self):
        """Gets the postion of this DashboardPanelItem.  # noqa: E501

        Postion  # noqa: E501

        :return: The postion of this DashboardPanelItem.  # noqa: E501
        :rtype: str
        """
        return self._postion

    @postion.setter
    def postion(self, postion):
        """Sets the postion of this DashboardPanelItem.

        Postion  # noqa: E501

        :param postion: The postion of this DashboardPanelItem.  # noqa: E501
        :type: str
        """
        if postion is not None and len(postion) > 20:
            raise ValueError("Invalid value for `postion`, length must be less than or equal to `20`")  # noqa: E501

        self._postion = postion

    @property
    def column_order(self):
        """Gets the column_order of this DashboardPanelItem.  # noqa: E501

        Column Order  # noqa: E501

        :return: The column_order of this DashboardPanelItem.  # noqa: E501
        :rtype: int
        """
        return self._column_order

    @column_order.setter
    def column_order(self, column_order):
        """Sets the column_order of this DashboardPanelItem.

        Column Order  # noqa: E501

        :param column_order: The column_order of this DashboardPanelItem.  # noqa: E501
        :type: int
        """

        self._column_order = column_order

    @property
    def collapsed(self):
        """Gets the collapsed of this DashboardPanelItem.  # noqa: E501

        Collapsed  # noqa: E501

        :return: The collapsed of this DashboardPanelItem.  # noqa: E501
        :rtype: bool
        """
        return self._collapsed

    @collapsed.setter
    def collapsed(self, collapsed):
        """Sets the collapsed of this DashboardPanelItem.

        Collapsed  # noqa: E501

        :param collapsed: The collapsed of this DashboardPanelItem.  # noqa: E501
        :type: bool
        """

        self._collapsed = collapsed

    @property
    def panel_height(self):
        """Gets the panel_height of this DashboardPanelItem.  # noqa: E501

        Panel Height  # noqa: E501

        :return: The panel_height of this DashboardPanelItem.  # noqa: E501
        :rtype: int
        """
        return self._panel_height

    @panel_height.setter
    def panel_height(self, panel_height):
        """Sets the panel_height of this DashboardPanelItem.

        Panel Height  # noqa: E501

        :param panel_height: The panel_height of this DashboardPanelItem.  # noqa: E501
        :type: int
        """

        self._panel_height = panel_height

    @property
    def date_created(self):
        """Gets the date_created of this DashboardPanelItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this DashboardPanelItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this DashboardPanelItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this DashboardPanelItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this DashboardPanelItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this DashboardPanelItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this DashboardPanelItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this DashboardPanelItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardPanelItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
