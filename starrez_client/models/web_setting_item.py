# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebSettingItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'web_setting_id': 'int',
        'table_id': 'int',
        'table_name': 'str',
        'setting_name': 'str',
        'setting_value': 'str',
        'comments': 'str',
        'security_user_id': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'web_setting_id': 'WebSettingID',
        'table_id': 'TableID',
        'table_name': 'TableName',
        'setting_name': 'SettingName',
        'setting_value': 'SettingValue',
        'comments': 'Comments',
        'security_user_id': 'SecurityUserID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, web_setting_id=None, table_id=None, table_name=None, setting_name=None, setting_value=None, comments=None, security_user_id=None, date_created=None, date_modified=None):  # noqa: E501
        """WebSettingItem - a model defined in Swagger"""  # noqa: E501

        self._web_setting_id = None
        self._table_id = None
        self._table_name = None
        self._setting_name = None
        self._setting_value = None
        self._comments = None
        self._security_user_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if web_setting_id is not None:
            self.web_setting_id = web_setting_id
        if table_id is not None:
            self.table_id = table_id
        if table_name is not None:
            self.table_name = table_name
        if setting_name is not None:
            self.setting_name = setting_name
        if setting_value is not None:
            self.setting_value = setting_value
        if comments is not None:
            self.comments = comments
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def web_setting_id(self):
        """Gets the web_setting_id of this WebSettingItem.  # noqa: E501

        Web Setting  # noqa: E501

        :return: The web_setting_id of this WebSettingItem.  # noqa: E501
        :rtype: int
        """
        return self._web_setting_id

    @web_setting_id.setter
    def web_setting_id(self, web_setting_id):
        """Sets the web_setting_id of this WebSettingItem.

        Web Setting  # noqa: E501

        :param web_setting_id: The web_setting_id of this WebSettingItem.  # noqa: E501
        :type: int
        """

        self._web_setting_id = web_setting_id

    @property
    def table_id(self):
        """Gets the table_id of this WebSettingItem.  # noqa: E501

        Table  # noqa: E501

        :return: The table_id of this WebSettingItem.  # noqa: E501
        :rtype: int
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this WebSettingItem.

        Table  # noqa: E501

        :param table_id: The table_id of this WebSettingItem.  # noqa: E501
        :type: int
        """

        self._table_id = table_id

    @property
    def table_name(self):
        """Gets the table_name of this WebSettingItem.  # noqa: E501

        Table Name  # noqa: E501

        :return: The table_name of this WebSettingItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this WebSettingItem.

        Table Name  # noqa: E501

        :param table_name: The table_name of this WebSettingItem.  # noqa: E501
        :type: str
        """
        if table_name is not None and len(table_name) > 20:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `20`")  # noqa: E501

        self._table_name = table_name

    @property
    def setting_name(self):
        """Gets the setting_name of this WebSettingItem.  # noqa: E501

        Setting Name  # noqa: E501

        :return: The setting_name of this WebSettingItem.  # noqa: E501
        :rtype: str
        """
        return self._setting_name

    @setting_name.setter
    def setting_name(self, setting_name):
        """Sets the setting_name of this WebSettingItem.

        Setting Name  # noqa: E501

        :param setting_name: The setting_name of this WebSettingItem.  # noqa: E501
        :type: str
        """
        if setting_name is not None and len(setting_name) > 500:
            raise ValueError("Invalid value for `setting_name`, length must be less than or equal to `500`")  # noqa: E501

        self._setting_name = setting_name

    @property
    def setting_value(self):
        """Gets the setting_value of this WebSettingItem.  # noqa: E501

        Setting Value  # noqa: E501

        :return: The setting_value of this WebSettingItem.  # noqa: E501
        :rtype: str
        """
        return self._setting_value

    @setting_value.setter
    def setting_value(self, setting_value):
        """Sets the setting_value of this WebSettingItem.

        Setting Value  # noqa: E501

        :param setting_value: The setting_value of this WebSettingItem.  # noqa: E501
        :type: str
        """
        if setting_value is not None and len(setting_value) > 5000:
            raise ValueError("Invalid value for `setting_value`, length must be less than or equal to `5000`")  # noqa: E501

        self._setting_value = setting_value

    @property
    def comments(self):
        """Gets the comments of this WebSettingItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this WebSettingItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WebSettingItem.

        Comments  # noqa: E501

        :param comments: The comments of this WebSettingItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 1000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `1000`")  # noqa: E501

        self._comments = comments

    @property
    def security_user_id(self):
        """Gets the security_user_id of this WebSettingItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this WebSettingItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this WebSettingItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this WebSettingItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this WebSettingItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this WebSettingItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this WebSettingItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this WebSettingItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this WebSettingItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this WebSettingItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this WebSettingItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this WebSettingItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebSettingItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
