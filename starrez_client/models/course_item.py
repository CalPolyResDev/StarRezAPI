# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CourseItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'course_id': 'int',
        'record_type_enum': 'str',
        'description': 'str',
        'course_code': 'str',
        'effective_date': 'str',
        'status': 'str',
        'comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'course_id': 'CourseID',
        'record_type_enum': 'RecordTypeEnum',
        'description': 'Description',
        'course_code': 'CourseCode',
        'effective_date': 'EffectiveDate',
        'status': 'Status',
        'comments': 'Comments',
        'date_modified': 'DateModified'
    }

    def __init__(self, course_id=None, record_type_enum=None, description=None, course_code=None, effective_date=None, status=None, comments=None, date_modified=None):  # noqa: E501
        """CourseItem - a model defined in Swagger"""  # noqa: E501

        self._course_id = None
        self._record_type_enum = None
        self._description = None
        self._course_code = None
        self._effective_date = None
        self._status = None
        self._comments = None
        self._date_modified = None
        self.discriminator = None

        if course_id is not None:
            self.course_id = course_id
        if record_type_enum is not None:
            self.record_type_enum = record_type_enum
        if description is not None:
            self.description = description
        if course_code is not None:
            self.course_code = course_code
        if effective_date is not None:
            self.effective_date = effective_date
        if status is not None:
            self.status = status
        if comments is not None:
            self.comments = comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def course_id(self):
        """Gets the course_id of this CourseItem.  # noqa: E501

        Course  # noqa: E501

        :return: The course_id of this CourseItem.  # noqa: E501
        :rtype: int
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this CourseItem.

        Course  # noqa: E501

        :param course_id: The course_id of this CourseItem.  # noqa: E501
        :type: int
        """

        self._course_id = course_id

    @property
    def record_type_enum(self):
        """Gets the record_type_enum of this CourseItem.  # noqa: E501

        Record Type  # noqa: E501

        :return: The record_type_enum of this CourseItem.  # noqa: E501
        :rtype: str
        """
        return self._record_type_enum

    @record_type_enum.setter
    def record_type_enum(self, record_type_enum):
        """Sets the record_type_enum of this CourseItem.

        Record Type  # noqa: E501

        :param record_type_enum: The record_type_enum of this CourseItem.  # noqa: E501
        :type: str
        """

        self._record_type_enum = record_type_enum

    @property
    def description(self):
        """Gets the description of this CourseItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this CourseItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CourseItem.

        Description  # noqa: E501

        :param description: The description of this CourseItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def course_code(self):
        """Gets the course_code of this CourseItem.  # noqa: E501

        Course Code  # noqa: E501

        :return: The course_code of this CourseItem.  # noqa: E501
        :rtype: str
        """
        return self._course_code

    @course_code.setter
    def course_code(self, course_code):
        """Sets the course_code of this CourseItem.

        Course Code  # noqa: E501

        :param course_code: The course_code of this CourseItem.  # noqa: E501
        :type: str
        """
        if course_code is not None and len(course_code) > 30:
            raise ValueError("Invalid value for `course_code`, length must be less than or equal to `30`")  # noqa: E501

        self._course_code = course_code

    @property
    def effective_date(self):
        """Gets the effective_date of this CourseItem.  # noqa: E501

        Effective Date  # noqa: E501

        :return: The effective_date of this CourseItem.  # noqa: E501
        :rtype: str
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this CourseItem.

        Effective Date  # noqa: E501

        :param effective_date: The effective_date of this CourseItem.  # noqa: E501
        :type: str
        """

        self._effective_date = effective_date

    @property
    def status(self):
        """Gets the status of this CourseItem.  # noqa: E501

        Status  # noqa: E501

        :return: The status of this CourseItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CourseItem.

        Status  # noqa: E501

        :param status: The status of this CourseItem.  # noqa: E501
        :type: str
        """
        if status is not None and len(status) > 20:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `20`")  # noqa: E501

        self._status = status

    @property
    def comments(self):
        """Gets the comments of this CourseItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this CourseItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this CourseItem.

        Comments  # noqa: E501

        :param comments: The comments of this CourseItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 250:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `250`")  # noqa: E501

        self._comments = comments

    @property
    def date_modified(self):
        """Gets the date_modified of this CourseItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this CourseItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this CourseItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this CourseItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
