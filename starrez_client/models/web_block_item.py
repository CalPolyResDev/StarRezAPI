# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebBlockItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'web_block_id': 'int',
        'web_section_id': 'int',
        'block_name': 'str',
        'display': 'bool',
        'block_order': 'int',
        'header': 'str',
        'comments': 'str',
        'web_block_type_enum': 'str',
        'custom_object_name': 'str',
        'repeat': 'int',
        'dest_table': 'str',
        'dest_table_sort_by': 'str',
        'source_table': 'str',
        'filter': 'str',
        'order_by': 'str',
        'header_field': 'str',
        'header_field2': 'str',
        'no_insert_condition': 'str',
        'data_filter': 'str',
        'linking_field': 'str',
        'security_user_id': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'web_block_id': 'WebBlockID',
        'web_section_id': 'WebSectionID',
        'block_name': 'BlockName',
        'display': 'Display',
        'block_order': 'BlockOrder',
        'header': 'Header',
        'comments': 'Comments',
        'web_block_type_enum': 'WebBlockTypeEnum',
        'custom_object_name': 'CustomObjectName',
        'repeat': 'Repeat',
        'dest_table': 'DestTable',
        'dest_table_sort_by': 'DestTableSortBy',
        'source_table': 'SourceTable',
        'filter': 'Filter',
        'order_by': 'OrderBy',
        'header_field': 'HeaderField',
        'header_field2': 'HeaderField2',
        'no_insert_condition': 'NoInsertCondition',
        'data_filter': 'DataFilter',
        'linking_field': 'LinkingField',
        'security_user_id': 'SecurityUserID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, web_block_id=None, web_section_id=None, block_name=None, display=None, block_order=None, header=None, comments=None, web_block_type_enum=None, custom_object_name=None, repeat=None, dest_table=None, dest_table_sort_by=None, source_table=None, filter=None, order_by=None, header_field=None, header_field2=None, no_insert_condition=None, data_filter=None, linking_field=None, security_user_id=None, date_created=None, date_modified=None):  # noqa: E501
        """WebBlockItem - a model defined in Swagger"""  # noqa: E501

        self._web_block_id = None
        self._web_section_id = None
        self._block_name = None
        self._display = None
        self._block_order = None
        self._header = None
        self._comments = None
        self._web_block_type_enum = None
        self._custom_object_name = None
        self._repeat = None
        self._dest_table = None
        self._dest_table_sort_by = None
        self._source_table = None
        self._filter = None
        self._order_by = None
        self._header_field = None
        self._header_field2 = None
        self._no_insert_condition = None
        self._data_filter = None
        self._linking_field = None
        self._security_user_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if web_block_id is not None:
            self.web_block_id = web_block_id
        if web_section_id is not None:
            self.web_section_id = web_section_id
        if block_name is not None:
            self.block_name = block_name
        if display is not None:
            self.display = display
        if block_order is not None:
            self.block_order = block_order
        if header is not None:
            self.header = header
        if comments is not None:
            self.comments = comments
        if web_block_type_enum is not None:
            self.web_block_type_enum = web_block_type_enum
        if custom_object_name is not None:
            self.custom_object_name = custom_object_name
        if repeat is not None:
            self.repeat = repeat
        if dest_table is not None:
            self.dest_table = dest_table
        if dest_table_sort_by is not None:
            self.dest_table_sort_by = dest_table_sort_by
        if source_table is not None:
            self.source_table = source_table
        if filter is not None:
            self.filter = filter
        if order_by is not None:
            self.order_by = order_by
        if header_field is not None:
            self.header_field = header_field
        if header_field2 is not None:
            self.header_field2 = header_field2
        if no_insert_condition is not None:
            self.no_insert_condition = no_insert_condition
        if data_filter is not None:
            self.data_filter = data_filter
        if linking_field is not None:
            self.linking_field = linking_field
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def web_block_id(self):
        """Gets the web_block_id of this WebBlockItem.  # noqa: E501

        Web Block  # noqa: E501

        :return: The web_block_id of this WebBlockItem.  # noqa: E501
        :rtype: int
        """
        return self._web_block_id

    @web_block_id.setter
    def web_block_id(self, web_block_id):
        """Sets the web_block_id of this WebBlockItem.

        Web Block  # noqa: E501

        :param web_block_id: The web_block_id of this WebBlockItem.  # noqa: E501
        :type: int
        """

        self._web_block_id = web_block_id

    @property
    def web_section_id(self):
        """Gets the web_section_id of this WebBlockItem.  # noqa: E501

        Web Section  # noqa: E501

        :return: The web_section_id of this WebBlockItem.  # noqa: E501
        :rtype: int
        """
        return self._web_section_id

    @web_section_id.setter
    def web_section_id(self, web_section_id):
        """Sets the web_section_id of this WebBlockItem.

        Web Section  # noqa: E501

        :param web_section_id: The web_section_id of this WebBlockItem.  # noqa: E501
        :type: int
        """

        self._web_section_id = web_section_id

    @property
    def block_name(self):
        """Gets the block_name of this WebBlockItem.  # noqa: E501

        Block Name  # noqa: E501

        :return: The block_name of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._block_name

    @block_name.setter
    def block_name(self, block_name):
        """Sets the block_name of this WebBlockItem.

        Block Name  # noqa: E501

        :param block_name: The block_name of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if block_name is not None and len(block_name) > 100:
            raise ValueError("Invalid value for `block_name`, length must be less than or equal to `100`")  # noqa: E501

        self._block_name = block_name

    @property
    def display(self):
        """Gets the display of this WebBlockItem.  # noqa: E501

        Display  # noqa: E501

        :return: The display of this WebBlockItem.  # noqa: E501
        :rtype: bool
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this WebBlockItem.

        Display  # noqa: E501

        :param display: The display of this WebBlockItem.  # noqa: E501
        :type: bool
        """

        self._display = display

    @property
    def block_order(self):
        """Gets the block_order of this WebBlockItem.  # noqa: E501

        Block Order  # noqa: E501

        :return: The block_order of this WebBlockItem.  # noqa: E501
        :rtype: int
        """
        return self._block_order

    @block_order.setter
    def block_order(self, block_order):
        """Sets the block_order of this WebBlockItem.

        Block Order  # noqa: E501

        :param block_order: The block_order of this WebBlockItem.  # noqa: E501
        :type: int
        """

        self._block_order = block_order

    @property
    def header(self):
        """Gets the header of this WebBlockItem.  # noqa: E501

        Header  # noqa: E501

        :return: The header of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this WebBlockItem.

        Header  # noqa: E501

        :param header: The header of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if header is not None and len(header) > 100:
            raise ValueError("Invalid value for `header`, length must be less than or equal to `100`")  # noqa: E501

        self._header = header

    @property
    def comments(self):
        """Gets the comments of this WebBlockItem.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WebBlockItem.

        Comments  # noqa: E501

        :param comments: The comments of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 4000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `4000`")  # noqa: E501

        self._comments = comments

    @property
    def web_block_type_enum(self):
        """Gets the web_block_type_enum of this WebBlockItem.  # noqa: E501

        Web Block Type  # noqa: E501

        :return: The web_block_type_enum of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._web_block_type_enum

    @web_block_type_enum.setter
    def web_block_type_enum(self, web_block_type_enum):
        """Sets the web_block_type_enum of this WebBlockItem.

        Web Block Type  # noqa: E501

        :param web_block_type_enum: The web_block_type_enum of this WebBlockItem.  # noqa: E501
        :type: str
        """

        self._web_block_type_enum = web_block_type_enum

    @property
    def custom_object_name(self):
        """Gets the custom_object_name of this WebBlockItem.  # noqa: E501

        Custom Object Name  # noqa: E501

        :return: The custom_object_name of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._custom_object_name

    @custom_object_name.setter
    def custom_object_name(self, custom_object_name):
        """Sets the custom_object_name of this WebBlockItem.

        Custom Object Name  # noqa: E501

        :param custom_object_name: The custom_object_name of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if custom_object_name is not None and len(custom_object_name) > 100:
            raise ValueError("Invalid value for `custom_object_name`, length must be less than or equal to `100`")  # noqa: E501

        self._custom_object_name = custom_object_name

    @property
    def repeat(self):
        """Gets the repeat of this WebBlockItem.  # noqa: E501

        Repeat  # noqa: E501

        :return: The repeat of this WebBlockItem.  # noqa: E501
        :rtype: int
        """
        return self._repeat

    @repeat.setter
    def repeat(self, repeat):
        """Sets the repeat of this WebBlockItem.

        Repeat  # noqa: E501

        :param repeat: The repeat of this WebBlockItem.  # noqa: E501
        :type: int
        """

        self._repeat = repeat

    @property
    def dest_table(self):
        """Gets the dest_table of this WebBlockItem.  # noqa: E501

        Dest Table  # noqa: E501

        :return: The dest_table of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._dest_table

    @dest_table.setter
    def dest_table(self, dest_table):
        """Sets the dest_table of this WebBlockItem.

        Dest Table  # noqa: E501

        :param dest_table: The dest_table of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if dest_table is not None and len(dest_table) > 50:
            raise ValueError("Invalid value for `dest_table`, length must be less than or equal to `50`")  # noqa: E501

        self._dest_table = dest_table

    @property
    def dest_table_sort_by(self):
        """Gets the dest_table_sort_by of this WebBlockItem.  # noqa: E501

        Dest Table Sort By  # noqa: E501

        :return: The dest_table_sort_by of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._dest_table_sort_by

    @dest_table_sort_by.setter
    def dest_table_sort_by(self, dest_table_sort_by):
        """Sets the dest_table_sort_by of this WebBlockItem.

        Dest Table Sort By  # noqa: E501

        :param dest_table_sort_by: The dest_table_sort_by of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if dest_table_sort_by is not None and len(dest_table_sort_by) > 50:
            raise ValueError("Invalid value for `dest_table_sort_by`, length must be less than or equal to `50`")  # noqa: E501

        self._dest_table_sort_by = dest_table_sort_by

    @property
    def source_table(self):
        """Gets the source_table of this WebBlockItem.  # noqa: E501

        Source Table  # noqa: E501

        :return: The source_table of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._source_table

    @source_table.setter
    def source_table(self, source_table):
        """Sets the source_table of this WebBlockItem.

        Source Table  # noqa: E501

        :param source_table: The source_table of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if source_table is not None and len(source_table) > 50:
            raise ValueError("Invalid value for `source_table`, length must be less than or equal to `50`")  # noqa: E501

        self._source_table = source_table

    @property
    def filter(self):
        """Gets the filter of this WebBlockItem.  # noqa: E501

        Filter  # noqa: E501

        :return: The filter of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this WebBlockItem.

        Filter  # noqa: E501

        :param filter: The filter of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if filter is not None and len(filter) > 200:
            raise ValueError("Invalid value for `filter`, length must be less than or equal to `200`")  # noqa: E501

        self._filter = filter

    @property
    def order_by(self):
        """Gets the order_by of this WebBlockItem.  # noqa: E501

        Order By  # noqa: E501

        :return: The order_by of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this WebBlockItem.

        Order By  # noqa: E501

        :param order_by: The order_by of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if order_by is not None and len(order_by) > 200:
            raise ValueError("Invalid value for `order_by`, length must be less than or equal to `200`")  # noqa: E501

        self._order_by = order_by

    @property
    def header_field(self):
        """Gets the header_field of this WebBlockItem.  # noqa: E501

        Header Field  # noqa: E501

        :return: The header_field of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._header_field

    @header_field.setter
    def header_field(self, header_field):
        """Sets the header_field of this WebBlockItem.

        Header Field  # noqa: E501

        :param header_field: The header_field of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if header_field is not None and len(header_field) > 50:
            raise ValueError("Invalid value for `header_field`, length must be less than or equal to `50`")  # noqa: E501

        self._header_field = header_field

    @property
    def header_field2(self):
        """Gets the header_field2 of this WebBlockItem.  # noqa: E501

        Header Field 2  # noqa: E501

        :return: The header_field2 of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._header_field2

    @header_field2.setter
    def header_field2(self, header_field2):
        """Sets the header_field2 of this WebBlockItem.

        Header Field 2  # noqa: E501

        :param header_field2: The header_field2 of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if header_field2 is not None and len(header_field2) > 50:
            raise ValueError("Invalid value for `header_field2`, length must be less than or equal to `50`")  # noqa: E501

        self._header_field2 = header_field2

    @property
    def no_insert_condition(self):
        """Gets the no_insert_condition of this WebBlockItem.  # noqa: E501

        No Insert Condition  # noqa: E501

        :return: The no_insert_condition of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._no_insert_condition

    @no_insert_condition.setter
    def no_insert_condition(self, no_insert_condition):
        """Sets the no_insert_condition of this WebBlockItem.

        No Insert Condition  # noqa: E501

        :param no_insert_condition: The no_insert_condition of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if no_insert_condition is not None and len(no_insert_condition) > 50:
            raise ValueError("Invalid value for `no_insert_condition`, length must be less than or equal to `50`")  # noqa: E501

        self._no_insert_condition = no_insert_condition

    @property
    def data_filter(self):
        """Gets the data_filter of this WebBlockItem.  # noqa: E501

        Data Filter  # noqa: E501

        :return: The data_filter of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._data_filter

    @data_filter.setter
    def data_filter(self, data_filter):
        """Sets the data_filter of this WebBlockItem.

        Data Filter  # noqa: E501

        :param data_filter: The data_filter of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if data_filter is not None and len(data_filter) > 50:
            raise ValueError("Invalid value for `data_filter`, length must be less than or equal to `50`")  # noqa: E501

        self._data_filter = data_filter

    @property
    def linking_field(self):
        """Gets the linking_field of this WebBlockItem.  # noqa: E501

        Linking Field  # noqa: E501

        :return: The linking_field of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._linking_field

    @linking_field.setter
    def linking_field(self, linking_field):
        """Sets the linking_field of this WebBlockItem.

        Linking Field  # noqa: E501

        :param linking_field: The linking_field of this WebBlockItem.  # noqa: E501
        :type: str
        """
        if linking_field is not None and len(linking_field) > 100:
            raise ValueError("Invalid value for `linking_field`, length must be less than or equal to `100`")  # noqa: E501

        self._linking_field = linking_field

    @property
    def security_user_id(self):
        """Gets the security_user_id of this WebBlockItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this WebBlockItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this WebBlockItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this WebBlockItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this WebBlockItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this WebBlockItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this WebBlockItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this WebBlockItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this WebBlockItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this WebBlockItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this WebBlockItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this WebBlockItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebBlockItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
