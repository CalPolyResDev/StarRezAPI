# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IncidentEntryAppealItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'incident_entry_appeal_id': 'int',
        'incident_entry_id': 'int',
        'appeal_date_created': 'str',
        'appeal_date': 'str',
        'appeal_date_complete': 'str',
        'appeal_manager_entry_id': 'int',
        'incident_appeal_type_id': 'int',
        'incident_appeal_decision_id': 'int',
        'appeal_description': 'str',
        'appeal_comments': 'str',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'incident_entry_appeal_id': 'IncidentEntryAppealID',
        'incident_entry_id': 'IncidentEntryID',
        'appeal_date_created': 'AppealDateCreated',
        'appeal_date': 'AppealDate',
        'appeal_date_complete': 'AppealDateComplete',
        'appeal_manager_entry_id': 'AppealManager_EntryID',
        'incident_appeal_type_id': 'IncidentAppealTypeID',
        'incident_appeal_decision_id': 'IncidentAppealDecisionID',
        'appeal_description': 'AppealDescription',
        'appeal_comments': 'AppealComments',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, incident_entry_appeal_id=None, incident_entry_id=None, appeal_date_created=None, appeal_date=None, appeal_date_complete=None, appeal_manager_entry_id=None, incident_appeal_type_id=None, incident_appeal_decision_id=None, appeal_description=None, appeal_comments=None, date_created=None, date_modified=None):  # noqa: E501
        """IncidentEntryAppealItem - a model defined in Swagger"""  # noqa: E501

        self._incident_entry_appeal_id = None
        self._incident_entry_id = None
        self._appeal_date_created = None
        self._appeal_date = None
        self._appeal_date_complete = None
        self._appeal_manager_entry_id = None
        self._incident_appeal_type_id = None
        self._incident_appeal_decision_id = None
        self._appeal_description = None
        self._appeal_comments = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if incident_entry_appeal_id is not None:
            self.incident_entry_appeal_id = incident_entry_appeal_id
        if incident_entry_id is not None:
            self.incident_entry_id = incident_entry_id
        if appeal_date_created is not None:
            self.appeal_date_created = appeal_date_created
        if appeal_date is not None:
            self.appeal_date = appeal_date
        if appeal_date_complete is not None:
            self.appeal_date_complete = appeal_date_complete
        if appeal_manager_entry_id is not None:
            self.appeal_manager_entry_id = appeal_manager_entry_id
        if incident_appeal_type_id is not None:
            self.incident_appeal_type_id = incident_appeal_type_id
        if incident_appeal_decision_id is not None:
            self.incident_appeal_decision_id = incident_appeal_decision_id
        if appeal_description is not None:
            self.appeal_description = appeal_description
        if appeal_comments is not None:
            self.appeal_comments = appeal_comments
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def incident_entry_appeal_id(self):
        """Gets the incident_entry_appeal_id of this IncidentEntryAppealItem.  # noqa: E501

        Incident Entry Appeal  # noqa: E501

        :return: The incident_entry_appeal_id of this IncidentEntryAppealItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_entry_appeal_id

    @incident_entry_appeal_id.setter
    def incident_entry_appeal_id(self, incident_entry_appeal_id):
        """Sets the incident_entry_appeal_id of this IncidentEntryAppealItem.

        Incident Entry Appeal  # noqa: E501

        :param incident_entry_appeal_id: The incident_entry_appeal_id of this IncidentEntryAppealItem.  # noqa: E501
        :type: int
        """

        self._incident_entry_appeal_id = incident_entry_appeal_id

    @property
    def incident_entry_id(self):
        """Gets the incident_entry_id of this IncidentEntryAppealItem.  # noqa: E501

        Incident Entry  # noqa: E501

        :return: The incident_entry_id of this IncidentEntryAppealItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_entry_id

    @incident_entry_id.setter
    def incident_entry_id(self, incident_entry_id):
        """Sets the incident_entry_id of this IncidentEntryAppealItem.

        Incident Entry  # noqa: E501

        :param incident_entry_id: The incident_entry_id of this IncidentEntryAppealItem.  # noqa: E501
        :type: int
        """

        self._incident_entry_id = incident_entry_id

    @property
    def appeal_date_created(self):
        """Gets the appeal_date_created of this IncidentEntryAppealItem.  # noqa: E501

        Appeal Date Created  # noqa: E501

        :return: The appeal_date_created of this IncidentEntryAppealItem.  # noqa: E501
        :rtype: str
        """
        return self._appeal_date_created

    @appeal_date_created.setter
    def appeal_date_created(self, appeal_date_created):
        """Sets the appeal_date_created of this IncidentEntryAppealItem.

        Appeal Date Created  # noqa: E501

        :param appeal_date_created: The appeal_date_created of this IncidentEntryAppealItem.  # noqa: E501
        :type: str
        """

        self._appeal_date_created = appeal_date_created

    @property
    def appeal_date(self):
        """Gets the appeal_date of this IncidentEntryAppealItem.  # noqa: E501

        Appeal Date  # noqa: E501

        :return: The appeal_date of this IncidentEntryAppealItem.  # noqa: E501
        :rtype: str
        """
        return self._appeal_date

    @appeal_date.setter
    def appeal_date(self, appeal_date):
        """Sets the appeal_date of this IncidentEntryAppealItem.

        Appeal Date  # noqa: E501

        :param appeal_date: The appeal_date of this IncidentEntryAppealItem.  # noqa: E501
        :type: str
        """

        self._appeal_date = appeal_date

    @property
    def appeal_date_complete(self):
        """Gets the appeal_date_complete of this IncidentEntryAppealItem.  # noqa: E501

        Appeal Date Complete  # noqa: E501

        :return: The appeal_date_complete of this IncidentEntryAppealItem.  # noqa: E501
        :rtype: str
        """
        return self._appeal_date_complete

    @appeal_date_complete.setter
    def appeal_date_complete(self, appeal_date_complete):
        """Sets the appeal_date_complete of this IncidentEntryAppealItem.

        Appeal Date Complete  # noqa: E501

        :param appeal_date_complete: The appeal_date_complete of this IncidentEntryAppealItem.  # noqa: E501
        :type: str
        """

        self._appeal_date_complete = appeal_date_complete

    @property
    def appeal_manager_entry_id(self):
        """Gets the appeal_manager_entry_id of this IncidentEntryAppealItem.  # noqa: E501

        Appeal Manager Entry  # noqa: E501

        :return: The appeal_manager_entry_id of this IncidentEntryAppealItem.  # noqa: E501
        :rtype: int
        """
        return self._appeal_manager_entry_id

    @appeal_manager_entry_id.setter
    def appeal_manager_entry_id(self, appeal_manager_entry_id):
        """Sets the appeal_manager_entry_id of this IncidentEntryAppealItem.

        Appeal Manager Entry  # noqa: E501

        :param appeal_manager_entry_id: The appeal_manager_entry_id of this IncidentEntryAppealItem.  # noqa: E501
        :type: int
        """

        self._appeal_manager_entry_id = appeal_manager_entry_id

    @property
    def incident_appeal_type_id(self):
        """Gets the incident_appeal_type_id of this IncidentEntryAppealItem.  # noqa: E501

        Incident Appeal Type  # noqa: E501

        :return: The incident_appeal_type_id of this IncidentEntryAppealItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_appeal_type_id

    @incident_appeal_type_id.setter
    def incident_appeal_type_id(self, incident_appeal_type_id):
        """Sets the incident_appeal_type_id of this IncidentEntryAppealItem.

        Incident Appeal Type  # noqa: E501

        :param incident_appeal_type_id: The incident_appeal_type_id of this IncidentEntryAppealItem.  # noqa: E501
        :type: int
        """

        self._incident_appeal_type_id = incident_appeal_type_id

    @property
    def incident_appeal_decision_id(self):
        """Gets the incident_appeal_decision_id of this IncidentEntryAppealItem.  # noqa: E501

        Incident Appeal Decision  # noqa: E501

        :return: The incident_appeal_decision_id of this IncidentEntryAppealItem.  # noqa: E501
        :rtype: int
        """
        return self._incident_appeal_decision_id

    @incident_appeal_decision_id.setter
    def incident_appeal_decision_id(self, incident_appeal_decision_id):
        """Sets the incident_appeal_decision_id of this IncidentEntryAppealItem.

        Incident Appeal Decision  # noqa: E501

        :param incident_appeal_decision_id: The incident_appeal_decision_id of this IncidentEntryAppealItem.  # noqa: E501
        :type: int
        """

        self._incident_appeal_decision_id = incident_appeal_decision_id

    @property
    def appeal_description(self):
        """Gets the appeal_description of this IncidentEntryAppealItem.  # noqa: E501

        Appeal Description  # noqa: E501

        :return: The appeal_description of this IncidentEntryAppealItem.  # noqa: E501
        :rtype: str
        """
        return self._appeal_description

    @appeal_description.setter
    def appeal_description(self, appeal_description):
        """Sets the appeal_description of this IncidentEntryAppealItem.

        Appeal Description  # noqa: E501

        :param appeal_description: The appeal_description of this IncidentEntryAppealItem.  # noqa: E501
        :type: str
        """
        if appeal_description is not None and len(appeal_description) > 2000:
            raise ValueError("Invalid value for `appeal_description`, length must be less than or equal to `2000`")  # noqa: E501

        self._appeal_description = appeal_description

    @property
    def appeal_comments(self):
        """Gets the appeal_comments of this IncidentEntryAppealItem.  # noqa: E501

        Appeal Comments  # noqa: E501

        :return: The appeal_comments of this IncidentEntryAppealItem.  # noqa: E501
        :rtype: str
        """
        return self._appeal_comments

    @appeal_comments.setter
    def appeal_comments(self, appeal_comments):
        """Sets the appeal_comments of this IncidentEntryAppealItem.

        Appeal Comments  # noqa: E501

        :param appeal_comments: The appeal_comments of this IncidentEntryAppealItem.  # noqa: E501
        :type: str
        """
        if appeal_comments is not None and len(appeal_comments) > 5000:
            raise ValueError("Invalid value for `appeal_comments`, length must be less than or equal to `5000`")  # noqa: E501

        self._appeal_comments = appeal_comments

    @property
    def date_created(self):
        """Gets the date_created of this IncidentEntryAppealItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this IncidentEntryAppealItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this IncidentEntryAppealItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this IncidentEntryAppealItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this IncidentEntryAppealItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this IncidentEntryAppealItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this IncidentEntryAppealItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this IncidentEntryAppealItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncidentEntryAppealItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
