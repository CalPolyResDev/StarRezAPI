# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomMethodTagItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_method_tag_id': 'int',
        'method_name': 'str',
        'addin_filename': 'str',
        'session_tag': 'int',
        'date_last_ran': 'str',
        'batch_number': 'int',
        'security_user_id': 'int',
        'date_created': 'datetime',
        'date_modified': 'str'
    }

    attribute_map = {
        'custom_method_tag_id': 'CustomMethodTagID',
        'method_name': 'MethodName',
        'addin_filename': 'AddinFilename',
        'session_tag': 'SessionTag',
        'date_last_ran': 'DateLastRan',
        'batch_number': 'BatchNumber',
        'security_user_id': 'SecurityUserID',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified'
    }

    def __init__(self, custom_method_tag_id=None, method_name=None, addin_filename=None, session_tag=None, date_last_ran=None, batch_number=None, security_user_id=None, date_created=None, date_modified=None):  # noqa: E501
        """CustomMethodTagItem - a model defined in Swagger"""  # noqa: E501

        self._custom_method_tag_id = None
        self._method_name = None
        self._addin_filename = None
        self._session_tag = None
        self._date_last_ran = None
        self._batch_number = None
        self._security_user_id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if custom_method_tag_id is not None:
            self.custom_method_tag_id = custom_method_tag_id
        if method_name is not None:
            self.method_name = method_name
        if addin_filename is not None:
            self.addin_filename = addin_filename
        if session_tag is not None:
            self.session_tag = session_tag
        if date_last_ran is not None:
            self.date_last_ran = date_last_ran
        if batch_number is not None:
            self.batch_number = batch_number
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def custom_method_tag_id(self):
        """Gets the custom_method_tag_id of this CustomMethodTagItem.  # noqa: E501

        Custom Method Tag  # noqa: E501

        :return: The custom_method_tag_id of this CustomMethodTagItem.  # noqa: E501
        :rtype: int
        """
        return self._custom_method_tag_id

    @custom_method_tag_id.setter
    def custom_method_tag_id(self, custom_method_tag_id):
        """Sets the custom_method_tag_id of this CustomMethodTagItem.

        Custom Method Tag  # noqa: E501

        :param custom_method_tag_id: The custom_method_tag_id of this CustomMethodTagItem.  # noqa: E501
        :type: int
        """

        self._custom_method_tag_id = custom_method_tag_id

    @property
    def method_name(self):
        """Gets the method_name of this CustomMethodTagItem.  # noqa: E501

        Method Name  # noqa: E501

        :return: The method_name of this CustomMethodTagItem.  # noqa: E501
        :rtype: str
        """
        return self._method_name

    @method_name.setter
    def method_name(self, method_name):
        """Sets the method_name of this CustomMethodTagItem.

        Method Name  # noqa: E501

        :param method_name: The method_name of this CustomMethodTagItem.  # noqa: E501
        :type: str
        """
        if method_name is not None and len(method_name) > 100:
            raise ValueError("Invalid value for `method_name`, length must be less than or equal to `100`")  # noqa: E501

        self._method_name = method_name

    @property
    def addin_filename(self):
        """Gets the addin_filename of this CustomMethodTagItem.  # noqa: E501

        Addin Filename  # noqa: E501

        :return: The addin_filename of this CustomMethodTagItem.  # noqa: E501
        :rtype: str
        """
        return self._addin_filename

    @addin_filename.setter
    def addin_filename(self, addin_filename):
        """Sets the addin_filename of this CustomMethodTagItem.

        Addin Filename  # noqa: E501

        :param addin_filename: The addin_filename of this CustomMethodTagItem.  # noqa: E501
        :type: str
        """
        if addin_filename is not None and len(addin_filename) > 255:
            raise ValueError("Invalid value for `addin_filename`, length must be less than or equal to `255`")  # noqa: E501

        self._addin_filename = addin_filename

    @property
    def session_tag(self):
        """Gets the session_tag of this CustomMethodTagItem.  # noqa: E501

        Session Tag  # noqa: E501

        :return: The session_tag of this CustomMethodTagItem.  # noqa: E501
        :rtype: int
        """
        return self._session_tag

    @session_tag.setter
    def session_tag(self, session_tag):
        """Sets the session_tag of this CustomMethodTagItem.

        Session Tag  # noqa: E501

        :param session_tag: The session_tag of this CustomMethodTagItem.  # noqa: E501
        :type: int
        """

        self._session_tag = session_tag

    @property
    def date_last_ran(self):
        """Gets the date_last_ran of this CustomMethodTagItem.  # noqa: E501

        Date Last Ran  # noqa: E501

        :return: The date_last_ran of this CustomMethodTagItem.  # noqa: E501
        :rtype: str
        """
        return self._date_last_ran

    @date_last_ran.setter
    def date_last_ran(self, date_last_ran):
        """Sets the date_last_ran of this CustomMethodTagItem.

        Date Last Ran  # noqa: E501

        :param date_last_ran: The date_last_ran of this CustomMethodTagItem.  # noqa: E501
        :type: str
        """

        self._date_last_ran = date_last_ran

    @property
    def batch_number(self):
        """Gets the batch_number of this CustomMethodTagItem.  # noqa: E501

        Batch Number  # noqa: E501

        :return: The batch_number of this CustomMethodTagItem.  # noqa: E501
        :rtype: int
        """
        return self._batch_number

    @batch_number.setter
    def batch_number(self, batch_number):
        """Sets the batch_number of this CustomMethodTagItem.

        Batch Number  # noqa: E501

        :param batch_number: The batch_number of this CustomMethodTagItem.  # noqa: E501
        :type: int
        """

        self._batch_number = batch_number

    @property
    def security_user_id(self):
        """Gets the security_user_id of this CustomMethodTagItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this CustomMethodTagItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this CustomMethodTagItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this CustomMethodTagItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def date_created(self):
        """Gets the date_created of this CustomMethodTagItem.  # noqa: E501

        Date Created  # noqa: E501

        :return: The date_created of this CustomMethodTagItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CustomMethodTagItem.

        Date Created  # noqa: E501

        :param date_created: The date_created of this CustomMethodTagItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this CustomMethodTagItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this CustomMethodTagItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this CustomMethodTagItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this CustomMethodTagItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomMethodTagItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
