# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntrySchoolItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_school_id': 'int',
        'entry_id': 'int',
        'school_name': 'str',
        'school_type': 'str',
        'school_years': 'str',
        'school_location': 'str',
        'school_geographic_location': 'str',
        'school_candidate_number': 'str',
        'school_final_year': 'str',
        'school_final_year_score': 'str',
        'school_final_year_subjects': 'str',
        'school_comments': 'str',
        'date_modified': 'str'
    }

    attribute_map = {
        'entry_school_id': 'EntrySchoolID',
        'entry_id': 'EntryID',
        'school_name': 'SchoolName',
        'school_type': 'SchoolType',
        'school_years': 'SchoolYears',
        'school_location': 'SchoolLocation',
        'school_geographic_location': 'SchoolGeographicLocation',
        'school_candidate_number': 'SchoolCandidateNumber',
        'school_final_year': 'SchoolFinalYear',
        'school_final_year_score': 'SchoolFinalYearScore',
        'school_final_year_subjects': 'SchoolFinalYearSubjects',
        'school_comments': 'SchoolComments',
        'date_modified': 'DateModified'
    }

    def __init__(self, entry_school_id=None, entry_id=None, school_name=None, school_type=None, school_years=None, school_location=None, school_geographic_location=None, school_candidate_number=None, school_final_year=None, school_final_year_score=None, school_final_year_subjects=None, school_comments=None, date_modified=None):  # noqa: E501
        """EntrySchoolItem - a model defined in Swagger"""  # noqa: E501

        self._entry_school_id = None
        self._entry_id = None
        self._school_name = None
        self._school_type = None
        self._school_years = None
        self._school_location = None
        self._school_geographic_location = None
        self._school_candidate_number = None
        self._school_final_year = None
        self._school_final_year_score = None
        self._school_final_year_subjects = None
        self._school_comments = None
        self._date_modified = None
        self.discriminator = None

        if entry_school_id is not None:
            self.entry_school_id = entry_school_id
        if entry_id is not None:
            self.entry_id = entry_id
        if school_name is not None:
            self.school_name = school_name
        if school_type is not None:
            self.school_type = school_type
        if school_years is not None:
            self.school_years = school_years
        if school_location is not None:
            self.school_location = school_location
        if school_geographic_location is not None:
            self.school_geographic_location = school_geographic_location
        if school_candidate_number is not None:
            self.school_candidate_number = school_candidate_number
        if school_final_year is not None:
            self.school_final_year = school_final_year
        if school_final_year_score is not None:
            self.school_final_year_score = school_final_year_score
        if school_final_year_subjects is not None:
            self.school_final_year_subjects = school_final_year_subjects
        if school_comments is not None:
            self.school_comments = school_comments
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def entry_school_id(self):
        """Gets the entry_school_id of this EntrySchoolItem.  # noqa: E501

        Entry School  # noqa: E501

        :return: The entry_school_id of this EntrySchoolItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_school_id

    @entry_school_id.setter
    def entry_school_id(self, entry_school_id):
        """Sets the entry_school_id of this EntrySchoolItem.

        Entry School  # noqa: E501

        :param entry_school_id: The entry_school_id of this EntrySchoolItem.  # noqa: E501
        :type: int
        """

        self._entry_school_id = entry_school_id

    @property
    def entry_id(self):
        """Gets the entry_id of this EntrySchoolItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this EntrySchoolItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this EntrySchoolItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this EntrySchoolItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def school_name(self):
        """Gets the school_name of this EntrySchoolItem.  # noqa: E501

        School Name  # noqa: E501

        :return: The school_name of this EntrySchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._school_name

    @school_name.setter
    def school_name(self, school_name):
        """Sets the school_name of this EntrySchoolItem.

        School Name  # noqa: E501

        :param school_name: The school_name of this EntrySchoolItem.  # noqa: E501
        :type: str
        """
        if school_name is not None and len(school_name) > 50:
            raise ValueError("Invalid value for `school_name`, length must be less than or equal to `50`")  # noqa: E501

        self._school_name = school_name

    @property
    def school_type(self):
        """Gets the school_type of this EntrySchoolItem.  # noqa: E501

        School Type  # noqa: E501

        :return: The school_type of this EntrySchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._school_type

    @school_type.setter
    def school_type(self, school_type):
        """Sets the school_type of this EntrySchoolItem.

        School Type  # noqa: E501

        :param school_type: The school_type of this EntrySchoolItem.  # noqa: E501
        :type: str
        """
        if school_type is not None and len(school_type) > 50:
            raise ValueError("Invalid value for `school_type`, length must be less than or equal to `50`")  # noqa: E501

        self._school_type = school_type

    @property
    def school_years(self):
        """Gets the school_years of this EntrySchoolItem.  # noqa: E501

        School Years  # noqa: E501

        :return: The school_years of this EntrySchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._school_years

    @school_years.setter
    def school_years(self, school_years):
        """Sets the school_years of this EntrySchoolItem.

        School Years  # noqa: E501

        :param school_years: The school_years of this EntrySchoolItem.  # noqa: E501
        :type: str
        """
        if school_years is not None and len(school_years) > 10:
            raise ValueError("Invalid value for `school_years`, length must be less than or equal to `10`")  # noqa: E501

        self._school_years = school_years

    @property
    def school_location(self):
        """Gets the school_location of this EntrySchoolItem.  # noqa: E501

        School Location  # noqa: E501

        :return: The school_location of this EntrySchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._school_location

    @school_location.setter
    def school_location(self, school_location):
        """Sets the school_location of this EntrySchoolItem.

        School Location  # noqa: E501

        :param school_location: The school_location of this EntrySchoolItem.  # noqa: E501
        :type: str
        """
        if school_location is not None and len(school_location) > 50:
            raise ValueError("Invalid value for `school_location`, length must be less than or equal to `50`")  # noqa: E501

        self._school_location = school_location

    @property
    def school_geographic_location(self):
        """Gets the school_geographic_location of this EntrySchoolItem.  # noqa: E501

        School Geographic Location  # noqa: E501

        :return: The school_geographic_location of this EntrySchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._school_geographic_location

    @school_geographic_location.setter
    def school_geographic_location(self, school_geographic_location):
        """Sets the school_geographic_location of this EntrySchoolItem.

        School Geographic Location  # noqa: E501

        :param school_geographic_location: The school_geographic_location of this EntrySchoolItem.  # noqa: E501
        :type: str
        """
        if school_geographic_location is not None and len(school_geographic_location) > 50:
            raise ValueError("Invalid value for `school_geographic_location`, length must be less than or equal to `50`")  # noqa: E501

        self._school_geographic_location = school_geographic_location

    @property
    def school_candidate_number(self):
        """Gets the school_candidate_number of this EntrySchoolItem.  # noqa: E501

        School Candidate Number  # noqa: E501

        :return: The school_candidate_number of this EntrySchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._school_candidate_number

    @school_candidate_number.setter
    def school_candidate_number(self, school_candidate_number):
        """Sets the school_candidate_number of this EntrySchoolItem.

        School Candidate Number  # noqa: E501

        :param school_candidate_number: The school_candidate_number of this EntrySchoolItem.  # noqa: E501
        :type: str
        """
        if school_candidate_number is not None and len(school_candidate_number) > 10:
            raise ValueError("Invalid value for `school_candidate_number`, length must be less than or equal to `10`")  # noqa: E501

        self._school_candidate_number = school_candidate_number

    @property
    def school_final_year(self):
        """Gets the school_final_year of this EntrySchoolItem.  # noqa: E501

        School Final Year  # noqa: E501

        :return: The school_final_year of this EntrySchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._school_final_year

    @school_final_year.setter
    def school_final_year(self, school_final_year):
        """Sets the school_final_year of this EntrySchoolItem.

        School Final Year  # noqa: E501

        :param school_final_year: The school_final_year of this EntrySchoolItem.  # noqa: E501
        :type: str
        """
        if school_final_year is not None and len(school_final_year) > 10:
            raise ValueError("Invalid value for `school_final_year`, length must be less than or equal to `10`")  # noqa: E501

        self._school_final_year = school_final_year

    @property
    def school_final_year_score(self):
        """Gets the school_final_year_score of this EntrySchoolItem.  # noqa: E501

        School Final Year Score  # noqa: E501

        :return: The school_final_year_score of this EntrySchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._school_final_year_score

    @school_final_year_score.setter
    def school_final_year_score(self, school_final_year_score):
        """Sets the school_final_year_score of this EntrySchoolItem.

        School Final Year Score  # noqa: E501

        :param school_final_year_score: The school_final_year_score of this EntrySchoolItem.  # noqa: E501
        :type: str
        """
        if school_final_year_score is not None and len(school_final_year_score) > 10:
            raise ValueError("Invalid value for `school_final_year_score`, length must be less than or equal to `10`")  # noqa: E501

        self._school_final_year_score = school_final_year_score

    @property
    def school_final_year_subjects(self):
        """Gets the school_final_year_subjects of this EntrySchoolItem.  # noqa: E501

        School Final Year Subjects  # noqa: E501

        :return: The school_final_year_subjects of this EntrySchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._school_final_year_subjects

    @school_final_year_subjects.setter
    def school_final_year_subjects(self, school_final_year_subjects):
        """Sets the school_final_year_subjects of this EntrySchoolItem.

        School Final Year Subjects  # noqa: E501

        :param school_final_year_subjects: The school_final_year_subjects of this EntrySchoolItem.  # noqa: E501
        :type: str
        """
        if school_final_year_subjects is not None and len(school_final_year_subjects) > 250:
            raise ValueError("Invalid value for `school_final_year_subjects`, length must be less than or equal to `250`")  # noqa: E501

        self._school_final_year_subjects = school_final_year_subjects

    @property
    def school_comments(self):
        """Gets the school_comments of this EntrySchoolItem.  # noqa: E501

        School Comments  # noqa: E501

        :return: The school_comments of this EntrySchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._school_comments

    @school_comments.setter
    def school_comments(self, school_comments):
        """Sets the school_comments of this EntrySchoolItem.

        School Comments  # noqa: E501

        :param school_comments: The school_comments of this EntrySchoolItem.  # noqa: E501
        :type: str
        """
        if school_comments is not None and len(school_comments) > 100:
            raise ValueError("Invalid value for `school_comments`, length must be less than or equal to `100`")  # noqa: E501

        self._school_comments = school_comments

    @property
    def date_modified(self):
        """Gets the date_modified of this EntrySchoolItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this EntrySchoolItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntrySchoolItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this EntrySchoolItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntrySchoolItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
