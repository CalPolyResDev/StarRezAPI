# coding: utf-8

"""
    StarRez API

    This is a way to connect with the StarRez API. We are not the developers of the StarRez API, we are just an organization that uses it and wanted a better way to connect to it.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: resdev@calpoly.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_id': 'int',
        'entry_id': 'int',
        'payment_type_id': 'int',
        'transaction_type_enum': 'str',
        'payment_date': 'str',
        'processed_date': 'str',
        'amount': 'str',
        'drawer': 'str',
        'bank': 'str',
        'branch': 'str',
        'account_detail1': 'str',
        'account_detail2': 'str',
        'account_detail3': 'str',
        'account_detail4': 'str',
        'description': 'str',
        'banking_id': 'int',
        'security_user_id': 'int',
        'created_by_security_user_id': 'int',
        'machine_name': 'str',
        'refund_payment_id': 'int',
        'date_modified': 'str'
    }

    attribute_map = {
        'payment_id': 'PaymentID',
        'entry_id': 'EntryID',
        'payment_type_id': 'PaymentTypeID',
        'transaction_type_enum': 'TransactionTypeEnum',
        'payment_date': 'PaymentDate',
        'processed_date': 'ProcessedDate',
        'amount': 'Amount',
        'drawer': 'Drawer',
        'bank': 'Bank',
        'branch': 'Branch',
        'account_detail1': 'AccountDetail1',
        'account_detail2': 'AccountDetail2',
        'account_detail3': 'AccountDetail3',
        'account_detail4': 'AccountDetail4',
        'description': 'Description',
        'banking_id': 'BankingID',
        'security_user_id': 'SecurityUserID',
        'created_by_security_user_id': 'CreatedBy_SecurityUserID',
        'machine_name': 'MachineName',
        'refund_payment_id': 'Refund_PaymentID',
        'date_modified': 'DateModified'
    }

    def __init__(self, payment_id=None, entry_id=None, payment_type_id=None, transaction_type_enum=None, payment_date=None, processed_date=None, amount=None, drawer=None, bank=None, branch=None, account_detail1=None, account_detail2=None, account_detail3=None, account_detail4=None, description=None, banking_id=None, security_user_id=None, created_by_security_user_id=None, machine_name=None, refund_payment_id=None, date_modified=None):  # noqa: E501
        """PaymentItem - a model defined in Swagger"""  # noqa: E501

        self._payment_id = None
        self._entry_id = None
        self._payment_type_id = None
        self._transaction_type_enum = None
        self._payment_date = None
        self._processed_date = None
        self._amount = None
        self._drawer = None
        self._bank = None
        self._branch = None
        self._account_detail1 = None
        self._account_detail2 = None
        self._account_detail3 = None
        self._account_detail4 = None
        self._description = None
        self._banking_id = None
        self._security_user_id = None
        self._created_by_security_user_id = None
        self._machine_name = None
        self._refund_payment_id = None
        self._date_modified = None
        self.discriminator = None

        if payment_id is not None:
            self.payment_id = payment_id
        if entry_id is not None:
            self.entry_id = entry_id
        if payment_type_id is not None:
            self.payment_type_id = payment_type_id
        if transaction_type_enum is not None:
            self.transaction_type_enum = transaction_type_enum
        if payment_date is not None:
            self.payment_date = payment_date
        if processed_date is not None:
            self.processed_date = processed_date
        if amount is not None:
            self.amount = amount
        if drawer is not None:
            self.drawer = drawer
        if bank is not None:
            self.bank = bank
        if branch is not None:
            self.branch = branch
        if account_detail1 is not None:
            self.account_detail1 = account_detail1
        if account_detail2 is not None:
            self.account_detail2 = account_detail2
        if account_detail3 is not None:
            self.account_detail3 = account_detail3
        if account_detail4 is not None:
            self.account_detail4 = account_detail4
        if description is not None:
            self.description = description
        if banking_id is not None:
            self.banking_id = banking_id
        if security_user_id is not None:
            self.security_user_id = security_user_id
        if created_by_security_user_id is not None:
            self.created_by_security_user_id = created_by_security_user_id
        if machine_name is not None:
            self.machine_name = machine_name
        if refund_payment_id is not None:
            self.refund_payment_id = refund_payment_id
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentItem.  # noqa: E501

        Payment  # noqa: E501

        :return: The payment_id of this PaymentItem.  # noqa: E501
        :rtype: int
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentItem.

        Payment  # noqa: E501

        :param payment_id: The payment_id of this PaymentItem.  # noqa: E501
        :type: int
        """

        self._payment_id = payment_id

    @property
    def entry_id(self):
        """Gets the entry_id of this PaymentItem.  # noqa: E501

        Entry  # noqa: E501

        :return: The entry_id of this PaymentItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this PaymentItem.

        Entry  # noqa: E501

        :param entry_id: The entry_id of this PaymentItem.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def payment_type_id(self):
        """Gets the payment_type_id of this PaymentItem.  # noqa: E501

        Payment Type  # noqa: E501

        :return: The payment_type_id of this PaymentItem.  # noqa: E501
        :rtype: int
        """
        return self._payment_type_id

    @payment_type_id.setter
    def payment_type_id(self, payment_type_id):
        """Sets the payment_type_id of this PaymentItem.

        Payment Type  # noqa: E501

        :param payment_type_id: The payment_type_id of this PaymentItem.  # noqa: E501
        :type: int
        """

        self._payment_type_id = payment_type_id

    @property
    def transaction_type_enum(self):
        """Gets the transaction_type_enum of this PaymentItem.  # noqa: E501

        Transaction Type  # noqa: E501

        :return: The transaction_type_enum of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type_enum

    @transaction_type_enum.setter
    def transaction_type_enum(self, transaction_type_enum):
        """Sets the transaction_type_enum of this PaymentItem.

        Transaction Type  # noqa: E501

        :param transaction_type_enum: The transaction_type_enum of this PaymentItem.  # noqa: E501
        :type: str
        """

        self._transaction_type_enum = transaction_type_enum

    @property
    def payment_date(self):
        """Gets the payment_date of this PaymentItem.  # noqa: E501

        Payment Date  # noqa: E501

        :return: The payment_date of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this PaymentItem.

        Payment Date  # noqa: E501

        :param payment_date: The payment_date of this PaymentItem.  # noqa: E501
        :type: str
        """

        self._payment_date = payment_date

    @property
    def processed_date(self):
        """Gets the processed_date of this PaymentItem.  # noqa: E501

        Processed Date  # noqa: E501

        :return: The processed_date of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._processed_date

    @processed_date.setter
    def processed_date(self, processed_date):
        """Sets the processed_date of this PaymentItem.

        Processed Date  # noqa: E501

        :param processed_date: The processed_date of this PaymentItem.  # noqa: E501
        :type: str
        """

        self._processed_date = processed_date

    @property
    def amount(self):
        """Gets the amount of this PaymentItem.  # noqa: E501

        Amount  # noqa: E501

        :return: The amount of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentItem.

        Amount  # noqa: E501

        :param amount: The amount of this PaymentItem.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def drawer(self):
        """Gets the drawer of this PaymentItem.  # noqa: E501

        Drawer  # noqa: E501

        :return: The drawer of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._drawer

    @drawer.setter
    def drawer(self, drawer):
        """Sets the drawer of this PaymentItem.

        Drawer  # noqa: E501

        :param drawer: The drawer of this PaymentItem.  # noqa: E501
        :type: str
        """
        if drawer is not None and len(drawer) > 30:
            raise ValueError("Invalid value for `drawer`, length must be less than or equal to `30`")  # noqa: E501

        self._drawer = drawer

    @property
    def bank(self):
        """Gets the bank of this PaymentItem.  # noqa: E501

        Bank  # noqa: E501

        :return: The bank of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this PaymentItem.

        Bank  # noqa: E501

        :param bank: The bank of this PaymentItem.  # noqa: E501
        :type: str
        """
        if bank is not None and len(bank) > 30:
            raise ValueError("Invalid value for `bank`, length must be less than or equal to `30`")  # noqa: E501

        self._bank = bank

    @property
    def branch(self):
        """Gets the branch of this PaymentItem.  # noqa: E501

        Branch  # noqa: E501

        :return: The branch of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this PaymentItem.

        Branch  # noqa: E501

        :param branch: The branch of this PaymentItem.  # noqa: E501
        :type: str
        """
        if branch is not None and len(branch) > 30:
            raise ValueError("Invalid value for `branch`, length must be less than or equal to `30`")  # noqa: E501

        self._branch = branch

    @property
    def account_detail1(self):
        """Gets the account_detail1 of this PaymentItem.  # noqa: E501

        Account 1  # noqa: E501

        :return: The account_detail1 of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._account_detail1

    @account_detail1.setter
    def account_detail1(self, account_detail1):
        """Sets the account_detail1 of this PaymentItem.

        Account 1  # noqa: E501

        :param account_detail1: The account_detail1 of this PaymentItem.  # noqa: E501
        :type: str
        """

        self._account_detail1 = account_detail1

    @property
    def account_detail2(self):
        """Gets the account_detail2 of this PaymentItem.  # noqa: E501

        Account 2  # noqa: E501

        :return: The account_detail2 of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._account_detail2

    @account_detail2.setter
    def account_detail2(self, account_detail2):
        """Sets the account_detail2 of this PaymentItem.

        Account 2  # noqa: E501

        :param account_detail2: The account_detail2 of this PaymentItem.  # noqa: E501
        :type: str
        """

        self._account_detail2 = account_detail2

    @property
    def account_detail3(self):
        """Gets the account_detail3 of this PaymentItem.  # noqa: E501

        Account 3  # noqa: E501

        :return: The account_detail3 of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._account_detail3

    @account_detail3.setter
    def account_detail3(self, account_detail3):
        """Sets the account_detail3 of this PaymentItem.

        Account 3  # noqa: E501

        :param account_detail3: The account_detail3 of this PaymentItem.  # noqa: E501
        :type: str
        """

        self._account_detail3 = account_detail3

    @property
    def account_detail4(self):
        """Gets the account_detail4 of this PaymentItem.  # noqa: E501

        Account 4  # noqa: E501

        :return: The account_detail4 of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._account_detail4

    @account_detail4.setter
    def account_detail4(self, account_detail4):
        """Sets the account_detail4 of this PaymentItem.

        Account 4  # noqa: E501

        :param account_detail4: The account_detail4 of this PaymentItem.  # noqa: E501
        :type: str
        """

        self._account_detail4 = account_detail4

    @property
    def description(self):
        """Gets the description of this PaymentItem.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentItem.

        Description  # noqa: E501

        :param description: The description of this PaymentItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def banking_id(self):
        """Gets the banking_id of this PaymentItem.  # noqa: E501

        Banking  # noqa: E501

        :return: The banking_id of this PaymentItem.  # noqa: E501
        :rtype: int
        """
        return self._banking_id

    @banking_id.setter
    def banking_id(self, banking_id):
        """Sets the banking_id of this PaymentItem.

        Banking  # noqa: E501

        :param banking_id: The banking_id of this PaymentItem.  # noqa: E501
        :type: int
        """

        self._banking_id = banking_id

    @property
    def security_user_id(self):
        """Gets the security_user_id of this PaymentItem.  # noqa: E501

        Security User  # noqa: E501

        :return: The security_user_id of this PaymentItem.  # noqa: E501
        :rtype: int
        """
        return self._security_user_id

    @security_user_id.setter
    def security_user_id(self, security_user_id):
        """Sets the security_user_id of this PaymentItem.

        Security User  # noqa: E501

        :param security_user_id: The security_user_id of this PaymentItem.  # noqa: E501
        :type: int
        """

        self._security_user_id = security_user_id

    @property
    def created_by_security_user_id(self):
        """Gets the created_by_security_user_id of this PaymentItem.  # noqa: E501

        Created By Security User  # noqa: E501

        :return: The created_by_security_user_id of this PaymentItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_security_user_id

    @created_by_security_user_id.setter
    def created_by_security_user_id(self, created_by_security_user_id):
        """Sets the created_by_security_user_id of this PaymentItem.

        Created By Security User  # noqa: E501

        :param created_by_security_user_id: The created_by_security_user_id of this PaymentItem.  # noqa: E501
        :type: int
        """

        self._created_by_security_user_id = created_by_security_user_id

    @property
    def machine_name(self):
        """Gets the machine_name of this PaymentItem.  # noqa: E501

        Machine Name  # noqa: E501

        :return: The machine_name of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this PaymentItem.

        Machine Name  # noqa: E501

        :param machine_name: The machine_name of this PaymentItem.  # noqa: E501
        :type: str
        """
        if machine_name is not None and len(machine_name) > 20:
            raise ValueError("Invalid value for `machine_name`, length must be less than or equal to `20`")  # noqa: E501

        self._machine_name = machine_name

    @property
    def refund_payment_id(self):
        """Gets the refund_payment_id of this PaymentItem.  # noqa: E501

        Refund Payment  # noqa: E501

        :return: The refund_payment_id of this PaymentItem.  # noqa: E501
        :rtype: int
        """
        return self._refund_payment_id

    @refund_payment_id.setter
    def refund_payment_id(self, refund_payment_id):
        """Sets the refund_payment_id of this PaymentItem.

        Refund Payment  # noqa: E501

        :param refund_payment_id: The refund_payment_id of this PaymentItem.  # noqa: E501
        :type: int
        """

        self._refund_payment_id = refund_payment_id

    @property
    def date_modified(self):
        """Gets the date_modified of this PaymentItem.  # noqa: E501

        Date Modified  # noqa: E501

        :return: The date_modified of this PaymentItem.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this PaymentItem.

        Date Modified  # noqa: E501

        :param date_modified: The date_modified of this PaymentItem.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
